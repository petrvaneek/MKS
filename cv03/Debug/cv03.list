
cv03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002374  08002374  00003374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002424  08002424  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002424  08002424  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002424  08002424  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002424  08002424  00003424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002428  08002428  00003428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800242c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002438  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002438  000040fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b559  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001897  00000000  00000000  0000f58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00010e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b2  00000000  00000000  00011928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f887  00000000  00000000  000121da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1f5  00000000  00000000  00021a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061562  00000000  00000000  0002ec56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000901b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002790  00000000  00000000  000901fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0009298c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800235c 	.word	0x0800235c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800235c 	.word	0x0800235c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb36 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81e 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8fc 	bl	8000428 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f8ca 	bl	80003c8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000234:	f000 f862 	bl	80002fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  sct_init();
 8000238:	f000 f990 	bl	800055c <sct_init>
  HAL_TIM_Encoder_Start(&htim1, htim1.Channel);
 800023c:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <main+0x44>)
 800023e:	7f1b      	ldrb	r3, [r3, #28]
 8000240:	001a      	movs	r2, r3
 8000242:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <main+0x44>)
 8000244:	0011      	movs	r1, r2
 8000246:	0018      	movs	r0, r3
 8000248:	f001 faf4 	bl	8001834 <HAL_TIM_Encoder_Start>
	  //for(uint16_t i = 0; i < 1000; i+=111)
	  	//  {
	  		  //sct_value(i);
	  		  //HAL_Delay(500);
	  	  //}
	  sct_value(__HAL_TIM_GET_COUNTER(&htim1));
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <main+0x44>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000252:	0018      	movs	r0, r3
 8000254:	f000 f9ca 	bl	80005ec <sct_value>
	  HAL_Delay(100);
 8000258:	2064      	movs	r0, #100	@ 0x64
 800025a:	f000 fb7f 	bl	800095c <HAL_Delay>
  {
 800025e:	46c0      	nop			@ (mov r8, r8)
 8000260:	e7f4      	b.n	800024c <main+0x2c>
 8000262:	46c0      	nop			@ (mov r8, r8)
 8000264:	20000028 	.word	0x20000028

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b091      	sub	sp, #68	@ 0x44
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	2410      	movs	r4, #16
 8000270:	193b      	adds	r3, r7, r4
 8000272:	0018      	movs	r0, r3
 8000274:	2330      	movs	r3, #48	@ 0x30
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f002 f843 	bl	8002304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	003b      	movs	r3, r7
 8000280:	0018      	movs	r0, r3
 8000282:	2310      	movs	r3, #16
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f002 f83c 	bl	8002304 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	0021      	movs	r1, r4
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2202      	movs	r2, #2
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2201      	movs	r2, #1
 8000298:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2210      	movs	r2, #16
 800029e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2202      	movs	r2, #2
 80002a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	22a0      	movs	r2, #160	@ 0xa0
 80002b0:	0392      	lsls	r2, r2, #14
 80002b2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2200      	movs	r2, #0
 80002b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 fdb3 	bl	8000e28 <HAL_RCC_OscConfig>
 80002c2:	1e03      	subs	r3, r0, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002c6:	f000 f943 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	003b      	movs	r3, r7
 80002cc:	2207      	movs	r2, #7
 80002ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	003b      	movs	r3, r7
 80002d2:	2202      	movs	r2, #2
 80002d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	003b      	movs	r3, r7
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	003b      	movs	r3, r7
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e2:	003b      	movs	r3, r7
 80002e4:	2101      	movs	r1, #1
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 f8b8 	bl	800145c <HAL_RCC_ClockConfig>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002f0:	f000 f92e 	bl	8000550 <Error_Handler>
  }
}
 80002f4:	46c0      	nop			@ (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b011      	add	sp, #68	@ 0x44
 80002fa:	bd90      	pop	{r4, r7, pc}

080002fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b08d      	sub	sp, #52	@ 0x34
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000302:	240c      	movs	r4, #12
 8000304:	193b      	adds	r3, r7, r4
 8000306:	0018      	movs	r0, r3
 8000308:	2324      	movs	r3, #36	@ 0x24
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f001 fff9 	bl	8002304 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	0018      	movs	r0, r3
 8000316:	2308      	movs	r3, #8
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f001 fff2 	bl	8002304 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000320:	4b27      	ldr	r3, [pc, #156]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 8000322:	4a28      	ldr	r2, [pc, #160]	@ (80003c4 <MX_TIM1_Init+0xc8>)
 8000324:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000326:	4b26      	ldr	r3, [pc, #152]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032c:	4b24      	ldr	r3, [pc, #144]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150;
 8000332:	4b23      	ldr	r3, [pc, #140]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 8000334:	2296      	movs	r2, #150	@ 0x96
 8000336:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000338:	4b21      	ldr	r3, [pc, #132]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800033e:	4b20      	ldr	r3, [pc, #128]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000344:	4b1e      	ldr	r3, [pc, #120]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 8000346:	2200      	movs	r2, #0
 8000348:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800034a:	0021      	movs	r1, r4
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2202      	movs	r2, #2
 8000356:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2201      	movs	r2, #1
 800035c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2201      	movs	r2, #1
 8000374:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2200      	movs	r2, #0
 800037a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000382:	187a      	adds	r2, r7, r1
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 8000386:	0011      	movs	r1, r2
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f9ab 	bl	80016e4 <HAL_TIM_Encoder_Init>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000392:	f000 f8dd 	bl	8000550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003a2:	1d3a      	adds	r2, r7, #4
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <MX_TIM1_Init+0xc4>)
 80003a6:	0011      	movs	r1, r2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 fb8f 	bl	8001acc <HAL_TIMEx_MasterConfigSynchronization>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80003b2:	f000 f8cd 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b00d      	add	sp, #52	@ 0x34
 80003bc:	bd90      	pop	{r4, r7, pc}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40012c00 	.word	0x40012c00

080003c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003cc:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003ce:	4a15      	ldr	r2, [pc, #84]	@ (8000424 <MX_USART2_UART_Init+0x5c>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003d2:	4b13      	ldr	r3, [pc, #76]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003d4:	2296      	movs	r2, #150	@ 0x96
 80003d6:	0212      	lsls	r2, r2, #8
 80003d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000404:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040a:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fbb5 	bl	8001b7c <HAL_UART_Init>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000416:	f000 f89b 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000070 	.word	0x20000070
 8000424:	40004400 	.word	0x40004400

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b08b      	sub	sp, #44	@ 0x2c
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	2414      	movs	r4, #20
 8000430:	193b      	adds	r3, r7, r4
 8000432:	0018      	movs	r0, r3
 8000434:	2314      	movs	r3, #20
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f001 ff63 	bl	8002304 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043e:	4b41      	ldr	r3, [pc, #260]	@ (8000544 <MX_GPIO_Init+0x11c>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b40      	ldr	r3, [pc, #256]	@ (8000544 <MX_GPIO_Init+0x11c>)
 8000444:	2180      	movs	r1, #128	@ 0x80
 8000446:	0309      	lsls	r1, r1, #12
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b3d      	ldr	r3, [pc, #244]	@ (8000544 <MX_GPIO_Init+0x11c>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	@ 0x80
 8000452:	031b      	lsls	r3, r3, #12
 8000454:	4013      	ands	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b3a      	ldr	r3, [pc, #232]	@ (8000544 <MX_GPIO_Init+0x11c>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b39      	ldr	r3, [pc, #228]	@ (8000544 <MX_GPIO_Init+0x11c>)
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	03c9      	lsls	r1, r1, #15
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b36      	ldr	r3, [pc, #216]	@ (8000544 <MX_GPIO_Init+0x11c>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	03db      	lsls	r3, r3, #15
 8000470:	4013      	ands	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b33      	ldr	r3, [pc, #204]	@ (8000544 <MX_GPIO_Init+0x11c>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b32      	ldr	r3, [pc, #200]	@ (8000544 <MX_GPIO_Init+0x11c>)
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	0289      	lsls	r1, r1, #10
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b2f      	ldr	r3, [pc, #188]	@ (8000544 <MX_GPIO_Init+0x11c>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	029b      	lsls	r3, r3, #10
 800048c:	4013      	ands	r3, r2
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b2c      	ldr	r3, [pc, #176]	@ (8000544 <MX_GPIO_Init+0x11c>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b2b      	ldr	r3, [pc, #172]	@ (8000544 <MX_GPIO_Init+0x11c>)
 8000498:	2180      	movs	r1, #128	@ 0x80
 800049a:	02c9      	lsls	r1, r1, #11
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b28      	ldr	r3, [pc, #160]	@ (8000544 <MX_GPIO_Init+0x11c>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	@ 0x80
 80004a6:	02db      	lsls	r3, r3, #11
 80004a8:	4013      	ands	r3, r2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ae:	2390      	movs	r3, #144	@ 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	2200      	movs	r2, #0
 80004b4:	2120      	movs	r1, #32
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fc98 	bl	8000dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 80004bc:	2387      	movs	r3, #135	@ 0x87
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	4821      	ldr	r0, [pc, #132]	@ (8000548 <MX_GPIO_Init+0x120>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0019      	movs	r1, r3
 80004c6:	f000 fc91 	bl	8000dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	0192      	lsls	r2, r2, #6
 80004d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2284      	movs	r2, #132	@ 0x84
 80004d6:	0392      	lsls	r2, r2, #14
 80004d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	4a1a      	ldr	r2, [pc, #104]	@ (800054c <MX_GPIO_Init+0x124>)
 80004e4:	0019      	movs	r1, r3
 80004e6:	0010      	movs	r0, r2
 80004e8:	f000 fb10 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2220      	movs	r2, #32
 80004f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2201      	movs	r2, #1
 80004f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000504:	193a      	adds	r2, r7, r4
 8000506:	2390      	movs	r3, #144	@ 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fafd 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2287      	movs	r2, #135	@ 0x87
 8000518:	00d2      	lsls	r2, r2, #3
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2201      	movs	r2, #1
 8000520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	187b      	adds	r3, r7, r1
 8000530:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <MX_GPIO_Init+0x120>)
 8000532:	0019      	movs	r1, r3
 8000534:	0010      	movs	r0, r2
 8000536:	f000 fae9 	bl	8000b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b00b      	add	sp, #44	@ 0x2c
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	40021000 	.word	0x40021000
 8000548:	48000400 	.word	0x48000400
 800054c:	48000800 	.word	0x48000800

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	e7fd      	b.n	8000558 <Error_Handler+0x8>

0800055c <sct_init>:
 */
#include "main.h"
#include "sct.h"

void sct_init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	sct_led(0);
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f803 	bl	800056c <sct_led>
}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <sct_led>:

void sct_led(uint32_t value)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<32;i++)
 8000574:	230f      	movs	r3, #15
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e01e      	b.n	80005bc <sct_led+0x50>
	{
		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, (value & 1 ));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2201      	movs	r2, #1
 8000584:	4013      	ands	r3, r2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4817      	ldr	r0, [pc, #92]	@ (80005e8 <sct_led+0x7c>)
 800058a:	001a      	movs	r2, r3
 800058c:	2110      	movs	r1, #16
 800058e:	f000 fc2d 	bl	8000dec <HAL_GPIO_WritePin>
		value >>= 1;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 8000598:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <sct_led+0x7c>)
 800059a:	2201      	movs	r2, #1
 800059c:	2108      	movs	r1, #8
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fc24 	bl	8000dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 80005a4:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <sct_led+0x7c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 fc1e 	bl	8000dec <HAL_GPIO_WritePin>
	for (uint8_t i=0; i<32;i++)
 80005b0:	210f      	movs	r1, #15
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	3201      	adds	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	230f      	movs	r3, #15
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b1f      	cmp	r3, #31
 80005c4:	d9db      	bls.n	800057e <sct_led+0x12>
	};

	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <sct_led+0x7c>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	2120      	movs	r1, #32
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fc0d 	bl	8000dec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 80005d2:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <sct_led+0x7c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	2120      	movs	r1, #32
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fc07 	bl	8000dec <HAL_GPIO_WritePin>
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b004      	add	sp, #16
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	48000400 	.word	0x48000400

080005ec <sct_value>:

void sct_value(uint16_t value)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	0002      	movs	r2, r0
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	801a      	strh	r2, [r3, #0]
	0b0100000000000011 << 0,
	0b0111000000001111 << 0,
	0b0110000000001111 << 0,
	},
	};
	uint32_t reg = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[0][value / 100 % 10];
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	2164      	movs	r1, #100	@ 0x64
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff fd80 	bl	8000108 <__udivsi3>
 8000608:	0003      	movs	r3, r0
 800060a:	b29b      	uxth	r3, r3
 800060c:	210a      	movs	r1, #10
 800060e:	0018      	movs	r0, r3
 8000610:	f7ff fe00 	bl	8000214 <__aeabi_uidivmod>
 8000614:	000b      	movs	r3, r1
 8000616:	b29b      	uxth	r3, r3
 8000618:	001a      	movs	r2, r3
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <sct_value+0x98>)
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	58d3      	ldr	r3, [r2, r3]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	4313      	orrs	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	210a      	movs	r1, #10
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff fd6b 	bl	8000108 <__udivsi3>
 8000632:	0003      	movs	r3, r0
 8000634:	b29b      	uxth	r3, r3
 8000636:	210a      	movs	r1, #10
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff fdeb 	bl	8000214 <__aeabi_uidivmod>
 800063e:	000b      	movs	r3, r1
 8000640:	b29b      	uxth	r3, r3
 8000642:	001a      	movs	r2, r3
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <sct_value+0x98>)
 8000646:	320a      	adds	r2, #10
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	58d3      	ldr	r3, [r2, r3]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4313      	orrs	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 8000652:	1dbb      	adds	r3, r7, #6
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	210a      	movs	r1, #10
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fddb 	bl	8000214 <__aeabi_uidivmod>
 800065e:	000b      	movs	r3, r1
 8000660:	b29b      	uxth	r3, r3
 8000662:	001a      	movs	r2, r3
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <sct_value+0x98>)
 8000666:	3214      	adds	r2, #20
 8000668:	0092      	lsls	r2, r2, #2
 800066a:	58d3      	ldr	r3, [r2, r3]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	4313      	orrs	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
	sct_led(reg);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff79 	bl	800056c <sct_led>
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	08002374 	.word	0x08002374

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <HAL_MspInit+0x44>)
 8000690:	699a      	ldr	r2, [r3, #24]
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <HAL_MspInit+0x44>)
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	619a      	str	r2, [r3, #24]
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <HAL_MspInit+0x44>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_MspInit+0x44>)
 80006a8:	69da      	ldr	r2, [r3, #28]
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_MspInit+0x44>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0549      	lsls	r1, r1, #21
 80006b0:	430a      	orrs	r2, r1
 80006b2:	61da      	str	r2, [r3, #28]
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <HAL_MspInit+0x44>)
 80006b6:	69da      	ldr	r2, [r3, #28]
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	055b      	lsls	r3, r3, #21
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b08b      	sub	sp, #44	@ 0x2c
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	2414      	movs	r4, #20
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f001 fe0e 	bl	8002304 <memset>
  if(htim_encoder->Instance==TIM1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000764 <HAL_TIM_Encoder_MspInit+0x94>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d133      	bne.n	800075a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <HAL_TIM_Encoder_MspInit+0x98>)
 80006f4:	699a      	ldr	r2, [r3, #24]
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <HAL_TIM_Encoder_MspInit+0x98>)
 80006f8:	2180      	movs	r1, #128	@ 0x80
 80006fa:	0109      	lsls	r1, r1, #4
 80006fc:	430a      	orrs	r2, r1
 80006fe:	619a      	str	r2, [r3, #24]
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <HAL_TIM_Encoder_MspInit+0x98>)
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	2380      	movs	r3, #128	@ 0x80
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	4013      	ands	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <HAL_TIM_Encoder_MspInit+0x98>)
 8000710:	695a      	ldr	r2, [r3, #20]
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_TIM_Encoder_MspInit+0x98>)
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	0289      	lsls	r1, r1, #10
 8000718:	430a      	orrs	r2, r1
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_TIM_Encoder_MspInit+0x98>)
 800071e:	695a      	ldr	r2, [r3, #20]
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	029b      	lsls	r3, r3, #10
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	22c0      	movs	r2, #192	@ 0xc0
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2202      	movs	r2, #2
 8000738:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2202      	movs	r2, #2
 800074a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	187a      	adds	r2, r7, r1
 800074e:	2390      	movs	r3, #144	@ 0x90
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 f9d9 	bl	8000b0c <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b00b      	add	sp, #44	@ 0x2c
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	40012c00 	.word	0x40012c00
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b08b      	sub	sp, #44	@ 0x2c
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	2414      	movs	r4, #20
 8000776:	193b      	adds	r3, r7, r4
 8000778:	0018      	movs	r0, r3
 800077a:	2314      	movs	r3, #20
 800077c:	001a      	movs	r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	f001 fdc0 	bl	8002304 <memset>
  if(huart->Instance==USART2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <HAL_UART_MspInit+0x90>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d132      	bne.n	80007f4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <HAL_UART_MspInit+0x94>)
 8000790:	69da      	ldr	r2, [r3, #28]
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <HAL_UART_MspInit+0x94>)
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	0289      	lsls	r1, r1, #10
 8000798:	430a      	orrs	r2, r1
 800079a:	61da      	str	r2, [r3, #28]
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <HAL_UART_MspInit+0x94>)
 800079e:	69da      	ldr	r2, [r3, #28]
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	029b      	lsls	r3, r3, #10
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <HAL_UART_MspInit+0x94>)
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <HAL_UART_MspInit+0x94>)
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	0289      	lsls	r1, r1, #10
 80007b4:	430a      	orrs	r2, r1
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <HAL_UART_MspInit+0x94>)
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	029b      	lsls	r3, r3, #10
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	220c      	movs	r2, #12
 80007cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2202      	movs	r2, #2
 80007d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2201      	movs	r2, #1
 80007e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	187a      	adds	r2, r7, r1
 80007e8:	2390      	movs	r3, #144	@ 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 f98c 	bl	8000b0c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b00b      	add	sp, #44	@ 0x2c
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	40004400 	.word	0x40004400
 8000800:	40021000 	.word	0x40021000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	e7fd      	b.n	8000808 <NMI_Handler+0x4>

0800080c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	e7fd      	b.n	8000810 <HardFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f87a 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000840:	480d      	ldr	r0, [pc, #52]	@ (8000878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000842:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f7ff fff7 	bl	8000836 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	@ (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800086e:	f001 fd51 	bl	8002314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f7ff fcd5 	bl	8000220 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   r0, =_estack
 8000878:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000884:	0800242c 	.word	0x0800242c
  ldr r2, =_sbss
 8000888:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800088c:	200000fc 	.word	0x200000fc

08000890 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_IRQHandler>
	...

08000894 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <HAL_Init+0x24>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_Init+0x24>)
 800089e:	2110      	movs	r1, #16
 80008a0:	430a      	orrs	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 f809 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008aa:	f7ff feed 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <HAL_InitTick+0x5c>)
 80008c6:	681c      	ldr	r4, [r3, #0]
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_InitTick+0x60>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	0019      	movs	r1, r3
 80008ce:	23fa      	movs	r3, #250	@ 0xfa
 80008d0:	0098      	lsls	r0, r3, #2
 80008d2:	f7ff fc19 	bl	8000108 <__udivsi3>
 80008d6:	0003      	movs	r3, r0
 80008d8:	0019      	movs	r1, r3
 80008da:	0020      	movs	r0, r4
 80008dc:	f7ff fc14 	bl	8000108 <__udivsi3>
 80008e0:	0003      	movs	r3, r0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 f905 	bl	8000af2 <HAL_SYSTICK_Config>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e00f      	b.n	8000910 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d80b      	bhi.n	800090e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 f8e2 	bl	8000ac8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_InitTick+0x64>)
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b003      	add	sp, #12
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <HAL_IncTick+0x1c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	001a      	movs	r2, r3
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_IncTick+0x20>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	18d2      	adds	r2, r2, r3
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <HAL_IncTick+0x20>)
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	20000008 	.word	0x20000008
 8000944:	200000f8 	.word	0x200000f8

08000948 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b02      	ldr	r3, [pc, #8]	@ (8000958 <HAL_GetTick+0x10>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	200000f8 	.word	0x200000f8

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fff0 	bl	8000948 <HAL_GetTick>
 8000968:	0003      	movs	r3, r0
 800096a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	001a      	movs	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	189b      	adds	r3, r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	f7ff ffe0 	bl	8000948 <HAL_GetTick>
 8000988:	0002      	movs	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b004      	add	sp, #16
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	20000008 	.word	0x20000008

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	0002      	movs	r2, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80009b8:	d828      	bhi.n	8000a0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000a78 <__NVIC_SetPriority+0xd4>)
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	33c0      	adds	r3, #192	@ 0xc0
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	589b      	ldr	r3, [r3, r2]
 80009ca:	1dfa      	adds	r2, r7, #7
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	0011      	movs	r1, r2
 80009d0:	2203      	movs	r2, #3
 80009d2:	400a      	ands	r2, r1
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	21ff      	movs	r1, #255	@ 0xff
 80009d8:	4091      	lsls	r1, r2
 80009da:	000a      	movs	r2, r1
 80009dc:	43d2      	mvns	r2, r2
 80009de:	401a      	ands	r2, r3
 80009e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	22ff      	movs	r2, #255	@ 0xff
 80009e8:	401a      	ands	r2, r3
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	0018      	movs	r0, r3
 80009f0:	2303      	movs	r3, #3
 80009f2:	4003      	ands	r3, r0
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f8:	481f      	ldr	r0, [pc, #124]	@ (8000a78 <__NVIC_SetPriority+0xd4>)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	430a      	orrs	r2, r1
 8000a04:	33c0      	adds	r3, #192	@ 0xc0
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a0a:	e031      	b.n	8000a70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <__NVIC_SetPriority+0xd8>)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0019      	movs	r1, r3
 8000a14:	230f      	movs	r3, #15
 8000a16:	400b      	ands	r3, r1
 8000a18:	3b08      	subs	r3, #8
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3306      	adds	r3, #6
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	3304      	adds	r3, #4
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	400a      	ands	r2, r1
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	21ff      	movs	r1, #255	@ 0xff
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	22ff      	movs	r2, #255	@ 0xff
 8000a44:	401a      	ands	r2, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4003      	ands	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <__NVIC_SetPriority+0xd8>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	001c      	movs	r4, r3
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	4023      	ands	r3, r4
 8000a60:	3b08      	subs	r3, #8
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	3306      	adds	r3, #6
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	18c3      	adds	r3, r0, r3
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b003      	add	sp, #12
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	1e5a      	subs	r2, r3, #1
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	045b      	lsls	r3, r3, #17
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d301      	bcc.n	8000a98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a94:	2301      	movs	r3, #1
 8000a96:	e010      	b.n	8000aba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <SysTick_Config+0x44>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	3a01      	subs	r2, #1
 8000a9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff ff7c 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <SysTick_Config+0x44>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <SysTick_Config+0x44>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	0018      	movs	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	1c02      	adds	r2, r0, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff ff5d 	bl	80009a4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff ffbf 	bl	8000a80 <SysTick_Config>
 8000b02:	0003      	movs	r3, r0
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1a:	e14f      	b.n	8000dbc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2101      	movs	r1, #1
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d100      	bne.n	8000b34 <HAL_GPIO_Init+0x28>
 8000b32:	e140      	b.n	8000db6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d005      	beq.n	8000b4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2203      	movs	r2, #3
 8000b46:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d130      	bne.n	8000bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2203      	movs	r2, #3
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	43da      	mvns	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	0013      	movs	r3, r2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b82:	2201      	movs	r2, #1
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	091b      	lsrs	r3, r3, #4
 8000b98:	2201      	movs	r2, #1
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d017      	beq.n	8000bea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2203      	movs	r2, #3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d123      	bne.n	8000c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	08da      	lsrs	r2, r3, #3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3208      	adds	r2, #8
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	58d3      	ldr	r3, [r2, r3]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	2207      	movs	r2, #7
 8000c08:	4013      	ands	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	691a      	ldr	r2, [r3, #16]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2107      	movs	r1, #7
 8000c22:	400b      	ands	r3, r1
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	08da      	lsrs	r2, r3, #3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3208      	adds	r2, #8
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	6939      	ldr	r1, [r7, #16]
 8000c3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	0013      	movs	r3, r2
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	23c0      	movs	r3, #192	@ 0xc0
 8000c78:	029b      	lsls	r3, r3, #10
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d100      	bne.n	8000c80 <HAL_GPIO_Init+0x174>
 8000c7e:	e09a      	b.n	8000db6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c80:	4b54      	ldr	r3, [pc, #336]	@ (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000c82:	699a      	ldr	r2, [r3, #24]
 8000c84:	4b53      	ldr	r3, [pc, #332]	@ (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	619a      	str	r2, [r3, #24]
 8000c8c:	4b51      	ldr	r3, [pc, #324]	@ (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4013      	ands	r3, r2
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c98:	4a4f      	ldr	r2, [pc, #316]	@ (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	589b      	ldr	r3, [r3, r2]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	2203      	movs	r2, #3
 8000caa:	4013      	ands	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	43da      	mvns	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	2390      	movs	r3, #144	@ 0x90
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0x1e2>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d00d      	beq.n	8000cea <HAL_GPIO_Init+0x1de>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a43      	ldr	r2, [pc, #268]	@ (8000de0 <HAL_GPIO_Init+0x2d4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d007      	beq.n	8000ce6 <HAL_GPIO_Init+0x1da>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a42      	ldr	r2, [pc, #264]	@ (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_GPIO_Init+0x1d6>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	e004      	b.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e002      	b.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d00:	4935      	ldr	r1, [pc, #212]	@ (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0e:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	2380      	movs	r3, #128	@ 0x80
 8000d24:	035b      	lsls	r3, r3, #13
 8000d26:	4013      	ands	r3, r2
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d32:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43da      	mvns	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	039b      	lsls	r3, r3, #14
 8000d50:	4013      	ands	r3, r2
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	@ (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d62:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	2380      	movs	r3, #128	@ 0x80
 8000d78:	029b      	lsls	r3, r3, #10
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	025b      	lsls	r3, r3, #9
 8000da4:	4013      	ands	r3, r2
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000db0:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	40da      	lsrs	r2, r3
 8000dc4:	1e13      	subs	r3, r2, #0
 8000dc6:	d000      	beq.n	8000dca <HAL_GPIO_Init+0x2be>
 8000dc8:	e6a8      	b.n	8000b1c <HAL_GPIO_Init+0x10>
  } 
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b006      	add	sp, #24
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	48000800 	.word	0x48000800
 8000de4:	48000c00 	.word	0x48000c00
 8000de8:	40010400 	.word	0x40010400

08000dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	0008      	movs	r0, r1
 8000df6:	0011      	movs	r1, r2
 8000df8:	1cbb      	adds	r3, r7, #2
 8000dfa:	1c02      	adds	r2, r0, #0
 8000dfc:	801a      	strh	r2, [r3, #0]
 8000dfe:	1c7b      	adds	r3, r7, #1
 8000e00:	1c0a      	adds	r2, r1, #0
 8000e02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e04:	1c7b      	adds	r3, r7, #1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d004      	beq.n	8000e16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e0c:	1cbb      	adds	r3, r7, #2
 8000e0e:	881a      	ldrh	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e14:	e003      	b.n	8000e1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e16:	1cbb      	adds	r3, r7, #2
 8000e18:	881a      	ldrh	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e301      	b.n	800143e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	d100      	bne.n	8000e46 <HAL_RCC_OscConfig+0x1e>
 8000e44:	e08d      	b.n	8000f62 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e46:	4bc3      	ldr	r3, [pc, #780]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d00e      	beq.n	8000e70 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e52:	4bc0      	ldr	r3, [pc, #768]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	220c      	movs	r2, #12
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d116      	bne.n	8000e8c <HAL_RCC_OscConfig+0x64>
 8000e5e:	4bbd      	ldr	r3, [pc, #756]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	2380      	movs	r3, #128	@ 0x80
 8000e64:	025b      	lsls	r3, r3, #9
 8000e66:	401a      	ands	r2, r3
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	025b      	lsls	r3, r3, #9
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d10d      	bne.n	8000e8c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	4bb8      	ldr	r3, [pc, #736]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	029b      	lsls	r3, r3, #10
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d100      	bne.n	8000e7e <HAL_RCC_OscConfig+0x56>
 8000e7c:	e070      	b.n	8000f60 <HAL_RCC_OscConfig+0x138>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d000      	beq.n	8000e88 <HAL_RCC_OscConfig+0x60>
 8000e86:	e06b      	b.n	8000f60 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e2d8      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d107      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x7c>
 8000e94:	4baf      	ldr	r3, [pc, #700]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4bae      	ldr	r3, [pc, #696]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	0249      	lsls	r1, r1, #9
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e02f      	b.n	8000f04 <HAL_RCC_OscConfig+0xdc>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x9e>
 8000eac:	4ba9      	ldr	r3, [pc, #676]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4ba8      	ldr	r3, [pc, #672]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	49a9      	ldr	r1, [pc, #676]	@ (8001158 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	4ba6      	ldr	r3, [pc, #664]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4ba5      	ldr	r3, [pc, #660]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	49a7      	ldr	r1, [pc, #668]	@ (800115c <HAL_RCC_OscConfig+0x334>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e01e      	b.n	8000f04 <HAL_RCC_OscConfig+0xdc>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d10e      	bne.n	8000eec <HAL_RCC_OscConfig+0xc4>
 8000ece:	4ba1      	ldr	r3, [pc, #644]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4ba0      	ldr	r3, [pc, #640]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000ed4:	2180      	movs	r1, #128	@ 0x80
 8000ed6:	02c9      	lsls	r1, r1, #11
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	4b9d      	ldr	r3, [pc, #628]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b9c      	ldr	r3, [pc, #624]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e00b      	b.n	8000f04 <HAL_RCC_OscConfig+0xdc>
 8000eec:	4b99      	ldr	r3, [pc, #612]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b98      	ldr	r3, [pc, #608]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000ef2:	4999      	ldr	r1, [pc, #612]	@ (8001158 <HAL_RCC_OscConfig+0x330>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	4b96      	ldr	r3, [pc, #600]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b95      	ldr	r3, [pc, #596]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000efe:	4997      	ldr	r1, [pc, #604]	@ (800115c <HAL_RCC_OscConfig+0x334>)
 8000f00:	400a      	ands	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d014      	beq.n	8000f36 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fd1c 	bl	8000948 <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f16:	f7ff fd17 	bl	8000948 <HAL_GetTick>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	@ 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e28a      	b.n	800143e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	4b8a      	ldr	r3, [pc, #552]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0xee>
 8000f34:	e015      	b.n	8000f62 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fd07 	bl	8000948 <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fd02 	bl	8000948 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	@ 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e275      	b.n	800143e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	4b80      	ldr	r3, [pc, #512]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	029b      	lsls	r3, r3, #10
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x118>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d100      	bne.n	8000f6e <HAL_RCC_OscConfig+0x146>
 8000f6c:	e069      	b.n	8001042 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f6e:	4b79      	ldr	r3, [pc, #484]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	220c      	movs	r2, #12
 8000f74:	4013      	ands	r3, r2
 8000f76:	d00b      	beq.n	8000f90 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f78:	4b76      	ldr	r3, [pc, #472]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d11c      	bne.n	8000fbe <HAL_RCC_OscConfig+0x196>
 8000f84:	4b73      	ldr	r3, [pc, #460]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	025b      	lsls	r3, r3, #9
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d116      	bne.n	8000fbe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f90:	4b70      	ldr	r3, [pc, #448]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2202      	movs	r2, #2
 8000f96:	4013      	ands	r3, r2
 8000f98:	d005      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x17e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d001      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e24b      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa6:	4b6b      	ldr	r3, [pc, #428]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	22f8      	movs	r2, #248	@ 0xf8
 8000fac:	4393      	bics	r3, r2
 8000fae:	0019      	movs	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	00da      	lsls	r2, r3, #3
 8000fb6:	4b67      	ldr	r3, [pc, #412]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbc:	e041      	b.n	8001042 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d024      	beq.n	8001010 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc6:	4b63      	ldr	r3, [pc, #396]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4b62      	ldr	r3, [pc, #392]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fcb9 	bl	8000948 <HAL_GetTick>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fcb4 	bl	8000948 <HAL_GetTick>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e227      	b.n	800143e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fee:	4b59      	ldr	r3, [pc, #356]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d0f1      	beq.n	8000fdc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff8:	4b56      	ldr	r3, [pc, #344]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	22f8      	movs	r2, #248	@ 0xf8
 8000ffe:	4393      	bics	r3, r2
 8001000:	0019      	movs	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	00da      	lsls	r2, r3, #3
 8001008:	4b52      	ldr	r3, [pc, #328]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e018      	b.n	8001042 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001010:	4b50      	ldr	r3, [pc, #320]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b4f      	ldr	r3, [pc, #316]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8001016:	2101      	movs	r1, #1
 8001018:	438a      	bics	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fc94 	bl	8000948 <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fc8f 	bl	8000948 <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e202      	b.n	800143e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001038:	4b46      	ldr	r3, [pc, #280]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2202      	movs	r2, #2
 800103e:	4013      	ands	r3, r2
 8001040:	d1f1      	bne.n	8001026 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2208      	movs	r2, #8
 8001048:	4013      	ands	r3, r2
 800104a:	d036      	beq.n	80010ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d019      	beq.n	8001088 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001054:	4b3f      	ldr	r3, [pc, #252]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8001056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001058:	4b3e      	ldr	r3, [pc, #248]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 800105a:	2101      	movs	r1, #1
 800105c:	430a      	orrs	r2, r1
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001060:	f7ff fc72 	bl	8000948 <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106a:	f7ff fc6d 	bl	8000948 <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e1e0      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107c:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 800107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001080:	2202      	movs	r2, #2
 8001082:	4013      	ands	r3, r2
 8001084:	d0f1      	beq.n	800106a <HAL_RCC_OscConfig+0x242>
 8001086:	e018      	b.n	80010ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001088:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 800108a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800108c:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 800108e:	2101      	movs	r1, #1
 8001090:	438a      	bics	r2, r1
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fc58 	bl	8000948 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109e:	f7ff fc53 	bl	8000948 <HAL_GetTick>
 80010a2:	0002      	movs	r2, r0
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e1c6      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b0:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b4:	2202      	movs	r2, #2
 80010b6:	4013      	ands	r3, r2
 80010b8:	d1f1      	bne.n	800109e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2204      	movs	r2, #4
 80010c0:	4013      	ands	r3, r2
 80010c2:	d100      	bne.n	80010c6 <HAL_RCC_OscConfig+0x29e>
 80010c4:	e0b4      	b.n	8001230 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c6:	201f      	movs	r0, #31
 80010c8:	183b      	adds	r3, r7, r0
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ce:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 80010d0:	69da      	ldr	r2, [r3, #28]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	055b      	lsls	r3, r3, #21
 80010d6:	4013      	ands	r3, r2
 80010d8:	d110      	bne.n	80010fc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 80010dc:	69da      	ldr	r2, [r3, #28]
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 80010e0:	2180      	movs	r1, #128	@ 0x80
 80010e2:	0549      	lsls	r1, r1, #21
 80010e4:	430a      	orrs	r2, r1
 80010e6:	61da      	str	r2, [r3, #28]
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	69da      	ldr	r2, [r3, #28]
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	055b      	lsls	r3, r3, #21
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010f6:	183b      	adds	r3, r7, r0
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_RCC_OscConfig+0x338>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4013      	ands	r3, r2
 8001106:	d11a      	bne.n	800113e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001108:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_RCC_OscConfig+0x338>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <HAL_RCC_OscConfig+0x338>)
 800110e:	2180      	movs	r1, #128	@ 0x80
 8001110:	0049      	lsls	r1, r1, #1
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001116:	f7ff fc17 	bl	8000948 <HAL_GetTick>
 800111a:	0003      	movs	r3, r0
 800111c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001120:	f7ff fc12 	bl	8000948 <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	@ 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e185      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <HAL_RCC_OscConfig+0x338>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4013      	ands	r3, r2
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10e      	bne.n	8001164 <HAL_RCC_OscConfig+0x33c>
 8001146:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 8001148:	6a1a      	ldr	r2, [r3, #32]
 800114a:	4b02      	ldr	r3, [pc, #8]	@ (8001154 <HAL_RCC_OscConfig+0x32c>)
 800114c:	2101      	movs	r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	621a      	str	r2, [r3, #32]
 8001152:	e035      	b.n	80011c0 <HAL_RCC_OscConfig+0x398>
 8001154:	40021000 	.word	0x40021000
 8001158:	fffeffff 	.word	0xfffeffff
 800115c:	fffbffff 	.word	0xfffbffff
 8001160:	40007000 	.word	0x40007000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x35e>
 800116c:	4bb6      	ldr	r3, [pc, #728]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	4bb5      	ldr	r3, [pc, #724]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001172:	2101      	movs	r1, #1
 8001174:	438a      	bics	r2, r1
 8001176:	621a      	str	r2, [r3, #32]
 8001178:	4bb3      	ldr	r3, [pc, #716]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	4bb2      	ldr	r3, [pc, #712]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800117e:	2104      	movs	r1, #4
 8001180:	438a      	bics	r2, r1
 8001182:	621a      	str	r2, [r3, #32]
 8001184:	e01c      	b.n	80011c0 <HAL_RCC_OscConfig+0x398>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b05      	cmp	r3, #5
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x380>
 800118e:	4bae      	ldr	r3, [pc, #696]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001190:	6a1a      	ldr	r2, [r3, #32]
 8001192:	4bad      	ldr	r3, [pc, #692]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001194:	2104      	movs	r1, #4
 8001196:	430a      	orrs	r2, r1
 8001198:	621a      	str	r2, [r3, #32]
 800119a:	4bab      	ldr	r3, [pc, #684]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800119c:	6a1a      	ldr	r2, [r3, #32]
 800119e:	4baa      	ldr	r3, [pc, #680]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	621a      	str	r2, [r3, #32]
 80011a6:	e00b      	b.n	80011c0 <HAL_RCC_OscConfig+0x398>
 80011a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80011aa:	6a1a      	ldr	r2, [r3, #32]
 80011ac:	4ba6      	ldr	r3, [pc, #664]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	438a      	bics	r2, r1
 80011b2:	621a      	str	r2, [r3, #32]
 80011b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80011ba:	2104      	movs	r1, #4
 80011bc:	438a      	bics	r2, r1
 80011be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d014      	beq.n	80011f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fbbe 	bl	8000948 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	e009      	b.n	80011e6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fbb9 	bl	8000948 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4a9b      	ldr	r2, [pc, #620]	@ (800144c <HAL_RCC_OscConfig+0x624>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e12b      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e6:	4b98      	ldr	r3, [pc, #608]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	2202      	movs	r2, #2
 80011ec:	4013      	ands	r3, r2
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x3aa>
 80011f0:	e013      	b.n	800121a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fba9 	bl	8000948 <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fa:	e009      	b.n	8001210 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7ff fba4 	bl	8000948 <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	4a91      	ldr	r2, [pc, #580]	@ (800144c <HAL_RCC_OscConfig+0x624>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e116      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001210:	4b8d      	ldr	r3, [pc, #564]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800121a:	231f      	movs	r3, #31
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d105      	bne.n	8001230 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001224:	4b88      	ldr	r3, [pc, #544]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001226:	69da      	ldr	r2, [r3, #28]
 8001228:	4b87      	ldr	r3, [pc, #540]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800122a:	4989      	ldr	r1, [pc, #548]	@ (8001450 <HAL_RCC_OscConfig+0x628>)
 800122c:	400a      	ands	r2, r1
 800122e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2210      	movs	r2, #16
 8001236:	4013      	ands	r3, r2
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d12a      	bne.n	8001298 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001242:	4b81      	ldr	r3, [pc, #516]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001246:	4b80      	ldr	r3, [pc, #512]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001248:	2104      	movs	r1, #4
 800124a:	430a      	orrs	r2, r1
 800124c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800124e:	4b7e      	ldr	r3, [pc, #504]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001252:	4b7d      	ldr	r3, [pc, #500]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb75 	bl	8000948 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001264:	f7ff fb70 	bl	8000948 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e0e3      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001276:	4b74      	ldr	r3, [pc, #464]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d0f1      	beq.n	8001264 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001280:	4b71      	ldr	r3, [pc, #452]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001284:	22f8      	movs	r2, #248	@ 0xf8
 8001286:	4393      	bics	r3, r2
 8001288:	0019      	movs	r1, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	00da      	lsls	r2, r3, #3
 8001290:	4b6d      	ldr	r3, [pc, #436]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
 8001296:	e034      	b.n	8001302 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	3305      	adds	r3, #5
 800129e:	d111      	bne.n	80012c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012a0:	4b69      	ldr	r3, [pc, #420]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012a4:	4b68      	ldr	r3, [pc, #416]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012a6:	2104      	movs	r1, #4
 80012a8:	438a      	bics	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012ac:	4b66      	ldr	r3, [pc, #408]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b0:	22f8      	movs	r2, #248	@ 0xf8
 80012b2:	4393      	bics	r3, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	00da      	lsls	r2, r3, #3
 80012bc:	4b62      	ldr	r3, [pc, #392]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012be:	430a      	orrs	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c2:	e01e      	b.n	8001302 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012c4:	4b60      	ldr	r3, [pc, #384]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012ca:	2104      	movs	r1, #4
 80012cc:	430a      	orrs	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	438a      	bics	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fb34 	bl	8000948 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012e6:	f7ff fb2f 	bl	8000948 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0a2      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012f8:	4b53      	ldr	r3, [pc, #332]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80012fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d1f1      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <HAL_RCC_OscConfig+0x4e4>
 800130a:	e097      	b.n	800143c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800130c:	4b4e      	ldr	r3, [pc, #312]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	220c      	movs	r2, #12
 8001312:	4013      	ands	r3, r2
 8001314:	2b08      	cmp	r3, #8
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x4f2>
 8001318:	e06b      	b.n	80013f2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d14c      	bne.n	80013bc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b48      	ldr	r3, [pc, #288]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001328:	494a      	ldr	r1, [pc, #296]	@ (8001454 <HAL_RCC_OscConfig+0x62c>)
 800132a:	400a      	ands	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fb0b 	bl	8000948 <HAL_GetTick>
 8001332:	0003      	movs	r3, r0
 8001334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001338:	f7ff fb06 	bl	8000948 <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e079      	b.n	800143e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134a:	4b3f      	ldr	r3, [pc, #252]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	049b      	lsls	r3, r3, #18
 8001352:	4013      	ands	r3, r2
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001356:	4b3c      	ldr	r3, [pc, #240]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135a:	220f      	movs	r2, #15
 800135c:	4393      	bics	r3, r2
 800135e:	0019      	movs	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001364:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001366:	430a      	orrs	r2, r1
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
 800136a:	4b37      	ldr	r3, [pc, #220]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a3a      	ldr	r2, [pc, #232]	@ (8001458 <HAL_RCC_OscConfig+0x630>)
 8001370:	4013      	ands	r3, r2
 8001372:	0019      	movs	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	431a      	orrs	r2, r3
 800137e:	4b32      	ldr	r3, [pc, #200]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001384:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 800138a:	2180      	movs	r1, #128	@ 0x80
 800138c:	0449      	lsls	r1, r1, #17
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fad9 	bl	8000948 <HAL_GetTick>
 8001396:	0003      	movs	r3, r0
 8001398:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fad4 	bl	8000948 <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e047      	b.n	800143e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	2380      	movs	r3, #128	@ 0x80
 80013b4:	049b      	lsls	r3, r3, #18
 80013b6:	4013      	ands	r3, r2
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x574>
 80013ba:	e03f      	b.n	800143c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80013c2:	4924      	ldr	r1, [pc, #144]	@ (8001454 <HAL_RCC_OscConfig+0x62c>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fabe 	bl	8000948 <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff fab9 	bl	8000948 <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e02c      	b.n	800143e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e4:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	049b      	lsls	r3, r3, #18
 80013ec:	4013      	ands	r3, r2
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5aa>
 80013f0:	e024      	b.n	800143c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e01f      	b.n	800143e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_RCC_OscConfig+0x620>)
 8001406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001408:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	401a      	ands	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001416:	429a      	cmp	r2, r3
 8001418:	d10e      	bne.n	8001438 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	220f      	movs	r2, #15
 800141e:	401a      	ands	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d107      	bne.n	8001438 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	23f0      	movs	r3, #240	@ 0xf0
 800142c:	039b      	lsls	r3, r3, #14
 800142e:	401a      	ands	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	0018      	movs	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	b008      	add	sp, #32
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	40021000 	.word	0x40021000
 800144c:	00001388 	.word	0x00001388
 8001450:	efffffff 	.word	0xefffffff
 8001454:	feffffff 	.word	0xfeffffff
 8001458:	ffc2ffff 	.word	0xffc2ffff

0800145c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0b3      	b.n	80015d8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b5b      	ldr	r3, [pc, #364]	@ (80015e0 <HAL_RCC_ClockConfig+0x184>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	4013      	ands	r3, r2
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d911      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b58      	ldr	r3, [pc, #352]	@ (80015e0 <HAL_RCC_ClockConfig+0x184>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	4393      	bics	r3, r2
 8001486:	0019      	movs	r1, r3
 8001488:	4b55      	ldr	r3, [pc, #340]	@ (80015e0 <HAL_RCC_ClockConfig+0x184>)
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001490:	4b53      	ldr	r3, [pc, #332]	@ (80015e0 <HAL_RCC_ClockConfig+0x184>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2201      	movs	r2, #1
 8001496:	4013      	ands	r3, r2
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e09a      	b.n	80015d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	d015      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2204      	movs	r2, #4
 80014b2:	4013      	ands	r3, r2
 80014b4:	d006      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014b6:	4b4b      	ldr	r3, [pc, #300]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 80014bc:	21e0      	movs	r1, #224	@ 0xe0
 80014be:	00c9      	lsls	r1, r1, #3
 80014c0:	430a      	orrs	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c4:	4b47      	ldr	r3, [pc, #284]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	22f0      	movs	r2, #240	@ 0xf0
 80014ca:	4393      	bics	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	4b44      	ldr	r3, [pc, #272]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	d040      	beq.n	8001564 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b3e      	ldr	r3, [pc, #248]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	@ 0x80
 80014f0:	029b      	lsls	r3, r3, #10
 80014f2:	4013      	ands	r3, r2
 80014f4:	d114      	bne.n	8001520 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06e      	b.n	80015d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	049b      	lsls	r3, r3, #18
 800150a:	4013      	ands	r3, r2
 800150c:	d108      	bne.n	8001520 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e062      	b.n	80015d8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001512:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e05b      	b.n	80015d8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001520:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2203      	movs	r2, #3
 8001526:	4393      	bics	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001534:	f7ff fa08 	bl	8000948 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153c:	e009      	b.n	8001552 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153e:	f7ff fa03 	bl	8000948 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a27      	ldr	r2, [pc, #156]	@ (80015e8 <HAL_RCC_ClockConfig+0x18c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e042      	b.n	80015d8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	220c      	movs	r2, #12
 8001558:	401a      	ands	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	429a      	cmp	r2, r3
 8001562:	d1ec      	bne.n	800153e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001564:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <HAL_RCC_ClockConfig+0x184>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	4013      	ands	r3, r2
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d211      	bcs.n	8001596 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_RCC_ClockConfig+0x184>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2201      	movs	r2, #1
 8001578:	4393      	bics	r3, r2
 800157a:	0019      	movs	r1, r3
 800157c:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_RCC_ClockConfig+0x184>)
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_RCC_ClockConfig+0x184>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	4013      	ands	r3, r2
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e020      	b.n	80015d8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2204      	movs	r2, #4
 800159c:	4013      	ands	r3, r2
 800159e:	d009      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a11      	ldr	r2, [pc, #68]	@ (80015ec <HAL_RCC_ClockConfig+0x190>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015b4:	f000 f820 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015b8:	0001      	movs	r1, r0
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_RCC_ClockConfig+0x188>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	220f      	movs	r2, #15
 80015c2:	4013      	ands	r3, r2
 80015c4:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <HAL_RCC_ClockConfig+0x194>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	000a      	movs	r2, r1
 80015ca:	40da      	lsrs	r2, r3
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_RCC_ClockConfig+0x198>)
 80015ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff f973 	bl	80008bc <HAL_InitTick>
  
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b004      	add	sp, #16
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40022000 	.word	0x40022000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	00001388 	.word	0x00001388
 80015ec:	fffff8ff 	.word	0xfffff8ff
 80015f0:	080023ec 	.word	0x080023ec
 80015f4:	20000000 	.word	0x20000000

080015f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001612:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	220c      	movs	r2, #12
 800161c:	4013      	ands	r3, r2
 800161e:	2b04      	cmp	r3, #4
 8001620:	d002      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x30>
 8001622:	2b08      	cmp	r3, #8
 8001624:	d003      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x36>
 8001626:	e02c      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_RCC_GetSysClockFreq+0xa0>)
 800162a:	613b      	str	r3, [r7, #16]
      break;
 800162c:	e02c      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	220f      	movs	r2, #15
 8001634:	4013      	ands	r3, r2
 8001636:	4a19      	ldr	r2, [pc, #100]	@ (800169c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x9c>)
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	220f      	movs	r2, #15
 8001642:	4013      	ands	r3, r2
 8001644:	4a16      	ldr	r2, [pc, #88]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	4013      	ands	r3, r2
 8001652:	d009      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	4810      	ldr	r0, [pc, #64]	@ (8001698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001658:	f7fe fd56 	bl	8000108 <__udivsi3>
 800165c:	0003      	movs	r3, r0
 800165e:	001a      	movs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4353      	muls	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e009      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	000a      	movs	r2, r1
 800166c:	0152      	lsls	r2, r2, #5
 800166e:	1a52      	subs	r2, r2, r1
 8001670:	0193      	lsls	r3, r2, #6
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	185b      	adds	r3, r3, r1
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
      break;
 8001680:	e002      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001684:	613b      	str	r3, [r7, #16]
      break;
 8001686:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001688:	693b      	ldr	r3, [r7, #16]
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b006      	add	sp, #24
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	40021000 	.word	0x40021000
 8001698:	007a1200 	.word	0x007a1200
 800169c:	08002404 	.word	0x08002404
 80016a0:	08002414 	.word	0x08002414

080016a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a8:	4b02      	ldr	r3, [pc, #8]	@ (80016b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	20000000 	.word	0x20000000

080016b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016bc:	f7ff fff2 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80016c0:	0001      	movs	r1, r0
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	2207      	movs	r2, #7
 80016ca:	4013      	ands	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	40d9      	lsrs	r1, r3
 80016d2:	000b      	movs	r3, r1
}    
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	40021000 	.word	0x40021000
 80016e0:	080023fc 	.word	0x080023fc

080016e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e090      	b.n	800181a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	223d      	movs	r2, #61	@ 0x3d
 80016fc:	5c9b      	ldrb	r3, [r3, r2]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	223c      	movs	r2, #60	@ 0x3c
 8001708:	2100      	movs	r1, #0
 800170a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	0018      	movs	r0, r3
 8001710:	f7fe ffde 	bl	80006d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	223d      	movs	r2, #61	@ 0x3d
 8001718:	2102      	movs	r1, #2
 800171a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	493f      	ldr	r1, [pc, #252]	@ (8001824 <HAL_TIM_Encoder_Init+0x140>)
 8001728:	400a      	ands	r2, r1
 800172a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3304      	adds	r3, #4
 8001734:	0019      	movs	r1, r3
 8001736:	0010      	movs	r0, r2
 8001738:	f000 f920 	bl	800197c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	4313      	orrs	r3, r2
 800175c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <HAL_TIM_Encoder_Init+0x144>)
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	4313      	orrs	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4a2c      	ldr	r2, [pc, #176]	@ (800182c <HAL_TIM_Encoder_Init+0x148>)
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4a2b      	ldr	r2, [pc, #172]	@ (8001830 <HAL_TIM_Encoder_Init+0x14c>)
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	4313      	orrs	r3, r2
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	011a      	lsls	r2, r3, #4
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	031b      	lsls	r3, r3, #12
 80017a6:	4313      	orrs	r3, r2
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2222      	movs	r2, #34	@ 0x22
 80017b2:	4393      	bics	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2288      	movs	r2, #136	@ 0x88
 80017ba:	4393      	bics	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4313      	orrs	r3, r2
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2246      	movs	r2, #70	@ 0x46
 80017ec:	2101      	movs	r1, #1
 80017ee:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	223e      	movs	r2, #62	@ 0x3e
 80017f4:	2101      	movs	r1, #1
 80017f6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	223f      	movs	r2, #63	@ 0x3f
 80017fc:	2101      	movs	r1, #1
 80017fe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2242      	movs	r2, #66	@ 0x42
 8001804:	2101      	movs	r1, #1
 8001806:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2243      	movs	r2, #67	@ 0x43
 800180c:	2101      	movs	r1, #1
 800180e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	223d      	movs	r2, #61	@ 0x3d
 8001814:	2101      	movs	r1, #1
 8001816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b006      	add	sp, #24
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	ffffbff8 	.word	0xffffbff8
 8001828:	fffffcfc 	.word	0xfffffcfc
 800182c:	fffff3f3 	.word	0xfffff3f3
 8001830:	ffff0f0f 	.word	0xffff0f0f

08001834 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800183e:	200f      	movs	r0, #15
 8001840:	183b      	adds	r3, r7, r0
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	213e      	movs	r1, #62	@ 0x3e
 8001846:	5c52      	ldrb	r2, [r2, r1]
 8001848:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800184a:	230e      	movs	r3, #14
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	213f      	movs	r1, #63	@ 0x3f
 8001852:	5c52      	ldrb	r2, [r2, r1]
 8001854:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001856:	240d      	movs	r4, #13
 8001858:	193b      	adds	r3, r7, r4
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	2142      	movs	r1, #66	@ 0x42
 800185e:	5c52      	ldrb	r2, [r2, r1]
 8001860:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001862:	230c      	movs	r3, #12
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	2143      	movs	r1, #67	@ 0x43
 800186a:	5c52      	ldrb	r2, [r2, r1]
 800186c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d112      	bne.n	800189a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001874:	183b      	adds	r3, r7, r0
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d103      	bne.n	8001884 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800187c:	193b      	adds	r3, r7, r4
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d001      	beq.n	8001888 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e075      	b.n	8001974 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	223e      	movs	r2, #62	@ 0x3e
 800188c:	2102      	movs	r1, #2
 800188e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2242      	movs	r2, #66	@ 0x42
 8001894:	2102      	movs	r1, #2
 8001896:	5499      	strb	r1, [r3, r2]
 8001898:	e03d      	b.n	8001916 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b04      	cmp	r3, #4
 800189e:	d114      	bne.n	80018ca <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80018a0:	230e      	movs	r3, #14
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d104      	bne.n	80018b4 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80018aa:	230c      	movs	r3, #12
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d001      	beq.n	80018b8 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e05d      	b.n	8001974 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	223f      	movs	r2, #63	@ 0x3f
 80018bc:	2102      	movs	r1, #2
 80018be:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2243      	movs	r2, #67	@ 0x43
 80018c4:	2102      	movs	r1, #2
 80018c6:	5499      	strb	r1, [r3, r2]
 80018c8:	e025      	b.n	8001916 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80018ca:	230f      	movs	r3, #15
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d10e      	bne.n	80018f2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80018d4:	230e      	movs	r3, #14
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d109      	bne.n	80018f2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80018de:	230d      	movs	r3, #13
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d104      	bne.n	80018f2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80018e8:	230c      	movs	r3, #12
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e03e      	b.n	8001974 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	223e      	movs	r2, #62	@ 0x3e
 80018fa:	2102      	movs	r1, #2
 80018fc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	223f      	movs	r2, #63	@ 0x3f
 8001902:	2102      	movs	r1, #2
 8001904:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2242      	movs	r2, #66	@ 0x42
 800190a:	2102      	movs	r1, #2
 800190c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2243      	movs	r2, #67	@ 0x43
 8001912:	2102      	movs	r1, #2
 8001914:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_TIM_Encoder_Start+0xf0>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d008      	beq.n	8001934 <HAL_TIM_Encoder_Start+0x100>
 8001922:	e00f      	b.n	8001944 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	2100      	movs	r1, #0
 800192c:	0018      	movs	r0, r3
 800192e:	f000 f8a9 	bl	8001a84 <TIM_CCxChannelCmd>
      break;
 8001932:	e016      	b.n	8001962 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	2104      	movs	r1, #4
 800193c:	0018      	movs	r0, r3
 800193e:	f000 f8a1 	bl	8001a84 <TIM_CCxChannelCmd>
      break;
 8001942:	e00e      	b.n	8001962 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	2100      	movs	r1, #0
 800194c:	0018      	movs	r0, r3
 800194e:	f000 f899 	bl	8001a84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	2104      	movs	r1, #4
 800195a:	0018      	movs	r0, r3
 800195c:	f000 f892 	bl	8001a84 <TIM_CCxChannelCmd>
      break;
 8001960:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b005      	add	sp, #20
 800197a:	bd90      	pop	{r4, r7, pc}

0800197c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a36      	ldr	r2, [pc, #216]	@ (8001a68 <TIM_Base_SetConfig+0xec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d003      	beq.n	800199c <TIM_Base_SetConfig+0x20>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a35      	ldr	r2, [pc, #212]	@ (8001a6c <TIM_Base_SetConfig+0xf0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d108      	bne.n	80019ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2270      	movs	r2, #112	@ 0x70
 80019a0:	4393      	bics	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a68 <TIM_Base_SetConfig+0xec>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a6c <TIM_Base_SetConfig+0xf0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00f      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a70 <TIM_Base_SetConfig+0xf4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00b      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a74 <TIM_Base_SetConfig+0xf8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a29      	ldr	r2, [pc, #164]	@ (8001a78 <TIM_Base_SetConfig+0xfc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d003      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a28      	ldr	r2, [pc, #160]	@ (8001a7c <TIM_Base_SetConfig+0x100>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d108      	bne.n	80019f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a27      	ldr	r2, [pc, #156]	@ (8001a80 <TIM_Base_SetConfig+0x104>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	4393      	bics	r3, r2
 80019f6:	001a      	movs	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a13      	ldr	r2, [pc, #76]	@ (8001a68 <TIM_Base_SetConfig+0xec>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00b      	beq.n	8001a36 <TIM_Base_SetConfig+0xba>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <TIM_Base_SetConfig+0xf8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <TIM_Base_SetConfig+0xba>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a13      	ldr	r2, [pc, #76]	@ (8001a78 <TIM_Base_SetConfig+0xfc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d003      	beq.n	8001a36 <TIM_Base_SetConfig+0xba>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <TIM_Base_SetConfig+0x100>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d103      	bne.n	8001a3e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4393      	bics	r3, r2
 8001a58:	001a      	movs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]
  }
}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	40012c00 	.word	0x40012c00
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40002000 	.word	0x40002000
 8001a74:	40014000 	.word	0x40014000
 8001a78:	40014400 	.word	0x40014400
 8001a7c:	40014800 	.word	0x40014800
 8001a80:	fffffcff 	.word	0xfffffcff

08001a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	221f      	movs	r2, #31
 8001a94:	4013      	ands	r3, r2
 8001a96:	2201      	movs	r2, #1
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	0013      	movs	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	43d2      	mvns	r2, r2
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a1a      	ldr	r2, [r3, #32]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	211f      	movs	r1, #31
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4099      	lsls	r1, r3
 8001aba:	000b      	movs	r3, r1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	621a      	str	r2, [r3, #32]
}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b006      	add	sp, #24
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	223c      	movs	r2, #60	@ 0x3c
 8001ada:	5c9b      	ldrb	r3, [r3, r2]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e041      	b.n	8001b68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	223c      	movs	r2, #60	@ 0x3c
 8001ae8:	2101      	movs	r1, #1
 8001aea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	223d      	movs	r2, #61	@ 0x3d
 8001af0:	2102      	movs	r1, #2
 8001af2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2270      	movs	r2, #112	@ 0x70
 8001b08:	4393      	bics	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a13      	ldr	r2, [pc, #76]	@ (8001b70 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d009      	beq.n	8001b3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a10      	ldr	r2, [pc, #64]	@ (8001b78 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d10c      	bne.n	8001b56 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2280      	movs	r2, #128	@ 0x80
 8001b40:	4393      	bics	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	223d      	movs	r2, #61	@ 0x3d
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	223c      	movs	r2, #60	@ 0x3c
 8001b62:	2100      	movs	r1, #0
 8001b64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b004      	add	sp, #16
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40012c00 	.word	0x40012c00
 8001b74:	40000400 	.word	0x40000400
 8001b78:	40014000 	.word	0x40014000

08001b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e044      	b.n	8001c18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2278      	movs	r2, #120	@ 0x78
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7fe fde3 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2224      	movs	r2, #36	@ 0x24
 8001baa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	438a      	bics	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 f96c 	bl	8001ea4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 f828 	bl	8001c24 <UART_SetConfig>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e01c      	b.n	8001c18 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	490d      	ldr	r1, [pc, #52]	@ (8001c20 <HAL_UART_Init+0xa4>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2108      	movs	r1, #8
 8001bfa:	438a      	bics	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 f9fb 	bl	800200c <UART_CheckIdleState>
 8001c16:	0003      	movs	r3, r0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	fffff7ff 	.word	0xfffff7ff

08001c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c2c:	231e      	movs	r3, #30
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a8d      	ldr	r2, [pc, #564]	@ (8001e88 <UART_SetConfig+0x264>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a88      	ldr	r2, [pc, #544]	@ (8001e8c <UART_SetConfig+0x268>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a7f      	ldr	r2, [pc, #508]	@ (8001e90 <UART_SetConfig+0x26c>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a7b      	ldr	r2, [pc, #492]	@ (8001e94 <UART_SetConfig+0x270>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d127      	bne.n	8001cfa <UART_SetConfig+0xd6>
 8001caa:	4b7b      	ldr	r3, [pc, #492]	@ (8001e98 <UART_SetConfig+0x274>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	2203      	movs	r2, #3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d00d      	beq.n	8001cd2 <UART_SetConfig+0xae>
 8001cb6:	d81b      	bhi.n	8001cf0 <UART_SetConfig+0xcc>
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d014      	beq.n	8001ce6 <UART_SetConfig+0xc2>
 8001cbc:	d818      	bhi.n	8001cf0 <UART_SetConfig+0xcc>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <UART_SetConfig+0xa4>
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d00a      	beq.n	8001cdc <UART_SetConfig+0xb8>
 8001cc6:	e013      	b.n	8001cf0 <UART_SetConfig+0xcc>
 8001cc8:	231f      	movs	r3, #31
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e021      	b.n	8001d16 <UART_SetConfig+0xf2>
 8001cd2:	231f      	movs	r3, #31
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	e01c      	b.n	8001d16 <UART_SetConfig+0xf2>
 8001cdc:	231f      	movs	r3, #31
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e017      	b.n	8001d16 <UART_SetConfig+0xf2>
 8001ce6:	231f      	movs	r3, #31
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2208      	movs	r2, #8
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e012      	b.n	8001d16 <UART_SetConfig+0xf2>
 8001cf0:	231f      	movs	r3, #31
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e00d      	b.n	8001d16 <UART_SetConfig+0xf2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a67      	ldr	r2, [pc, #412]	@ (8001e9c <UART_SetConfig+0x278>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d104      	bne.n	8001d0e <UART_SetConfig+0xea>
 8001d04:	231f      	movs	r3, #31
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e003      	b.n	8001d16 <UART_SetConfig+0xf2>
 8001d0e:	231f      	movs	r3, #31
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	2210      	movs	r2, #16
 8001d14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d15c      	bne.n	8001ddc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001d22:	231f      	movs	r3, #31
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d015      	beq.n	8001d58 <UART_SetConfig+0x134>
 8001d2c:	dc18      	bgt.n	8001d60 <UART_SetConfig+0x13c>
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d00d      	beq.n	8001d4e <UART_SetConfig+0x12a>
 8001d32:	dc15      	bgt.n	8001d60 <UART_SetConfig+0x13c>
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <UART_SetConfig+0x11a>
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d005      	beq.n	8001d48 <UART_SetConfig+0x124>
 8001d3c:	e010      	b.n	8001d60 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d3e:	f7ff fcbb 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 8001d42:	0003      	movs	r3, r0
 8001d44:	61bb      	str	r3, [r7, #24]
        break;
 8001d46:	e012      	b.n	8001d6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d48:	4b55      	ldr	r3, [pc, #340]	@ (8001ea0 <UART_SetConfig+0x27c>)
 8001d4a:	61bb      	str	r3, [r7, #24]
        break;
 8001d4c:	e00f      	b.n	8001d6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d4e:	f7ff fc53 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 8001d52:	0003      	movs	r3, r0
 8001d54:	61bb      	str	r3, [r7, #24]
        break;
 8001d56:	e00a      	b.n	8001d6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	61bb      	str	r3, [r7, #24]
        break;
 8001d5e:	e006      	b.n	8001d6e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d64:	231e      	movs	r3, #30
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
        break;
 8001d6c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d100      	bne.n	8001d76 <UART_SetConfig+0x152>
 8001d74:	e07a      	b.n	8001e6c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	005a      	lsls	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	18d2      	adds	r2, r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0019      	movs	r1, r3
 8001d88:	0010      	movs	r0, r2
 8001d8a:	f7fe f9bd 	bl	8000108 <__udivsi3>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	d91c      	bls.n	8001dd2 <UART_SetConfig+0x1ae>
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d217      	bcs.n	8001dd2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	200e      	movs	r0, #14
 8001da8:	183b      	adds	r3, r7, r0
 8001daa:	210f      	movs	r1, #15
 8001dac:	438a      	bics	r2, r1
 8001dae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2207      	movs	r2, #7
 8001db8:	4013      	ands	r3, r2
 8001dba:	b299      	uxth	r1, r3
 8001dbc:	183b      	adds	r3, r7, r0
 8001dbe:	183a      	adds	r2, r7, r0
 8001dc0:	8812      	ldrh	r2, [r2, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	183a      	adds	r2, r7, r0
 8001dcc:	8812      	ldrh	r2, [r2, #0]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	e04c      	b.n	8001e6c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001dd2:	231e      	movs	r3, #30
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e047      	b.n	8001e6c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ddc:	231f      	movs	r3, #31
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d015      	beq.n	8001e12 <UART_SetConfig+0x1ee>
 8001de6:	dc18      	bgt.n	8001e1a <UART_SetConfig+0x1f6>
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d00d      	beq.n	8001e08 <UART_SetConfig+0x1e4>
 8001dec:	dc15      	bgt.n	8001e1a <UART_SetConfig+0x1f6>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <UART_SetConfig+0x1d4>
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d005      	beq.n	8001e02 <UART_SetConfig+0x1de>
 8001df6:	e010      	b.n	8001e1a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001df8:	f7ff fc5e 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	61bb      	str	r3, [r7, #24]
        break;
 8001e00:	e012      	b.n	8001e28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e02:	4b27      	ldr	r3, [pc, #156]	@ (8001ea0 <UART_SetConfig+0x27c>)
 8001e04:	61bb      	str	r3, [r7, #24]
        break;
 8001e06:	e00f      	b.n	8001e28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e08:	f7ff fbf6 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	61bb      	str	r3, [r7, #24]
        break;
 8001e10:	e00a      	b.n	8001e28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	61bb      	str	r3, [r7, #24]
        break;
 8001e18:	e006      	b.n	8001e28 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e1e:	231e      	movs	r3, #30
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
        break;
 8001e26:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01e      	beq.n	8001e6c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	085a      	lsrs	r2, r3, #1
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	18d2      	adds	r2, r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	0010      	movs	r0, r2
 8001e40:	f7fe f962 	bl	8000108 <__udivsi3>
 8001e44:	0003      	movs	r3, r0
 8001e46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	d90a      	bls.n	8001e64 <UART_SetConfig+0x240>
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	025b      	lsls	r3, r3, #9
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d205      	bcs.n	8001e64 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	e003      	b.n	8001e6c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001e64:	231e      	movs	r3, #30
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001e78:	231e      	movs	r3, #30
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b008      	add	sp, #32
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	ffff69f3 	.word	0xffff69f3
 8001e8c:	ffffcfff 	.word	0xffffcfff
 8001e90:	fffff4ff 	.word	0xfffff4ff
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40004400 	.word	0x40004400
 8001ea0:	007a1200 	.word	0x007a1200

08001ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d00b      	beq.n	8001ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe8 <UART_AdvFeatureConfig+0x144>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d00b      	beq.n	8001ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a43      	ldr	r2, [pc, #268]	@ (8001fec <UART_AdvFeatureConfig+0x148>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d00b      	beq.n	8001f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a3b      	ldr	r2, [pc, #236]	@ (8001ff0 <UART_AdvFeatureConfig+0x14c>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4a34      	ldr	r2, [pc, #208]	@ (8001ff4 <UART_AdvFeatureConfig+0x150>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	2210      	movs	r2, #16
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff8 <UART_AdvFeatureConfig+0x154>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d00b      	beq.n	8001f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4a25      	ldr	r2, [pc, #148]	@ (8001ffc <UART_AdvFeatureConfig+0x158>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	2240      	movs	r2, #64	@ 0x40
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d01d      	beq.n	8001fbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	@ (8002000 <UART_AdvFeatureConfig+0x15c>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	035b      	lsls	r3, r3, #13
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d10b      	bne.n	8001fbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a15      	ldr	r2, [pc, #84]	@ (8002004 <UART_AdvFeatureConfig+0x160>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	2280      	movs	r2, #128	@ 0x80
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <UART_AdvFeatureConfig+0x164>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
  }
}
 8001fe0:	46c0      	nop			@ (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	ffff7fff 	.word	0xffff7fff
 8001fec:	fffdffff 	.word	0xfffdffff
 8001ff0:	fffeffff 	.word	0xfffeffff
 8001ff4:	fffbffff 	.word	0xfffbffff
 8001ff8:	ffffefff 	.word	0xffffefff
 8001ffc:	ffffdfff 	.word	0xffffdfff
 8002000:	ffefffff 	.word	0xffefffff
 8002004:	ff9fffff 	.word	0xff9fffff
 8002008:	fff7ffff 	.word	0xfff7ffff

0800200c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b092      	sub	sp, #72	@ 0x48
 8002010:	af02      	add	r7, sp, #8
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2284      	movs	r2, #132	@ 0x84
 8002018:	2100      	movs	r1, #0
 800201a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800201c:	f7fe fc94 	bl	8000948 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2208      	movs	r2, #8
 800202c:	4013      	ands	r3, r2
 800202e:	2b08      	cmp	r3, #8
 8002030:	d12c      	bne.n	800208c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002034:	2280      	movs	r2, #128	@ 0x80
 8002036:	0391      	lsls	r1, r2, #14
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4a46      	ldr	r2, [pc, #280]	@ (8002154 <UART_CheckIdleState+0x148>)
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	f000 f88c 	bl	800215c <UART_WaitOnFlagUntilTimeout>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d021      	beq.n	800208c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002048:	f3ef 8310 	mrs	r3, PRIMASK
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002050:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002052:	2301      	movs	r3, #1
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002058:	f383 8810 	msr	PRIMASK, r3
}
 800205c:	46c0      	nop			@ (mov r8, r8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	438a      	bics	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002074:	f383 8810 	msr	PRIMASK, r3
}
 8002078:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2278      	movs	r2, #120	@ 0x78
 8002084:	2100      	movs	r1, #0
 8002086:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e05f      	b.n	800214c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	2b04      	cmp	r3, #4
 8002098:	d146      	bne.n	8002128 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800209a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	03d1      	lsls	r1, r2, #15
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002154 <UART_CheckIdleState+0x148>)
 80020a4:	9200      	str	r2, [sp, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f000 f858 	bl	800215c <UART_WaitOnFlagUntilTimeout>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d03b      	beq.n	8002128 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b0:	f3ef 8310 	mrs	r3, PRIMASK
 80020b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80020b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ba:	2301      	movs	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f383 8810 	msr	PRIMASK, r3
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4921      	ldr	r1, [pc, #132]	@ (8002158 <UART_CheckIdleState+0x14c>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f383 8810 	msr	PRIMASK, r3
}
 80020e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e2:	f3ef 8310 	mrs	r3, PRIMASK
 80020e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80020e8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ec:	2301      	movs	r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f383 8810 	msr	PRIMASK, r3
}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	438a      	bics	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	f383 8810 	msr	PRIMASK, r3
}
 8002112:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	2120      	movs	r1, #32
 800211a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2278      	movs	r2, #120	@ 0x78
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e011      	b.n	800214c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2280      	movs	r2, #128	@ 0x80
 8002132:	2120      	movs	r1, #32
 8002134:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2278      	movs	r2, #120	@ 0x78
 8002146:	2100      	movs	r1, #0
 8002148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b010      	add	sp, #64	@ 0x40
 8002152:	bd80      	pop	{r7, pc}
 8002154:	01ffffff 	.word	0x01ffffff
 8002158:	fffffedf 	.word	0xfffffedf

0800215c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216c:	e051      	b.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	3301      	adds	r3, #1
 8002172:	d04e      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002174:	f7fe fbe8 	bl	8000948 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	429a      	cmp	r2, r3
 8002182:	d302      	bcc.n	800218a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e051      	b.n	8002232 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	d03b      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb6>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b80      	cmp	r3, #128	@ 0x80
 800219e:	d038      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb6>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b40      	cmp	r3, #64	@ 0x40
 80021a4:	d035      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2208      	movs	r2, #8
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d111      	bne.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2208      	movs	r2, #8
 80021ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 f83c 	bl	800223c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2284      	movs	r2, #132	@ 0x84
 80021c8:	2108      	movs	r1, #8
 80021ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2278      	movs	r2, #120	@ 0x78
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e02c      	b.n	8002232 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	401a      	ands	r2, r3
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d112      	bne.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2280      	movs	r2, #128	@ 0x80
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f81f 	bl	800223c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2284      	movs	r2, #132	@ 0x84
 8002202:	2120      	movs	r1, #32
 8002204:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2278      	movs	r2, #120	@ 0x78
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e00f      	b.n	8002232 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	425a      	negs	r2, r3
 8002222:	4153      	adcs	r3, r2
 8002224:	b2db      	uxtb	r3, r3
 8002226:	001a      	movs	r2, r3
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d09e      	beq.n	800216e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08e      	sub	sp, #56	@ 0x38
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002244:	f3ef 8310 	mrs	r3, PRIMASK
 8002248:	617b      	str	r3, [r7, #20]
  return(result);
 800224a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
 800224e:	2301      	movs	r3, #1
 8002250:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f383 8810 	msr	PRIMASK, r3
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4926      	ldr	r1, [pc, #152]	@ (8002300 <UART_EndRxTransfer+0xc4>)
 8002266:	400a      	ands	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f383 8810 	msr	PRIMASK, r3
}
 8002274:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002276:	f3ef 8310 	mrs	r3, PRIMASK
 800227a:	623b      	str	r3, [r7, #32]
  return(result);
 800227c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002280:	2301      	movs	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	f383 8810 	msr	PRIMASK, r3
}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2101      	movs	r1, #1
 8002298:	438a      	bics	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a2:	f383 8810 	msr	PRIMASK, r3
}
 80022a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d118      	bne.n	80022e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b0:	f3ef 8310 	mrs	r3, PRIMASK
 80022b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80022b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022ba:	2301      	movs	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f383 8810 	msr	PRIMASK, r3
}
 80022c4:	46c0      	nop			@ (mov r8, r8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2110      	movs	r1, #16
 80022d2:	438a      	bics	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f383 8810 	msr	PRIMASK, r3
}
 80022e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	2120      	movs	r1, #32
 80022e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b00e      	add	sp, #56	@ 0x38
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	fffffedf 	.word	0xfffffedf

08002304 <memset>:
 8002304:	0003      	movs	r3, r0
 8002306:	1882      	adds	r2, r0, r2
 8002308:	4293      	cmp	r3, r2
 800230a:	d100      	bne.n	800230e <memset+0xa>
 800230c:	4770      	bx	lr
 800230e:	7019      	strb	r1, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	e7f9      	b.n	8002308 <memset+0x4>

08002314 <__libc_init_array>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	2600      	movs	r6, #0
 8002318:	4c0c      	ldr	r4, [pc, #48]	@ (800234c <__libc_init_array+0x38>)
 800231a:	4d0d      	ldr	r5, [pc, #52]	@ (8002350 <__libc_init_array+0x3c>)
 800231c:	1b64      	subs	r4, r4, r5
 800231e:	10a4      	asrs	r4, r4, #2
 8002320:	42a6      	cmp	r6, r4
 8002322:	d109      	bne.n	8002338 <__libc_init_array+0x24>
 8002324:	2600      	movs	r6, #0
 8002326:	f000 f819 	bl	800235c <_init>
 800232a:	4c0a      	ldr	r4, [pc, #40]	@ (8002354 <__libc_init_array+0x40>)
 800232c:	4d0a      	ldr	r5, [pc, #40]	@ (8002358 <__libc_init_array+0x44>)
 800232e:	1b64      	subs	r4, r4, r5
 8002330:	10a4      	asrs	r4, r4, #2
 8002332:	42a6      	cmp	r6, r4
 8002334:	d105      	bne.n	8002342 <__libc_init_array+0x2e>
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	00b3      	lsls	r3, r6, #2
 800233a:	58eb      	ldr	r3, [r5, r3]
 800233c:	4798      	blx	r3
 800233e:	3601      	adds	r6, #1
 8002340:	e7ee      	b.n	8002320 <__libc_init_array+0xc>
 8002342:	00b3      	lsls	r3, r6, #2
 8002344:	58eb      	ldr	r3, [r5, r3]
 8002346:	4798      	blx	r3
 8002348:	3601      	adds	r6, #1
 800234a:	e7f2      	b.n	8002332 <__libc_init_array+0x1e>
 800234c:	08002424 	.word	0x08002424
 8002350:	08002424 	.word	0x08002424
 8002354:	08002428 	.word	0x08002428
 8002358:	08002424 	.word	0x08002424

0800235c <_init>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr

08002368 <_fini>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	46c0      	nop			@ (mov r8, r8)
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr
