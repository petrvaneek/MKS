
cv05uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080032b4  080032b4  000042b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003538  08003538  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003538  08003538  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003538  08003538  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003538  08003538  00004538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800353c  0800353c  0000453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003540  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000068  080035a8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080035a8  000053ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081a2  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ce  00000000  00000000  0000d232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056c  00000000  00000000  0000f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001039d  00000000  00000000  0000f664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000953e  00000000  00000000  0001fa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ea4d  00000000  00000000  00028f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008798c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021cc  00000000  00000000  000879d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00089b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800329c 	.word	0x0800329c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800329c 	.word	0x0800329c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char const *buf, int n)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <_write+0x28>)
 800024c:	f001 f91a 	bl	8001484 <HAL_UART_Transmit>
	return n;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	200000c8 	.word	0x200000c8

08000260 <uart_process_command>:
static void uart_process_command(char *cmd)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	printf("prijato: '%s'\n", cmd);
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4b55      	ldr	r3, [pc, #340]	@ (80003c0 <uart_process_command+0x160>)
 800026c:	0011      	movs	r1, r2
 800026e:	0018      	movs	r0, r3
 8000270:	f002 f814 	bl	800229c <iprintf>
	char *token;
	token = strtok(cmd, " ");
 8000274:	4a53      	ldr	r2, [pc, #332]	@ (80003c4 <uart_process_command+0x164>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	0011      	movs	r1, r2
 800027a:	0018      	movs	r0, r3
 800027c:	f002 f98c 	bl	8002598 <strtok>
 8000280:	0003      	movs	r3, r0
 8000282:	60fb      	str	r3, [r7, #12]
	if (strcasecmp(token, "HELLO") == 0)
 8000284:	4a50      	ldr	r2, [pc, #320]	@ (80003c8 <uart_process_command+0x168>)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	0011      	movs	r1, r2
 800028a:	0018      	movs	r0, r3
 800028c:	f002 f96a 	bl	8002564 <strcasecmp>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d104      	bne.n	800029e <uart_process_command+0x3e>
	{
		printf("Komunikace OK\n");
 8000294:	4b4d      	ldr	r3, [pc, #308]	@ (80003cc <uart_process_command+0x16c>)
 8000296:	0018      	movs	r0, r3
 8000298:	f002 f866 	bl	8002368 <puts>
				else
				{
					printf("LED2 OFF\n");
				}
	}
}
 800029c:	e08c      	b.n	80003b8 <uart_process_command+0x158>
	else if(strcasecmp(token, "LED1") == 0)
 800029e:	4a4c      	ldr	r2, [pc, #304]	@ (80003d0 <uart_process_command+0x170>)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	0011      	movs	r1, r2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f002 f95d 	bl	8002564 <strcasecmp>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d12a      	bne.n	8000304 <uart_process_command+0xa4>
		token = strtok(NULL, " ");
 80002ae:	4b45      	ldr	r3, [pc, #276]	@ (80003c4 <uart_process_command+0x164>)
 80002b0:	0019      	movs	r1, r3
 80002b2:	2000      	movs	r0, #0
 80002b4:	f002 f970 	bl	8002598 <strtok>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 80002bc:	4a45      	ldr	r2, [pc, #276]	@ (80003d4 <uart_process_command+0x174>)
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	0011      	movs	r1, r2
 80002c2:	0018      	movs	r0, r3
 80002c4:	f002 f94e 	bl	8002564 <strcasecmp>
 80002c8:	1e03      	subs	r3, r0, #0
 80002ca:	d107      	bne.n	80002dc <uart_process_command+0x7c>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80002cc:	2390      	movs	r3, #144	@ 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2201      	movs	r2, #1
 80002d2:	2110      	movs	r1, #16
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 ffee 	bl	80012b6 <HAL_GPIO_WritePin>
 80002da:	e00e      	b.n	80002fa <uart_process_command+0x9a>
		else if (strcasecmp(token, "OFF") == 0)
 80002dc:	4a3e      	ldr	r2, [pc, #248]	@ (80003d8 <uart_process_command+0x178>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	0011      	movs	r1, r2
 80002e2:	0018      	movs	r0, r3
 80002e4:	f002 f93e 	bl	8002564 <strcasecmp>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d106      	bne.n	80002fa <uart_process_command+0x9a>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80002ec:	2390      	movs	r3, #144	@ 0x90
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	2200      	movs	r2, #0
 80002f2:	2110      	movs	r1, #16
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 ffde 	bl	80012b6 <HAL_GPIO_WritePin>
		printf("OK\n");
 80002fa:	4b38      	ldr	r3, [pc, #224]	@ (80003dc <uart_process_command+0x17c>)
 80002fc:	0018      	movs	r0, r3
 80002fe:	f002 f833 	bl	8002368 <puts>
}
 8000302:	e059      	b.n	80003b8 <uart_process_command+0x158>
	else if(strcasecmp(token, "LED2") == 0)
 8000304:	4a36      	ldr	r2, [pc, #216]	@ (80003e0 <uart_process_command+0x180>)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	0011      	movs	r1, r2
 800030a:	0018      	movs	r0, r3
 800030c:	f002 f92a 	bl	8002564 <strcasecmp>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d128      	bne.n	8000366 <uart_process_command+0x106>
		token = strtok(NULL, " ");
 8000314:	4b2b      	ldr	r3, [pc, #172]	@ (80003c4 <uart_process_command+0x164>)
 8000316:	0019      	movs	r1, r3
 8000318:	2000      	movs	r0, #0
 800031a:	f002 f93d 	bl	8002598 <strtok>
 800031e:	0003      	movs	r3, r0
 8000320:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000322:	4a2c      	ldr	r2, [pc, #176]	@ (80003d4 <uart_process_command+0x174>)
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	0011      	movs	r1, r2
 8000328:	0018      	movs	r0, r3
 800032a:	f002 f91b 	bl	8002564 <strcasecmp>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d106      	bne.n	8000340 <uart_process_command+0xe0>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000332:	4b2c      	ldr	r3, [pc, #176]	@ (80003e4 <uart_process_command+0x184>)
 8000334:	2201      	movs	r2, #1
 8000336:	2101      	movs	r1, #1
 8000338:	0018      	movs	r0, r3
 800033a:	f000 ffbc 	bl	80012b6 <HAL_GPIO_WritePin>
 800033e:	e00d      	b.n	800035c <uart_process_command+0xfc>
		else if (strcasecmp(token, "OFF") == 0)
 8000340:	4a25      	ldr	r2, [pc, #148]	@ (80003d8 <uart_process_command+0x178>)
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	0011      	movs	r1, r2
 8000346:	0018      	movs	r0, r3
 8000348:	f002 f90c 	bl	8002564 <strcasecmp>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d105      	bne.n	800035c <uart_process_command+0xfc>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000350:	4b24      	ldr	r3, [pc, #144]	@ (80003e4 <uart_process_command+0x184>)
 8000352:	2200      	movs	r2, #0
 8000354:	2101      	movs	r1, #1
 8000356:	0018      	movs	r0, r3
 8000358:	f000 ffad 	bl	80012b6 <HAL_GPIO_WritePin>
		printf("OK\n");
 800035c:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <uart_process_command+0x17c>)
 800035e:	0018      	movs	r0, r3
 8000360:	f002 f802 	bl	8002368 <puts>
}
 8000364:	e028      	b.n	80003b8 <uart_process_command+0x158>
	else if(strcasecmp(token,"STATUS")==0)
 8000366:	4a20      	ldr	r2, [pc, #128]	@ (80003e8 <uart_process_command+0x188>)
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	0011      	movs	r1, r2
 800036c:	0018      	movs	r0, r3
 800036e:	f002 f8f9 	bl	8002564 <strcasecmp>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d120      	bne.n	80003b8 <uart_process_command+0x158>
		if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin))
 8000376:	2390      	movs	r3, #144	@ 0x90
 8000378:	05db      	lsls	r3, r3, #23
 800037a:	2110      	movs	r1, #16
 800037c:	0018      	movs	r0, r3
 800037e:	f000 ff7d 	bl	800127c <HAL_GPIO_ReadPin>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d004      	beq.n	8000390 <uart_process_command+0x130>
					printf("LED1 ON\n");
 8000386:	4b19      	ldr	r3, [pc, #100]	@ (80003ec <uart_process_command+0x18c>)
 8000388:	0018      	movs	r0, r3
 800038a:	f001 ffed 	bl	8002368 <puts>
 800038e:	e003      	b.n	8000398 <uart_process_command+0x138>
					printf("LED1 OFF\n");
 8000390:	4b17      	ldr	r3, [pc, #92]	@ (80003f0 <uart_process_command+0x190>)
 8000392:	0018      	movs	r0, r3
 8000394:	f001 ffe8 	bl	8002368 <puts>
				if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin))
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <uart_process_command+0x184>)
 800039a:	2101      	movs	r1, #1
 800039c:	0018      	movs	r0, r3
 800039e:	f000 ff6d 	bl	800127c <HAL_GPIO_ReadPin>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d004      	beq.n	80003b0 <uart_process_command+0x150>
					printf("LED2 ON\n");
 80003a6:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <uart_process_command+0x194>)
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 ffdd 	bl	8002368 <puts>
}
 80003ae:	e003      	b.n	80003b8 <uart_process_command+0x158>
					printf("LED2 OFF\n");
 80003b0:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <uart_process_command+0x198>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 ffd8 	bl	8002368 <puts>
}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b004      	add	sp, #16
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	080032b4 	.word	0x080032b4
 80003c4:	080032c4 	.word	0x080032c4
 80003c8:	080032c8 	.word	0x080032c8
 80003cc:	080032d0 	.word	0x080032d0
 80003d0:	080032e0 	.word	0x080032e0
 80003d4:	080032e8 	.word	0x080032e8
 80003d8:	080032ec 	.word	0x080032ec
 80003dc:	080032f0 	.word	0x080032f0
 80003e0:	080032f4 	.word	0x080032f4
 80003e4:	48000400 	.word	0x48000400
 80003e8:	080032fc 	.word	0x080032fc
 80003ec:	08003304 	.word	0x08003304
 80003f0:	0800330c 	.word	0x0800330c
 80003f4:	08003318 	.word	0x08003318
 80003f8:	08003320 	.word	0x08003320

080003fc <uart_byte_available>:
static void uart_byte_available(uint8_t c)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	0002      	movs	r2, r0
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <uart_byte_available+0x74>)
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	2bff      	cmp	r3, #255	@ 0xff
 800040e:	d812      	bhi.n	8000436 <uart_byte_available+0x3a>
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b1f      	cmp	r3, #31
 8000416:	d90e      	bls.n	8000436 <uart_byte_available+0x3a>
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b7e      	cmp	r3, #126	@ 0x7e
 800041e:	d80a      	bhi.n	8000436 <uart_byte_available+0x3a>
 8000420:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <uart_byte_available+0x74>)
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	1c5a      	adds	r2, r3, #1
 8000426:	b291      	uxth	r1, r2
 8000428:	4a11      	ldr	r2, [pc, #68]	@ (8000470 <uart_byte_available+0x74>)
 800042a:	8011      	strh	r1, [r2, #0]
 800042c:	0019      	movs	r1, r3
 800042e:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <uart_byte_available+0x78>)
 8000430:	1dfa      	adds	r2, r7, #7
 8000432:	7812      	ldrb	r2, [r2, #0]
 8000434:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0) {
 8000436:	1dfb      	adds	r3, r7, #7
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b0a      	cmp	r3, #10
 800043c:	d003      	beq.n	8000446 <uart_byte_available+0x4a>
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b0d      	cmp	r3, #13
 8000444:	d110      	bne.n	8000468 <uart_byte_available+0x6c>
 8000446:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <uart_byte_available+0x74>)
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d00c      	beq.n	8000468 <uart_byte_available+0x6c>
		data[cnt] = '\0';
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <uart_byte_available+0x74>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	001a      	movs	r2, r3
 8000454:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <uart_byte_available+0x78>)
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 800045a:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <uart_byte_available+0x78>)
 800045c:	0018      	movs	r0, r3
 800045e:	f7ff feff 	bl	8000260 <uart_process_command>
		cnt = 0;
 8000462:	4b03      	ldr	r3, [pc, #12]	@ (8000470 <uart_byte_available+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	801a      	strh	r2, [r3, #0]
	}
}
 8000468:	46c0      	nop			@ (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b002      	add	sp, #8
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000194 	.word	0x20000194
 8000474:	20000198 	.word	0x20000198

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f000 fab3 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f000 f887 	bl	8000594 <MX_GPIO_Init>
  MX_DMA_Init();
 8000486:	f000 f867 	bl	8000558 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800048a:	f000 f835 	bl	80004f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 800048e:	4916      	ldr	r1, [pc, #88]	@ (80004e8 <main+0x70>)
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <main+0x74>)
 8000492:	2240      	movs	r2, #64	@ 0x40
 8000494:	0018      	movs	r0, r3
 8000496:	f001 f894 	bl	80015c2 <HAL_UART_Receive_DMA>
  {
	  //uint8_t c;
	  //HAL_UART_Receive(&huart2, &c, 1, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);

	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 800049a:	e019      	b.n	80004d0 <main+0x58>
	  uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <main+0x78>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	0019      	movs	r1, r3
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	4a10      	ldr	r2, [pc, #64]	@ (80004e8 <main+0x70>)
 80004a8:	5c52      	ldrb	r2, [r2, r1]
 80004aa:	701a      	strb	r2, [r3, #0]
	  if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 80004ac:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <main+0x78>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	3301      	adds	r3, #1
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	4a0e      	ldr	r2, [pc, #56]	@ (80004f0 <main+0x78>)
 80004b8:	1c19      	adds	r1, r3, #0
 80004ba:	8011      	strh	r1, [r2, #0]
 80004bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80004be:	d902      	bls.n	80004c6 <main+0x4e>
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <main+0x78>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	801a      	strh	r2, [r3, #0]
	  uart_byte_available(b); // process every received byte with the RX state machine
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	0018      	movs	r0, r3
 80004cc:	f7ff ff96 	bl	80003fc <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <main+0x78>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	0019      	movs	r1, r3
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <main+0x7c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	2240      	movs	r2, #64	@ 0x40
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	4299      	cmp	r1, r3
 80004e4:	d1da      	bne.n	800049c <main+0x24>
 80004e6:	e7f3      	b.n	80004d0 <main+0x58>
 80004e8:	20000084 	.word	0x20000084
 80004ec:	200000c8 	.word	0x200000c8
 80004f0:	200000c4 	.word	0x200000c4
 80004f4:	20000150 	.word	0x20000150

080004f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004fc:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 80004fe:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <MX_USART2_UART_Init+0x5c>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000502:	4b13      	ldr	r3, [pc, #76]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000504:	2296      	movs	r2, #150	@ 0x96
 8000506:	0212      	lsls	r2, r2, #8
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053a:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800053c:	0018      	movs	r0, r3
 800053e:	f000 ff4d 	bl	80013dc <HAL_UART_Init>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000546:	f000 f8b7 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200000c8 	.word	0x200000c8
 8000554:	40004400 	.word	0x40004400

08000558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <MX_DMA_Init+0x38>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <MX_DMA_Init+0x38>)
 8000564:	2101      	movs	r1, #1
 8000566:	430a      	orrs	r2, r1
 8000568:	615a      	str	r2, [r3, #20]
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_DMA_Init+0x38>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	2201      	movs	r2, #1
 8000570:	4013      	ands	r3, r2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	200b      	movs	r0, #11
 800057c:	f000 fb44 	bl	8000c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000580:	200b      	movs	r0, #11
 8000582:	f000 fb56 	bl	8000c32 <HAL_NVIC_EnableIRQ>

}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b08b      	sub	sp, #44	@ 0x2c
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	2414      	movs	r4, #20
 800059c:	193b      	adds	r3, r7, r4
 800059e:	0018      	movs	r0, r3
 80005a0:	2314      	movs	r3, #20
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f001 ffd5 	bl	8002554 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b40      	ldr	r3, [pc, #256]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b3f      	ldr	r3, [pc, #252]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005b0:	2180      	movs	r1, #128	@ 0x80
 80005b2:	0309      	lsls	r1, r1, #12
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b3c      	ldr	r3, [pc, #240]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	031b      	lsls	r3, r3, #12
 80005c0:	4013      	ands	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c6:	4b39      	ldr	r3, [pc, #228]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b38      	ldr	r3, [pc, #224]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	03c9      	lsls	r1, r1, #15
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b35      	ldr	r3, [pc, #212]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	@ 0x80
 80005da:	03db      	lsls	r3, r3, #15
 80005dc:	4013      	ands	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b32      	ldr	r3, [pc, #200]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <MX_GPIO_Init+0x118>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <MX_GPIO_Init+0x118>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <MX_GPIO_Init+0x118>)
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	02c9      	lsls	r1, r1, #11
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <MX_GPIO_Init+0x118>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	02db      	lsls	r3, r3, #11
 8000614:	4013      	ands	r3, r2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800061a:	2390      	movs	r3, #144	@ 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	2130      	movs	r1, #48	@ 0x30
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fe47 	bl	80012b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000628:	4b21      	ldr	r3, [pc, #132]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 800062a:	2200      	movs	r2, #0
 800062c:	2101      	movs	r1, #1
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fe41 	bl	80012b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2280      	movs	r2, #128	@ 0x80
 8000638:	0192      	lsls	r2, r2, #6
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2284      	movs	r2, #132	@ 0x84
 8000640:	0392      	lsls	r2, r2, #14
 8000642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064a:	193b      	adds	r3, r7, r4
 800064c:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <MX_GPIO_Init+0x120>)
 800064e:	0019      	movs	r1, r3
 8000650:	0010      	movs	r0, r2
 8000652:	f000 fca3 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	2230      	movs	r2, #48	@ 0x30
 800065a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2201      	movs	r2, #1
 8000660:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	193a      	adds	r2, r7, r4
 8000670:	2390      	movs	r3, #144	@ 0x90
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fc90 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800067c:	0021      	movs	r1, r4
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2201      	movs	r2, #1
 8000688:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000696:	187b      	adds	r3, r7, r1
 8000698:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 800069a:	0019      	movs	r1, r3
 800069c:	0010      	movs	r0, r2
 800069e:	f000 fc7d 	bl	8000f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b00b      	add	sp, #44	@ 0x2c
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400
 80006b4:	48000800 	.word	0x48000800

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	e7fd      	b.n	80006c0 <Error_Handler+0x8>

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <HAL_MspInit+0x44>)
 80006cc:	699a      	ldr	r2, [r3, #24]
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <HAL_MspInit+0x44>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	619a      	str	r2, [r3, #24]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <HAL_MspInit+0x44>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	2201      	movs	r2, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_MspInit+0x44>)
 80006e4:	69da      	ldr	r2, [r3, #28]
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_MspInit+0x44>)
 80006e8:	2180      	movs	r1, #128	@ 0x80
 80006ea:	0549      	lsls	r1, r1, #21
 80006ec:	430a      	orrs	r2, r1
 80006ee:	61da      	str	r2, [r3, #28]
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_MspInit+0x44>)
 80006f2:	69da      	ldr	r2, [r3, #28]
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	055b      	lsls	r3, r3, #21
 80006f8:	4013      	ands	r3, r2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b08b      	sub	sp, #44	@ 0x2c
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	2414      	movs	r4, #20
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	2314      	movs	r3, #20
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f001 ff18 	bl	8002554 <memset>
  if(huart->Instance==USART2)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <HAL_UART_MspInit+0xdc>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d158      	bne.n	80007e0 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072e:	4b2f      	ldr	r3, [pc, #188]	@ (80007ec <HAL_UART_MspInit+0xe0>)
 8000730:	69da      	ldr	r2, [r3, #28]
 8000732:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <HAL_UART_MspInit+0xe0>)
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	0289      	lsls	r1, r1, #10
 8000738:	430a      	orrs	r2, r1
 800073a:	61da      	str	r2, [r3, #28]
 800073c:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <HAL_UART_MspInit+0xe0>)
 800073e:	69da      	ldr	r2, [r3, #28]
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	029b      	lsls	r3, r3, #10
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <HAL_UART_MspInit+0xe0>)
 800074c:	695a      	ldr	r2, [r3, #20]
 800074e:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <HAL_UART_MspInit+0xe0>)
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	0289      	lsls	r1, r1, #10
 8000754:	430a      	orrs	r2, r1
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <HAL_UART_MspInit+0xe0>)
 800075a:	695a      	ldr	r2, [r3, #20]
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	029b      	lsls	r3, r3, #10
 8000760:	4013      	ands	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000766:	0021      	movs	r1, r4
 8000768:	187b      	adds	r3, r7, r1
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2202      	movs	r2, #2
 8000772:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2201      	movs	r2, #1
 8000784:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	187a      	adds	r2, r7, r1
 8000788:	2390      	movs	r3, #144	@ 0x90
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fc04 	bl	8000f9c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <HAL_UART_MspInit+0xe8>)
 8000798:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007a8:	2280      	movs	r2, #128	@ 0x80
 80007aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007ba:	2220      	movs	r2, #32
 80007bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fa50 	bl	8000c6c <HAL_DMA_Init>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80007d0:	f7ff ff72 	bl	80006b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80007da:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b00b      	add	sp, #44	@ 0x2c
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	40004400 	.word	0x40004400
 80007ec:	40021000 	.word	0x40021000
 80007f0:	20000150 	.word	0x20000150
 80007f4:	40020058 	.word	0x40020058

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f92a 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fac8 	bl	8000dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	20000150 	.word	0x20000150

08000844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  return 1;
 8000848:	2301      	movs	r3, #1
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <_kill>:

int _kill(int pid, int sig)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800085a:	f001 ff4b 	bl	80026f4 <__errno>
 800085e:	0003      	movs	r3, r0
 8000860:	2216      	movs	r2, #22
 8000862:	601a      	str	r2, [r3, #0]
  return -1;
 8000864:	2301      	movs	r3, #1
 8000866:	425b      	negs	r3, r3
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}

08000870 <_exit>:

void _exit (int status)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000878:	2301      	movs	r3, #1
 800087a:	425a      	negs	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff ffe5 	bl	8000850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	e7fd      	b.n	8000886 <_exit+0x16>

0800088a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e00a      	b.n	80008b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800089c:	e000      	b.n	80008a0 <_read+0x16>
 800089e:	bf00      	nop
 80008a0:	0001      	movs	r1, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	60ba      	str	r2, [r7, #8]
 80008a8:	b2ca      	uxtb	r2, r1
 80008aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	dbf0      	blt.n	800089c <_read+0x12>
  }

  return len;
 80008ba:	687b      	ldr	r3, [r7, #4]
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	b006      	add	sp, #24
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	425b      	negs	r3, r3
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	0192      	lsls	r2, r2, #6
 80008e8:	605a      	str	r2, [r3, #4]
  return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_isatty>:

int _isatty(int file)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008fc:	2301      	movs	r3, #1
}
 80008fe:	0018      	movs	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}

08000906 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f001 fed2 	bl	80026f4 <__errno>
 8000950:	0003      	movs	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	18d2      	adds	r2, r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <_sbrk+0x64>)
 800096c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b006      	add	sp, #24
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20002000 	.word	0x20002000
 800097c:	00000400 	.word	0x00000400
 8000980:	20000298 	.word	0x20000298
 8000984:	200003f0 	.word	0x200003f0

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	@ (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000998:	f7ff fff6 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	@ (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	@ (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c2:	f001 fe9d 	bl	8002700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fd57 	bl	8000478 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009d8:	08003540 	.word	0x08003540
  ldr r2, =_sbss
 80009dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009e0:	200003ec 	.word	0x200003ec

080009e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_IRQHandler>
	...

080009e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <HAL_Init+0x24>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_Init+0x24>)
 80009f2:	2110      	movs	r1, #16
 80009f4:	430a      	orrs	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f809 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fe:	f7ff fe61 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_InitTick+0x5c>)
 8000a1a:	681c      	ldr	r4, [r3, #0]
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <HAL_InitTick+0x60>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	0019      	movs	r1, r3
 8000a22:	23fa      	movs	r3, #250	@ 0xfa
 8000a24:	0098      	lsls	r0, r3, #2
 8000a26:	f7ff fb79 	bl	800011c <__udivsi3>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	0020      	movs	r0, r4
 8000a30:	f7ff fb74 	bl	800011c <__udivsi3>
 8000a34:	0003      	movs	r3, r0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 f90b 	bl	8000c52 <HAL_SYSTICK_Config>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e00f      	b.n	8000a64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d80b      	bhi.n	8000a62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	2200      	movs	r2, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 f8d8 	bl	8000c08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_InitTick+0x64>)
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b003      	add	sp, #12
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	001a      	movs	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <HAL_IncTick+0x20>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	18d2      	adds	r2, r2, r3
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <HAL_IncTick+0x20>)
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	20000008 	.word	0x20000008
 8000a98:	2000029c 	.word	0x2000029c

08000a9c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	@ (8000aac <HAL_GetTick+0x10>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	2000029c 	.word	0x2000029c

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ac2:	d809      	bhi.n	8000ad8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	231f      	movs	r3, #31
 8000acc:	401a      	ands	r2, r3
 8000ace:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__NVIC_EnableIRQ+0x30>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	000a      	movs	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]
  }
}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	0002      	movs	r2, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000af8:	d828      	bhi.n	8000b4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afa:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb8 <__NVIC_SetPriority+0xd4>)
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	33c0      	adds	r3, #192	@ 0xc0
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	589b      	ldr	r3, [r3, r2]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	@ 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	@ 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	481f      	ldr	r0, [pc, #124]	@ (8000bb8 <__NVIC_SetPriority+0xd4>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	430a      	orrs	r2, r1
 8000b44:	33c0      	adds	r3, #192	@ 0xc0
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b4a:	e031      	b.n	8000bb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <__NVIC_SetPriority+0xd8>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0019      	movs	r1, r3
 8000b54:	230f      	movs	r3, #15
 8000b56:	400b      	ands	r3, r1
 8000b58:	3b08      	subs	r3, #8
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3306      	adds	r3, #6
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	18d3      	adds	r3, r2, r3
 8000b62:	3304      	adds	r3, #4
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1dfa      	adds	r2, r7, #7
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	400a      	ands	r2, r1
 8000b70:	00d2      	lsls	r2, r2, #3
 8000b72:	21ff      	movs	r1, #255	@ 0xff
 8000b74:	4091      	lsls	r1, r2
 8000b76:	000a      	movs	r2, r1
 8000b78:	43d2      	mvns	r2, r2
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	019b      	lsls	r3, r3, #6
 8000b82:	22ff      	movs	r2, #255	@ 0xff
 8000b84:	401a      	ands	r2, r3
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	4003      	ands	r3, r0
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b94:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <__NVIC_SetPriority+0xd8>)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	001c      	movs	r4, r3
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	4023      	ands	r3, r4
 8000ba0:	3b08      	subs	r3, #8
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	3306      	adds	r3, #6
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	18c3      	adds	r3, r0, r3
 8000bac:	3304      	adds	r3, #4
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b003      	add	sp, #12
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	1e5a      	subs	r2, r3, #1
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	045b      	lsls	r3, r3, #17
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d301      	bcc.n	8000bd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e010      	b.n	8000bfa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <SysTick_Config+0x44>)
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be0:	2301      	movs	r3, #1
 8000be2:	425b      	negs	r3, r3
 8000be4:	2103      	movs	r1, #3
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff ff7c 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <SysTick_Config+0x44>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <SysTick_Config+0x44>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	210f      	movs	r1, #15
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	1c02      	adds	r2, r0, #0
 8000c18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b004      	add	sp, #16
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	0002      	movs	r2, r0
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff ff33 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ffaf 	bl	8000bc0 <SysTick_Config>
 8000c62:	0003      	movs	r3, r0
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e036      	b.n	8000cf0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2221      	movs	r2, #33	@ 0x21
 8000c86:	2102      	movs	r1, #2
 8000c88:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <HAL_DMA_Init+0x8c>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 f946 	bl	8000f64 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2221      	movs	r2, #33	@ 0x21
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2220      	movs	r2, #32
 8000cea:	2100      	movs	r1, #0
 8000cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b004      	add	sp, #16
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	ffffc00f 	.word	0xffffc00f

08000cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d0a:	2317      	movs	r3, #23
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2220      	movs	r2, #32
 8000d16:	5c9b      	ldrb	r3, [r3, r2]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_DMA_Start_IT+0x24>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e04f      	b.n	8000dc0 <HAL_DMA_Start_IT+0xc4>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2220      	movs	r2, #32
 8000d24:	2101      	movs	r1, #1
 8000d26:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2221      	movs	r2, #33	@ 0x21
 8000d2c:	5c9b      	ldrb	r3, [r3, r2]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d13a      	bne.n	8000daa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2221      	movs	r2, #33	@ 0x21
 8000d38:	2102      	movs	r1, #2
 8000d3a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	438a      	bics	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f000 f8d7 	bl	8000f0c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d008      	beq.n	8000d78 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	210e      	movs	r1, #14
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e00f      	b.n	8000d98 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	210a      	movs	r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2104      	movs	r1, #4
 8000d94:	438a      	bics	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2101      	movs	r1, #1
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	e007      	b.n	8000dba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2220      	movs	r2, #32
 8000dae:	2100      	movs	r1, #0
 8000db0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000db2:	2317      	movs	r3, #23
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2202      	movs	r2, #2
 8000db8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000dba:	2317      	movs	r3, #23
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	781b      	ldrb	r3, [r3, #0]
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b006      	add	sp, #24
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	2204      	movs	r2, #4
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4013      	ands	r3, r2
 8000dee:	d024      	beq.n	8000e3a <HAL_DMA_IRQHandler+0x72>
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2204      	movs	r2, #4
 8000df4:	4013      	ands	r3, r2
 8000df6:	d020      	beq.n	8000e3a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2220      	movs	r2, #32
 8000e00:	4013      	ands	r3, r2
 8000e02:	d107      	bne.n	8000e14 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2104      	movs	r1, #4
 8000e10:	438a      	bics	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4091      	lsls	r1, r2
 8000e20:	000a      	movs	r2, r1
 8000e22:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d100      	bne.n	8000e2e <HAL_DMA_IRQHandler+0x66>
 8000e2c:	e06a      	b.n	8000f04 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	0010      	movs	r0, r2
 8000e36:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000e38:	e064      	b.n	8000f04 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	2202      	movs	r2, #2
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4013      	ands	r3, r2
 8000e48:	d02b      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0xda>
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d027      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d10b      	bne.n	8000e76 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	210a      	movs	r1, #10
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2221      	movs	r2, #33	@ 0x21
 8000e72:	2101      	movs	r1, #1
 8000e74:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2220      	movs	r2, #32
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d036      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	0010      	movs	r0, r2
 8000e9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000ea0:	e030      	b.n	8000f04 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	0013      	movs	r3, r2
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d028      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13c>
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d024      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	210e      	movs	r1, #14
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2221      	movs	r2, #33	@ 0x21
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2220      	movs	r2, #32
 8000eec:	2100      	movs	r1, #0
 8000eee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	0010      	movs	r0, r2
 8000f00:	4798      	blx	r3
    }
  }
}
 8000f02:	e7ff      	b.n	8000f04 <HAL_DMA_IRQHandler+0x13c>
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b004      	add	sp, #16
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f22:	2101      	movs	r1, #1
 8000f24:	4091      	lsls	r1, r2
 8000f26:	000a      	movs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d108      	bne.n	8000f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f4a:	e007      	b.n	8000f5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	60da      	str	r2, [r3, #12]
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b004      	add	sp, #16
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <DMA_CalcBaseAndBitshift+0x30>)
 8000f72:	4694      	mov	ip, r2
 8000f74:	4463      	add	r3, ip
 8000f76:	2114      	movs	r1, #20
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff f8cf 	bl	800011c <__udivsi3>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	009a      	lsls	r2, r3, #2
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a03      	ldr	r2, [pc, #12]	@ (8000f98 <DMA_CalcBaseAndBitshift+0x34>)
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	bffdfff8 	.word	0xbffdfff8
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	e14f      	b.n	800124c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <HAL_GPIO_Init+0x28>
 8000fc2:	e140      	b.n	8001246 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	0013      	movs	r3, r2
 8000fec:	43da      	mvns	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	2201      	movs	r2, #1
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2203      	movs	r2, #3
 8001044:	4013      	ands	r3, r2
 8001046:	2b03      	cmp	r3, #3
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	4013      	ands	r3, r2
 8001082:	2b02      	cmp	r3, #2
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	58d3      	ldr	r3, [r2, r3]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2207      	movs	r2, #7
 8001098:	4013      	ands	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2107      	movs	r1, #7
 80010b2:	400b      	ands	r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	6939      	ldr	r1, [r7, #16]
 80010cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	401a      	ands	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	23c0      	movs	r3, #192	@ 0xc0
 8001108:	029b      	lsls	r3, r3, #10
 800110a:	4013      	ands	r3, r2
 800110c:	d100      	bne.n	8001110 <HAL_GPIO_Init+0x174>
 800110e:	e09a      	b.n	8001246 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	4b54      	ldr	r3, [pc, #336]	@ (8001264 <HAL_GPIO_Init+0x2c8>)
 8001112:	699a      	ldr	r2, [r3, #24]
 8001114:	4b53      	ldr	r3, [pc, #332]	@ (8001264 <HAL_GPIO_Init+0x2c8>)
 8001116:	2101      	movs	r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	619a      	str	r2, [r3, #24]
 800111c:	4b51      	ldr	r3, [pc, #324]	@ (8001264 <HAL_GPIO_Init+0x2c8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	2201      	movs	r2, #1
 8001122:	4013      	ands	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001128:	4a4f      	ldr	r2, [pc, #316]	@ (8001268 <HAL_GPIO_Init+0x2cc>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	589b      	ldr	r3, [r3, r2]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2203      	movs	r2, #3
 800113a:	4013      	ands	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	2390      	movs	r3, #144	@ 0x90
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	429a      	cmp	r2, r3
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x1e2>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a44      	ldr	r2, [pc, #272]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x1de>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a43      	ldr	r2, [pc, #268]	@ (8001270 <HAL_GPIO_Init+0x2d4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x1da>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a42      	ldr	r2, [pc, #264]	@ (8001274 <HAL_GPIO_Init+0x2d8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x1d6>
 800116e:	2303      	movs	r3, #3
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x1e4>
 8001172:	2305      	movs	r3, #5
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x1e4>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x1e4>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x1e4>
 800117e:	2300      	movs	r3, #0
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	2103      	movs	r1, #3
 8001184:	400a      	ands	r2, r1
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	@ (8001268 <HAL_GPIO_Init+0x2cc>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b36      	ldr	r3, [pc, #216]	@ (8001278 <HAL_GPIO_Init+0x2dc>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	035b      	lsls	r3, r3, #13
 80011b6:	4013      	ands	r3, r2
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001278 <HAL_GPIO_Init+0x2dc>)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <HAL_GPIO_Init+0x2dc>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43da      	mvns	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	039b      	lsls	r3, r3, #14
 80011e0:	4013      	ands	r3, r2
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <HAL_GPIO_Init+0x2dc>)
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <HAL_GPIO_Init+0x2dc>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	4013      	ands	r3, r2
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <HAL_GPIO_Init+0x2dc>)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <HAL_GPIO_Init+0x2dc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43da      	mvns	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	4013      	ands	r3, r2
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <HAL_GPIO_Init+0x2dc>)
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	40da      	lsrs	r2, r3
 8001254:	1e13      	subs	r3, r2, #0
 8001256:	d000      	beq.n	800125a <HAL_GPIO_Init+0x2be>
 8001258:	e6a8      	b.n	8000fac <HAL_GPIO_Init+0x10>
  } 
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b006      	add	sp, #24
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000
 800126c:	48000400 	.word	0x48000400
 8001270:	48000800 	.word	0x48000800
 8001274:	48000c00 	.word	0x48000c00
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	000a      	movs	r2, r1
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	1cba      	adds	r2, r7, #2
 8001290:	8812      	ldrh	r2, [r2, #0]
 8001292:	4013      	ands	r3, r2
 8001294:	d004      	beq.n	80012a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001296:	230f      	movs	r3, #15
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e003      	b.n	80012a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012a0:	230f      	movs	r3, #15
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	781b      	ldrb	r3, [r3, #0]
  }
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	0008      	movs	r0, r1
 80012c0:	0011      	movs	r1, r2
 80012c2:	1cbb      	adds	r3, r7, #2
 80012c4:	1c02      	adds	r2, r0, #0
 80012c6:	801a      	strh	r2, [r3, #0]
 80012c8:	1c7b      	adds	r3, r7, #1
 80012ca:	1c0a      	adds	r2, r1, #0
 80012cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ce:	1c7b      	adds	r3, r7, #1
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	881a      	ldrh	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012de:	e003      	b.n	80012e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	881a      	ldrh	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_RCC_GetSysClockFreq+0x9c>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	220c      	movs	r2, #12
 8001314:	4013      	ands	r3, r2
 8001316:	2b04      	cmp	r3, #4
 8001318:	d002      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x30>
 800131a:	2b08      	cmp	r3, #8
 800131c:	d003      	beq.n	8001326 <HAL_RCC_GetSysClockFreq+0x36>
 800131e:	e02c      	b.n	800137a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001322:	613b      	str	r3, [r7, #16]
      break;
 8001324:	e02c      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	220f      	movs	r2, #15
 800132c:	4013      	ands	r3, r2
 800132e:	4a19      	ldr	r2, [pc, #100]	@ (8001394 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001338:	220f      	movs	r2, #15
 800133a:	4013      	ands	r3, r2
 800133c:	4a16      	ldr	r2, [pc, #88]	@ (8001398 <HAL_RCC_GetSysClockFreq+0xa8>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	4013      	ands	r3, r2
 800134a:	d009      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001350:	f7fe fee4 	bl	800011c <__udivsi3>
 8001354:	0003      	movs	r3, r0
 8001356:	001a      	movs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4353      	muls	r3, r2
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e009      	b.n	8001374 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	000a      	movs	r2, r1
 8001364:	0152      	lsls	r2, r2, #5
 8001366:	1a52      	subs	r2, r2, r1
 8001368:	0193      	lsls	r3, r2, #6
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	185b      	adds	r3, r3, r1
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
      break;
 8001378:	e002      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800137a:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <HAL_RCC_GetSysClockFreq+0xa0>)
 800137c:	613b      	str	r3, [r7, #16]
      break;
 800137e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001380:	693b      	ldr	r3, [r7, #16]
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b006      	add	sp, #24
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	40021000 	.word	0x40021000
 8001390:	007a1200 	.word	0x007a1200
 8001394:	08003334 	.word	0x08003334
 8001398:	08003344 	.word	0x08003344

0800139c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a0:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <HAL_RCC_GetHCLKFreq+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	20000000 	.word	0x20000000

080013b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013b4:	f7ff fff2 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013b8:	0001      	movs	r1, r0
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	2207      	movs	r2, #7
 80013c2:	4013      	ands	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80013c6:	5cd3      	ldrb	r3, [r2, r3]
 80013c8:	40d9      	lsrs	r1, r3
 80013ca:	000b      	movs	r3, r1
}    
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	40021000 	.word	0x40021000
 80013d8:	0800332c 	.word	0x0800332c

080013dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e044      	b.n	8001478 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2278      	movs	r2, #120	@ 0x78
 80013fa:	2100      	movs	r1, #0
 80013fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff f983 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2224      	movs	r2, #36	@ 0x24
 800140a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	0018      	movs	r0, r3
 8001428:	f000 fa86 	bl	8001938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	0018      	movs	r0, r3
 8001430:	f000 f942 	bl	80016b8 <UART_SetConfig>
 8001434:	0003      	movs	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e01c      	b.n	8001478 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	490d      	ldr	r1, [pc, #52]	@ (8001480 <HAL_UART_Init+0xa4>)
 800144a:	400a      	ands	r2, r1
 800144c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2108      	movs	r1, #8
 800145a:	438a      	bics	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	0018      	movs	r0, r3
 8001472:	f000 fb15 	bl	8001aa0 <UART_CheckIdleState>
 8001476:	0003      	movs	r3, r0
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}
 8001480:	fffff7ff 	.word	0xfffff7ff

08001484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	1dbb      	adds	r3, r7, #6
 8001492:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001498:	2b20      	cmp	r3, #32
 800149a:	d000      	beq.n	800149e <HAL_UART_Transmit+0x1a>
 800149c:	e08c      	b.n	80015b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_UART_Transmit+0x28>
 80014a4:	1dbb      	adds	r3, r7, #6
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e084      	b.n	80015ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	015b      	lsls	r3, r3, #5
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d109      	bne.n	80014d0 <HAL_UART_Transmit+0x4c>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	d001      	beq.n	80014d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e074      	b.n	80015ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2284      	movs	r2, #132	@ 0x84
 80014d4:	2100      	movs	r1, #0
 80014d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2221      	movs	r2, #33	@ 0x21
 80014dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014de:	f7ff fadd 	bl	8000a9c <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1dba      	adds	r2, r7, #6
 80014ea:	2150      	movs	r1, #80	@ 0x50
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1dba      	adds	r2, r7, #6
 80014f4:	2152      	movs	r1, #82	@ 0x52
 80014f6:	8812      	ldrh	r2, [r2, #0]
 80014f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	015b      	lsls	r3, r3, #5
 8001502:	429a      	cmp	r2, r3
 8001504:	d108      	bne.n	8001518 <HAL_UART_Transmit+0x94>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d104      	bne.n	8001518 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	e003      	b.n	8001520 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001520:	e02f      	b.n	8001582 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	0013      	movs	r3, r2
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	@ 0x80
 8001530:	f000 fb5e 	bl	8001bf0 <UART_WaitOnFlagUntilTimeout>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d004      	beq.n	8001542 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2220      	movs	r2, #32
 800153c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e03b      	b.n	80015ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10b      	bne.n	8001560 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	881a      	ldrh	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	05d2      	lsls	r2, r2, #23
 8001552:	0dd2      	lsrs	r2, r2, #23
 8001554:	b292      	uxth	r2, r2
 8001556:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	3302      	adds	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	e007      	b.n	8001570 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2252      	movs	r2, #82	@ 0x52
 8001574:	5a9b      	ldrh	r3, [r3, r2]
 8001576:	b29b      	uxth	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b299      	uxth	r1, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2252      	movs	r2, #82	@ 0x52
 8001580:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2252      	movs	r2, #82	@ 0x52
 8001586:	5a9b      	ldrh	r3, [r3, r2]
 8001588:	b29b      	uxth	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1c9      	bne.n	8001522 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	0013      	movs	r3, r2
 8001598:	2200      	movs	r2, #0
 800159a:	2140      	movs	r1, #64	@ 0x40
 800159c:	f000 fb28 	bl	8001bf0 <UART_WaitOnFlagUntilTimeout>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d004      	beq.n	80015ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2220      	movs	r2, #32
 80015a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e005      	b.n	80015ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2220      	movs	r2, #32
 80015b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80015b8:	2302      	movs	r3, #2
  }
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b008      	add	sp, #32
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b088      	sub	sp, #32
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2280      	movs	r2, #128	@ 0x80
 80015d4:	589b      	ldr	r3, [r3, r2]
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d145      	bne.n	8001666 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_UART_Receive_DMA+0x26>
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e03d      	b.n	8001668 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	015b      	lsls	r3, r3, #5
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d109      	bne.n	800160c <HAL_UART_Receive_DMA+0x4a>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2201      	movs	r2, #1
 8001604:	4013      	ands	r3, r2
 8001606:	d001      	beq.n	800160c <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e02d      	b.n	8001668 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	4013      	ands	r3, r2
 800161e:	d019      	beq.n	8001654 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001620:	f3ef 8310 	mrs	r3, PRIMASK
 8001624:	613b      	str	r3, [r7, #16]
  return(result);
 8001626:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	2301      	movs	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f383 8810 	msr	PRIMASK, r3
}
 8001634:	46c0      	nop			@ (mov r8, r8)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2180      	movs	r1, #128	@ 0x80
 8001642:	04c9      	lsls	r1, r1, #19
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f383 8810 	msr	PRIMASK, r3
}
 8001652:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001654:	1dbb      	adds	r3, r7, #6
 8001656:	881a      	ldrh	r2, [r3, #0]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	0018      	movs	r0, r3
 800165e:	f000 fb37 	bl	8001cd0 <UART_Start_Receive_DMA>
 8001662:	0003      	movs	r3, r0
 8001664:	e000      	b.n	8001668 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001666:	2302      	movs	r3, #2
  }
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b008      	add	sp, #32
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001678:	46c0      	nop			@ (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001688:	46c0      	nop			@ (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	000a      	movs	r2, r1
 80016aa:	1cbb      	adds	r3, r7, #2
 80016ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b002      	add	sp, #8
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80016c0:	231e      	movs	r3, #30
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	4313      	orrs	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a8d      	ldr	r2, [pc, #564]	@ (800191c <UART_SetConfig+0x264>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a88      	ldr	r2, [pc, #544]	@ (8001920 <UART_SetConfig+0x268>)
 80016fe:	4013      	ands	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4313      	orrs	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a7f      	ldr	r2, [pc, #508]	@ (8001924 <UART_SetConfig+0x26c>)
 8001726:	4013      	ands	r3, r2
 8001728:	0019      	movs	r1, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a7b      	ldr	r2, [pc, #492]	@ (8001928 <UART_SetConfig+0x270>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d127      	bne.n	800178e <UART_SetConfig+0xd6>
 800173e:	4b7b      	ldr	r3, [pc, #492]	@ (800192c <UART_SetConfig+0x274>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	2203      	movs	r2, #3
 8001744:	4013      	ands	r3, r2
 8001746:	2b03      	cmp	r3, #3
 8001748:	d00d      	beq.n	8001766 <UART_SetConfig+0xae>
 800174a:	d81b      	bhi.n	8001784 <UART_SetConfig+0xcc>
 800174c:	2b02      	cmp	r3, #2
 800174e:	d014      	beq.n	800177a <UART_SetConfig+0xc2>
 8001750:	d818      	bhi.n	8001784 <UART_SetConfig+0xcc>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <UART_SetConfig+0xa4>
 8001756:	2b01      	cmp	r3, #1
 8001758:	d00a      	beq.n	8001770 <UART_SetConfig+0xb8>
 800175a:	e013      	b.n	8001784 <UART_SetConfig+0xcc>
 800175c:	231f      	movs	r3, #31
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e021      	b.n	80017aa <UART_SetConfig+0xf2>
 8001766:	231f      	movs	r3, #31
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	2202      	movs	r2, #2
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	e01c      	b.n	80017aa <UART_SetConfig+0xf2>
 8001770:	231f      	movs	r3, #31
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	2204      	movs	r2, #4
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e017      	b.n	80017aa <UART_SetConfig+0xf2>
 800177a:	231f      	movs	r3, #31
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2208      	movs	r2, #8
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e012      	b.n	80017aa <UART_SetConfig+0xf2>
 8001784:	231f      	movs	r3, #31
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2210      	movs	r2, #16
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e00d      	b.n	80017aa <UART_SetConfig+0xf2>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a67      	ldr	r2, [pc, #412]	@ (8001930 <UART_SetConfig+0x278>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d104      	bne.n	80017a2 <UART_SetConfig+0xea>
 8001798:	231f      	movs	r3, #31
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e003      	b.n	80017aa <UART_SetConfig+0xf2>
 80017a2:	231f      	movs	r3, #31
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	2210      	movs	r2, #16
 80017a8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d15c      	bne.n	8001870 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80017b6:	231f      	movs	r3, #31
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d015      	beq.n	80017ec <UART_SetConfig+0x134>
 80017c0:	dc18      	bgt.n	80017f4 <UART_SetConfig+0x13c>
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d00d      	beq.n	80017e2 <UART_SetConfig+0x12a>
 80017c6:	dc15      	bgt.n	80017f4 <UART_SetConfig+0x13c>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <UART_SetConfig+0x11a>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d005      	beq.n	80017dc <UART_SetConfig+0x124>
 80017d0:	e010      	b.n	80017f4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017d2:	f7ff fded 	bl	80013b0 <HAL_RCC_GetPCLK1Freq>
 80017d6:	0003      	movs	r3, r0
 80017d8:	61bb      	str	r3, [r7, #24]
        break;
 80017da:	e012      	b.n	8001802 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80017dc:	4b55      	ldr	r3, [pc, #340]	@ (8001934 <UART_SetConfig+0x27c>)
 80017de:	61bb      	str	r3, [r7, #24]
        break;
 80017e0:	e00f      	b.n	8001802 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017e2:	f7ff fd85 	bl	80012f0 <HAL_RCC_GetSysClockFreq>
 80017e6:	0003      	movs	r3, r0
 80017e8:	61bb      	str	r3, [r7, #24]
        break;
 80017ea:	e00a      	b.n	8001802 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	61bb      	str	r3, [r7, #24]
        break;
 80017f2:	e006      	b.n	8001802 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80017f8:	231e      	movs	r3, #30
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
        break;
 8001800:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d100      	bne.n	800180a <UART_SetConfig+0x152>
 8001808:	e07a      	b.n	8001900 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	005a      	lsls	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	18d2      	adds	r2, r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	0019      	movs	r1, r3
 800181c:	0010      	movs	r0, r2
 800181e:	f7fe fc7d 	bl	800011c <__udivsi3>
 8001822:	0003      	movs	r3, r0
 8001824:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d91c      	bls.n	8001866 <UART_SetConfig+0x1ae>
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	025b      	lsls	r3, r3, #9
 8001832:	429a      	cmp	r2, r3
 8001834:	d217      	bcs.n	8001866 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	b29a      	uxth	r2, r3
 800183a:	200e      	movs	r0, #14
 800183c:	183b      	adds	r3, r7, r0
 800183e:	210f      	movs	r1, #15
 8001840:	438a      	bics	r2, r1
 8001842:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	2207      	movs	r2, #7
 800184c:	4013      	ands	r3, r2
 800184e:	b299      	uxth	r1, r3
 8001850:	183b      	adds	r3, r7, r0
 8001852:	183a      	adds	r2, r7, r0
 8001854:	8812      	ldrh	r2, [r2, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	183a      	adds	r2, r7, r0
 8001860:	8812      	ldrh	r2, [r2, #0]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	e04c      	b.n	8001900 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001866:	231e      	movs	r3, #30
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	e047      	b.n	8001900 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001870:	231f      	movs	r3, #31
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b08      	cmp	r3, #8
 8001878:	d015      	beq.n	80018a6 <UART_SetConfig+0x1ee>
 800187a:	dc18      	bgt.n	80018ae <UART_SetConfig+0x1f6>
 800187c:	2b04      	cmp	r3, #4
 800187e:	d00d      	beq.n	800189c <UART_SetConfig+0x1e4>
 8001880:	dc15      	bgt.n	80018ae <UART_SetConfig+0x1f6>
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <UART_SetConfig+0x1d4>
 8001886:	2b02      	cmp	r3, #2
 8001888:	d005      	beq.n	8001896 <UART_SetConfig+0x1de>
 800188a:	e010      	b.n	80018ae <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800188c:	f7ff fd90 	bl	80013b0 <HAL_RCC_GetPCLK1Freq>
 8001890:	0003      	movs	r3, r0
 8001892:	61bb      	str	r3, [r7, #24]
        break;
 8001894:	e012      	b.n	80018bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001896:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <UART_SetConfig+0x27c>)
 8001898:	61bb      	str	r3, [r7, #24]
        break;
 800189a:	e00f      	b.n	80018bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800189c:	f7ff fd28 	bl	80012f0 <HAL_RCC_GetSysClockFreq>
 80018a0:	0003      	movs	r3, r0
 80018a2:	61bb      	str	r3, [r7, #24]
        break;
 80018a4:	e00a      	b.n	80018bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	61bb      	str	r3, [r7, #24]
        break;
 80018ac:	e006      	b.n	80018bc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80018b2:	231e      	movs	r3, #30
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
        break;
 80018ba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d01e      	beq.n	8001900 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	085a      	lsrs	r2, r3, #1
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	18d2      	adds	r2, r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	0019      	movs	r1, r3
 80018d2:	0010      	movs	r0, r2
 80018d4:	f7fe fc22 	bl	800011c <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	d90a      	bls.n	80018f8 <UART_SetConfig+0x240>
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	025b      	lsls	r3, r3, #9
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d205      	bcs.n	80018f8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	e003      	b.n	8001900 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80018f8:	231e      	movs	r3, #30
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800190c:	231e      	movs	r3, #30
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	781b      	ldrb	r3, [r3, #0]
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b008      	add	sp, #32
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	ffff69f3 	.word	0xffff69f3
 8001920:	ffffcfff 	.word	0xffffcfff
 8001924:	fffff4ff 	.word	0xfffff4ff
 8001928:	40013800 	.word	0x40013800
 800192c:	40021000 	.word	0x40021000
 8001930:	40004400 	.word	0x40004400
 8001934:	007a1200 	.word	0x007a1200

08001938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	2208      	movs	r2, #8
 8001946:	4013      	ands	r3, r2
 8001948:	d00b      	beq.n	8001962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a4a      	ldr	r2, [pc, #296]	@ (8001a7c <UART_AdvFeatureConfig+0x144>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	2201      	movs	r2, #1
 8001968:	4013      	ands	r3, r2
 800196a:	d00b      	beq.n	8001984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a43      	ldr	r2, [pc, #268]	@ (8001a80 <UART_AdvFeatureConfig+0x148>)
 8001974:	4013      	ands	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	2202      	movs	r2, #2
 800198a:	4013      	ands	r3, r2
 800198c:	d00b      	beq.n	80019a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a3b      	ldr	r2, [pc, #236]	@ (8001a84 <UART_AdvFeatureConfig+0x14c>)
 8001996:	4013      	ands	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	2204      	movs	r2, #4
 80019ac:	4013      	ands	r3, r2
 80019ae:	d00b      	beq.n	80019c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a34      	ldr	r2, [pc, #208]	@ (8001a88 <UART_AdvFeatureConfig+0x150>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	2210      	movs	r2, #16
 80019ce:	4013      	ands	r3, r2
 80019d0:	d00b      	beq.n	80019ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a8c <UART_AdvFeatureConfig+0x154>)
 80019da:	4013      	ands	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	2220      	movs	r2, #32
 80019f0:	4013      	ands	r3, r2
 80019f2:	d00b      	beq.n	8001a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	4a25      	ldr	r2, [pc, #148]	@ (8001a90 <UART_AdvFeatureConfig+0x158>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	2240      	movs	r2, #64	@ 0x40
 8001a12:	4013      	ands	r3, r2
 8001a14:	d01d      	beq.n	8001a52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a94 <UART_AdvFeatureConfig+0x15c>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	0019      	movs	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	035b      	lsls	r3, r3, #13
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d10b      	bne.n	8001a52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a15      	ldr	r2, [pc, #84]	@ (8001a98 <UART_AdvFeatureConfig+0x160>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	2280      	movs	r2, #128	@ 0x80
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d00b      	beq.n	8001a74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <UART_AdvFeatureConfig+0x164>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]
  }
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	ffff7fff 	.word	0xffff7fff
 8001a80:	fffdffff 	.word	0xfffdffff
 8001a84:	fffeffff 	.word	0xfffeffff
 8001a88:	fffbffff 	.word	0xfffbffff
 8001a8c:	ffffefff 	.word	0xffffefff
 8001a90:	ffffdfff 	.word	0xffffdfff
 8001a94:	ffefffff 	.word	0xffefffff
 8001a98:	ff9fffff 	.word	0xff9fffff
 8001a9c:	fff7ffff 	.word	0xfff7ffff

08001aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b092      	sub	sp, #72	@ 0x48
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2284      	movs	r2, #132	@ 0x84
 8001aac:	2100      	movs	r1, #0
 8001aae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001ab0:	f7fe fff4 	bl	8000a9c <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2208      	movs	r2, #8
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d12c      	bne.n	8001b20 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	0391      	lsls	r1, r2, #14
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4a46      	ldr	r2, [pc, #280]	@ (8001be8 <UART_CheckIdleState+0x148>)
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f000 f88c 	bl	8001bf0 <UART_WaitOnFlagUntilTimeout>
 8001ad8:	1e03      	subs	r3, r0, #0
 8001ada:	d021      	beq.n	8001b20 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001adc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aec:	f383 8810 	msr	PRIMASK, r3
}
 8001af0:	46c0      	nop			@ (mov r8, r8)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	438a      	bics	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b08:	f383 8810 	msr	PRIMASK, r3
}
 8001b0c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2278      	movs	r2, #120	@ 0x78
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e05f      	b.n	8001be0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2204      	movs	r2, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d146      	bne.n	8001bbc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b30:	2280      	movs	r2, #128	@ 0x80
 8001b32:	03d1      	lsls	r1, r2, #15
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4a2c      	ldr	r2, [pc, #176]	@ (8001be8 <UART_CheckIdleState+0x148>)
 8001b38:	9200      	str	r2, [sp, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f000 f858 	bl	8001bf0 <UART_WaitOnFlagUntilTimeout>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d03b      	beq.n	8001bbc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b44:	f3ef 8310 	mrs	r3, PRIMASK
 8001b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b4e:	2301      	movs	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f383 8810 	msr	PRIMASK, r3
}
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4921      	ldr	r1, [pc, #132]	@ (8001bec <UART_CheckIdleState+0x14c>)
 8001b66:	400a      	ands	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f383 8810 	msr	PRIMASK, r3
}
 8001b74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b76:	f3ef 8310 	mrs	r3, PRIMASK
 8001b7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b80:	2301      	movs	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f383 8810 	msr	PRIMASK, r3
}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	f383 8810 	msr	PRIMASK, r3
}
 8001ba6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2280      	movs	r2, #128	@ 0x80
 8001bac:	2120      	movs	r1, #32
 8001bae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2278      	movs	r2, #120	@ 0x78
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e011      	b.n	8001be0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	2120      	movs	r1, #32
 8001bc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2278      	movs	r2, #120	@ 0x78
 8001bda:	2100      	movs	r1, #0
 8001bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b010      	add	sp, #64	@ 0x40
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	01ffffff 	.word	0x01ffffff
 8001bec:	fffffedf 	.word	0xfffffedf

08001bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c00:	e051      	b.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	3301      	adds	r3, #1
 8001c06:	d04e      	beq.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c08:	f7fe ff48 	bl	8000a9c <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d302      	bcc.n	8001c1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e051      	b.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d03b      	beq.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b80      	cmp	r3, #128	@ 0x80
 8001c32:	d038      	beq.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b40      	cmp	r3, #64	@ 0x40
 8001c38:	d035      	beq.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2208      	movs	r2, #8
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d111      	bne.n	8001c6c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 f900 	bl	8001e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2284      	movs	r2, #132	@ 0x84
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2278      	movs	r2, #120	@ 0x78
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e02c      	b.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	401a      	ands	r2, r3
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d112      	bne.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2280      	movs	r2, #128	@ 0x80
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f8e3 	bl	8001e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2284      	movs	r2, #132	@ 0x84
 8001c96:	2120      	movs	r1, #32
 8001c98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2278      	movs	r2, #120	@ 0x78
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e00f      	b.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	425a      	negs	r2, r3
 8001cb6:	4153      	adcs	r3, r2
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	001a      	movs	r2, r3
 8001cbc:	1dfb      	adds	r3, r7, #7
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d09e      	beq.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b004      	add	sp, #16
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b090      	sub	sp, #64	@ 0x40
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	1dbb      	adds	r3, r7, #6
 8001cdc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1dba      	adds	r2, r7, #6
 8001ce8:	2158      	movs	r1, #88	@ 0x58
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2284      	movs	r2, #132	@ 0x84
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2280      	movs	r2, #128	@ 0x80
 8001cfa:	2122      	movs	r1, #34	@ 0x22
 8001cfc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d028      	beq.n	8001d58 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e04 <UART_Start_Receive_DMA+0x134>)
 8001d0c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d12:	4a3d      	ldr	r2, [pc, #244]	@ (8001e08 <UART_Start_Receive_DMA+0x138>)
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e0c <UART_Start_Receive_DMA+0x13c>)
 8001d1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d22:	2200      	movs	r2, #0
 8001d24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3324      	adds	r3, #36	@ 0x24
 8001d30:	0019      	movs	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d36:	001a      	movs	r2, r3
 8001d38:	1dbb      	adds	r3, r7, #6
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	f7fe ffde 	bl	8000cfc <HAL_DMA_Start_IT>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d009      	beq.n	8001d58 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2284      	movs	r2, #132	@ 0x84
 8001d48:	2110      	movs	r1, #16
 8001d4a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	2120      	movs	r1, #32
 8001d52:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e050      	b.n	8001dfa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d019      	beq.n	8001d94 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d60:	f3ef 8310 	mrs	r3, PRIMASK
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8001d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d70:	f383 8810 	msr	PRIMASK, r3
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2180      	movs	r1, #128	@ 0x80
 8001d82:	0049      	lsls	r1, r1, #1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8e:	f383 8810 	msr	PRIMASK, r3
}
 8001d92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d94:	f3ef 8310 	mrs	r3, PRIMASK
 8001d98:	613b      	str	r3, [r7, #16]
  return(result);
 8001d9a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d9e:	2301      	movs	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f383 8810 	msr	PRIMASK, r3
}
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f383 8810 	msr	PRIMASK, r3
}
 8001dc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dca:	61fb      	str	r3, [r7, #28]
  return(result);
 8001dcc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f383 8810 	msr	PRIMASK, r3
}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2140      	movs	r1, #64	@ 0x40
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	f383 8810 	msr	PRIMASK, r3
}
 8001df6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b010      	add	sp, #64	@ 0x40
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	08001f21 	.word	0x08001f21
 8001e08:	0800204d 	.word	0x0800204d
 8001e0c:	0800208f 	.word	0x0800208f

08001e10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e18:	f3ef 8310 	mrs	r3, PRIMASK
 8001e1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	2301      	movs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f383 8810 	msr	PRIMASK, r3
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	21c0      	movs	r1, #192	@ 0xc0
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f383 8810 	msr	PRIMASK, r3
}
 8001e48:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8001e50:	46c0      	nop			@ (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b006      	add	sp, #24
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	@ 0x38
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e60:	f3ef 8310 	mrs	r3, PRIMASK
 8001e64:	617b      	str	r3, [r7, #20]
  return(result);
 8001e66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f383 8810 	msr	PRIMASK, r3
}
 8001e74:	46c0      	nop			@ (mov r8, r8)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4926      	ldr	r1, [pc, #152]	@ (8001f1c <UART_EndRxTransfer+0xc4>)
 8001e82:	400a      	ands	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f383 8810 	msr	PRIMASK, r3
}
 8001e90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e92:	f3ef 8310 	mrs	r3, PRIMASK
 8001e96:	623b      	str	r3, [r7, #32]
  return(result);
 8001e98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	f383 8810 	msr	PRIMASK, r3
}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ebe:	f383 8810 	msr	PRIMASK, r3
}
 8001ec2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d118      	bne.n	8001efe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f383 8810 	msr	PRIMASK, r3
}
 8001ee0:	46c0      	nop			@ (mov r8, r8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2110      	movs	r1, #16
 8001eee:	438a      	bics	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f383 8810 	msr	PRIMASK, r3
}
 8001efc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2280      	movs	r2, #128	@ 0x80
 8001f02:	2120      	movs	r1, #32
 8001f04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b00e      	add	sp, #56	@ 0x38
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	fffffedf 	.word	0xfffffedf

08001f20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b094      	sub	sp, #80	@ 0x50
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d06f      	beq.n	8002016 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8001f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f38:	225a      	movs	r2, #90	@ 0x5a
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f42:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f44:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f383 8810 	msr	PRIMASK, r3
}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	493a      	ldr	r1, [pc, #232]	@ (8002048 <UART_DMAReceiveCplt+0x128>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	f383 8810 	msr	PRIMASK, r3
}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f70:	f3ef 8310 	mrs	r3, PRIMASK
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	f383 8810 	msr	PRIMASK, r3
}
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2101      	movs	r1, #1
 8001f92:	438a      	bics	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f9c:	f383 8810 	msr	PRIMASK, r3
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fac:	2301      	movs	r3, #1
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fb2:	f383 8810 	msr	PRIMASK, r3
}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2140      	movs	r1, #64	@ 0x40
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fce:	f383 8810 	msr	PRIMASK, r3
}
 8001fd2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fd6:	2280      	movs	r2, #128	@ 0x80
 8001fd8:	2120      	movs	r1, #32
 8001fda:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d118      	bne.n	8002016 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fee:	2301      	movs	r3, #1
 8001ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f383 8810 	msr	PRIMASK, r3
}
 8001ff8:	46c0      	nop			@ (mov r8, r8)
 8001ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2110      	movs	r1, #16
 8002006:	438a      	bics	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800200c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f383 8810 	msr	PRIMASK, r3
}
 8002014:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002018:	2200      	movs	r2, #0
 800201a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800201c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800201e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002020:	2b01      	cmp	r3, #1
 8002022:	d108      	bne.n	8002036 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002026:	2258      	movs	r2, #88	@ 0x58
 8002028:	5a9a      	ldrh	r2, [r3, r2]
 800202a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800202c:	0011      	movs	r1, r2
 800202e:	0018      	movs	r0, r3
 8002030:	f7ff fb36 	bl	80016a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002034:	e003      	b.n	800203e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff fb19 	bl	8001670 <HAL_UART_RxCpltCallback>
}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b014      	add	sp, #80	@ 0x50
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	fffffeff 	.word	0xfffffeff

0800204c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10a      	bne.n	800207e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2258      	movs	r2, #88	@ 0x58
 800206c:	5a9b      	ldrh	r3, [r3, r2]
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0011      	movs	r1, r2
 8002076:	0018      	movs	r0, r3
 8002078:	f7ff fb12 	bl	80016a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800207c:	e003      	b.n	8002086 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff fafd 	bl	8001680 <HAL_UART_RxHalfCpltCallback>
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bd80      	pop	{r7, pc}

0800208e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	589b      	ldr	r3, [r3, r2]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2280      	movs	r2, #128	@ 0x80
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b80      	cmp	r3, #128	@ 0x80
 80020b6:	d10a      	bne.n	80020ce <UART_DMAError+0x40>
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b21      	cmp	r3, #33	@ 0x21
 80020bc:	d107      	bne.n	80020ce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2252      	movs	r2, #82	@ 0x52
 80020c2:	2100      	movs	r1, #0
 80020c4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff fea1 	bl	8001e10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2240      	movs	r2, #64	@ 0x40
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b40      	cmp	r3, #64	@ 0x40
 80020da:	d10a      	bne.n	80020f2 <UART_DMAError+0x64>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b22      	cmp	r3, #34	@ 0x22
 80020e0:	d107      	bne.n	80020f2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	225a      	movs	r2, #90	@ 0x5a
 80020e6:	2100      	movs	r1, #0
 80020e8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff feb3 	bl	8001e58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2284      	movs	r2, #132	@ 0x84
 80020f6:	589b      	ldr	r3, [r3, r2]
 80020f8:	2210      	movs	r2, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2184      	movs	r1, #132	@ 0x84
 8002100:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff fac3 	bl	8001690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b006      	add	sp, #24
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <std>:
 8002114:	2300      	movs	r3, #0
 8002116:	b510      	push	{r4, lr}
 8002118:	0004      	movs	r4, r0
 800211a:	6003      	str	r3, [r0, #0]
 800211c:	6043      	str	r3, [r0, #4]
 800211e:	6083      	str	r3, [r0, #8]
 8002120:	8181      	strh	r1, [r0, #12]
 8002122:	6643      	str	r3, [r0, #100]	@ 0x64
 8002124:	81c2      	strh	r2, [r0, #14]
 8002126:	6103      	str	r3, [r0, #16]
 8002128:	6143      	str	r3, [r0, #20]
 800212a:	6183      	str	r3, [r0, #24]
 800212c:	0019      	movs	r1, r3
 800212e:	2208      	movs	r2, #8
 8002130:	305c      	adds	r0, #92	@ 0x5c
 8002132:	f000 fa0f 	bl	8002554 <memset>
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <std+0x50>)
 8002138:	6224      	str	r4, [r4, #32]
 800213a:	6263      	str	r3, [r4, #36]	@ 0x24
 800213c:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <std+0x54>)
 800213e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <std+0x58>)
 8002142:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002144:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <std+0x5c>)
 8002146:	6323      	str	r3, [r4, #48]	@ 0x30
 8002148:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <std+0x60>)
 800214a:	429c      	cmp	r4, r3
 800214c:	d005      	beq.n	800215a <std+0x46>
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <std+0x64>)
 8002150:	429c      	cmp	r4, r3
 8002152:	d002      	beq.n	800215a <std+0x46>
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <std+0x68>)
 8002156:	429c      	cmp	r4, r3
 8002158:	d103      	bne.n	8002162 <std+0x4e>
 800215a:	0020      	movs	r0, r4
 800215c:	3058      	adds	r0, #88	@ 0x58
 800215e:	f000 faf3 	bl	8002748 <__retarget_lock_init_recursive>
 8002162:	bd10      	pop	{r4, pc}
 8002164:	0800237d 	.word	0x0800237d
 8002168:	080023a5 	.word	0x080023a5
 800216c:	080023dd 	.word	0x080023dd
 8002170:	08002409 	.word	0x08002409
 8002174:	200002a0 	.word	0x200002a0
 8002178:	20000308 	.word	0x20000308
 800217c:	20000370 	.word	0x20000370

08002180 <stdio_exit_handler>:
 8002180:	b510      	push	{r4, lr}
 8002182:	4a03      	ldr	r2, [pc, #12]	@ (8002190 <stdio_exit_handler+0x10>)
 8002184:	4903      	ldr	r1, [pc, #12]	@ (8002194 <stdio_exit_handler+0x14>)
 8002186:	4804      	ldr	r0, [pc, #16]	@ (8002198 <stdio_exit_handler+0x18>)
 8002188:	f000 f86c 	bl	8002264 <_fwalk_sglue>
 800218c:	bd10      	pop	{r4, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	2000000c 	.word	0x2000000c
 8002194:	08003029 	.word	0x08003029
 8002198:	2000001c 	.word	0x2000001c

0800219c <cleanup_stdio>:
 800219c:	6841      	ldr	r1, [r0, #4]
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <cleanup_stdio+0x30>)
 80021a0:	b510      	push	{r4, lr}
 80021a2:	0004      	movs	r4, r0
 80021a4:	4299      	cmp	r1, r3
 80021a6:	d001      	beq.n	80021ac <cleanup_stdio+0x10>
 80021a8:	f000 ff3e 	bl	8003028 <_fflush_r>
 80021ac:	68a1      	ldr	r1, [r4, #8]
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <cleanup_stdio+0x34>)
 80021b0:	4299      	cmp	r1, r3
 80021b2:	d002      	beq.n	80021ba <cleanup_stdio+0x1e>
 80021b4:	0020      	movs	r0, r4
 80021b6:	f000 ff37 	bl	8003028 <_fflush_r>
 80021ba:	68e1      	ldr	r1, [r4, #12]
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <cleanup_stdio+0x38>)
 80021be:	4299      	cmp	r1, r3
 80021c0:	d002      	beq.n	80021c8 <cleanup_stdio+0x2c>
 80021c2:	0020      	movs	r0, r4
 80021c4:	f000 ff30 	bl	8003028 <_fflush_r>
 80021c8:	bd10      	pop	{r4, pc}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	200002a0 	.word	0x200002a0
 80021d0:	20000308 	.word	0x20000308
 80021d4:	20000370 	.word	0x20000370

080021d8 <global_stdio_init.part.0>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <global_stdio_init.part.0+0x28>)
 80021dc:	4a09      	ldr	r2, [pc, #36]	@ (8002204 <global_stdio_init.part.0+0x2c>)
 80021de:	2104      	movs	r1, #4
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	4809      	ldr	r0, [pc, #36]	@ (8002208 <global_stdio_init.part.0+0x30>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	f7ff ff95 	bl	8002114 <std>
 80021ea:	2201      	movs	r2, #1
 80021ec:	2109      	movs	r1, #9
 80021ee:	4807      	ldr	r0, [pc, #28]	@ (800220c <global_stdio_init.part.0+0x34>)
 80021f0:	f7ff ff90 	bl	8002114 <std>
 80021f4:	2202      	movs	r2, #2
 80021f6:	2112      	movs	r1, #18
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <global_stdio_init.part.0+0x38>)
 80021fa:	f7ff ff8b 	bl	8002114 <std>
 80021fe:	bd10      	pop	{r4, pc}
 8002200:	200003d8 	.word	0x200003d8
 8002204:	08002181 	.word	0x08002181
 8002208:	200002a0 	.word	0x200002a0
 800220c:	20000308 	.word	0x20000308
 8002210:	20000370 	.word	0x20000370

08002214 <__sfp_lock_acquire>:
 8002214:	b510      	push	{r4, lr}
 8002216:	4802      	ldr	r0, [pc, #8]	@ (8002220 <__sfp_lock_acquire+0xc>)
 8002218:	f000 fa97 	bl	800274a <__retarget_lock_acquire_recursive>
 800221c:	bd10      	pop	{r4, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	200003e1 	.word	0x200003e1

08002224 <__sfp_lock_release>:
 8002224:	b510      	push	{r4, lr}
 8002226:	4802      	ldr	r0, [pc, #8]	@ (8002230 <__sfp_lock_release+0xc>)
 8002228:	f000 fa90 	bl	800274c <__retarget_lock_release_recursive>
 800222c:	bd10      	pop	{r4, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	200003e1 	.word	0x200003e1

08002234 <__sinit>:
 8002234:	b510      	push	{r4, lr}
 8002236:	0004      	movs	r4, r0
 8002238:	f7ff ffec 	bl	8002214 <__sfp_lock_acquire>
 800223c:	6a23      	ldr	r3, [r4, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <__sinit+0x14>
 8002242:	f7ff ffef 	bl	8002224 <__sfp_lock_release>
 8002246:	bd10      	pop	{r4, pc}
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <__sinit+0x28>)
 800224a:	6223      	str	r3, [r4, #32]
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <__sinit+0x2c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f6      	bne.n	8002242 <__sinit+0xe>
 8002254:	f7ff ffc0 	bl	80021d8 <global_stdio_init.part.0>
 8002258:	e7f3      	b.n	8002242 <__sinit+0xe>
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	0800219d 	.word	0x0800219d
 8002260:	200003d8 	.word	0x200003d8

08002264 <_fwalk_sglue>:
 8002264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002266:	0014      	movs	r4, r2
 8002268:	2600      	movs	r6, #0
 800226a:	9000      	str	r0, [sp, #0]
 800226c:	9101      	str	r1, [sp, #4]
 800226e:	68a5      	ldr	r5, [r4, #8]
 8002270:	6867      	ldr	r7, [r4, #4]
 8002272:	3f01      	subs	r7, #1
 8002274:	d504      	bpl.n	8002280 <_fwalk_sglue+0x1c>
 8002276:	6824      	ldr	r4, [r4, #0]
 8002278:	2c00      	cmp	r4, #0
 800227a:	d1f8      	bne.n	800226e <_fwalk_sglue+0xa>
 800227c:	0030      	movs	r0, r6
 800227e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002280:	89ab      	ldrh	r3, [r5, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d908      	bls.n	8002298 <_fwalk_sglue+0x34>
 8002286:	220e      	movs	r2, #14
 8002288:	5eab      	ldrsh	r3, [r5, r2]
 800228a:	3301      	adds	r3, #1
 800228c:	d004      	beq.n	8002298 <_fwalk_sglue+0x34>
 800228e:	0029      	movs	r1, r5
 8002290:	9800      	ldr	r0, [sp, #0]
 8002292:	9b01      	ldr	r3, [sp, #4]
 8002294:	4798      	blx	r3
 8002296:	4306      	orrs	r6, r0
 8002298:	3568      	adds	r5, #104	@ 0x68
 800229a:	e7ea      	b.n	8002272 <_fwalk_sglue+0xe>

0800229c <iprintf>:
 800229c:	b40f      	push	{r0, r1, r2, r3}
 800229e:	b507      	push	{r0, r1, r2, lr}
 80022a0:	4905      	ldr	r1, [pc, #20]	@ (80022b8 <iprintf+0x1c>)
 80022a2:	ab04      	add	r3, sp, #16
 80022a4:	6808      	ldr	r0, [r1, #0]
 80022a6:	cb04      	ldmia	r3!, {r2}
 80022a8:	6881      	ldr	r1, [r0, #8]
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	f000 fb9c 	bl	80029e8 <_vfiprintf_r>
 80022b0:	b003      	add	sp, #12
 80022b2:	bc08      	pop	{r3}
 80022b4:	b004      	add	sp, #16
 80022b6:	4718      	bx	r3
 80022b8:	20000018 	.word	0x20000018

080022bc <_puts_r>:
 80022bc:	6a03      	ldr	r3, [r0, #32]
 80022be:	b570      	push	{r4, r5, r6, lr}
 80022c0:	0005      	movs	r5, r0
 80022c2:	000e      	movs	r6, r1
 80022c4:	6884      	ldr	r4, [r0, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <_puts_r+0x12>
 80022ca:	f7ff ffb3 	bl	8002234 <__sinit>
 80022ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80022d0:	07db      	lsls	r3, r3, #31
 80022d2:	d405      	bmi.n	80022e0 <_puts_r+0x24>
 80022d4:	89a3      	ldrh	r3, [r4, #12]
 80022d6:	059b      	lsls	r3, r3, #22
 80022d8:	d402      	bmi.n	80022e0 <_puts_r+0x24>
 80022da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022dc:	f000 fa35 	bl	800274a <__retarget_lock_acquire_recursive>
 80022e0:	89a3      	ldrh	r3, [r4, #12]
 80022e2:	071b      	lsls	r3, r3, #28
 80022e4:	d502      	bpl.n	80022ec <_puts_r+0x30>
 80022e6:	6923      	ldr	r3, [r4, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d11f      	bne.n	800232c <_puts_r+0x70>
 80022ec:	0021      	movs	r1, r4
 80022ee:	0028      	movs	r0, r5
 80022f0:	f000 f8d2 	bl	8002498 <__swsetup_r>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d019      	beq.n	800232c <_puts_r+0x70>
 80022f8:	2501      	movs	r5, #1
 80022fa:	426d      	negs	r5, r5
 80022fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80022fe:	07db      	lsls	r3, r3, #31
 8002300:	d405      	bmi.n	800230e <_puts_r+0x52>
 8002302:	89a3      	ldrh	r3, [r4, #12]
 8002304:	059b      	lsls	r3, r3, #22
 8002306:	d402      	bmi.n	800230e <_puts_r+0x52>
 8002308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800230a:	f000 fa1f 	bl	800274c <__retarget_lock_release_recursive>
 800230e:	0028      	movs	r0, r5
 8002310:	bd70      	pop	{r4, r5, r6, pc}
 8002312:	3601      	adds	r6, #1
 8002314:	60a3      	str	r3, [r4, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	da04      	bge.n	8002324 <_puts_r+0x68>
 800231a:	69a2      	ldr	r2, [r4, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	dc16      	bgt.n	800234e <_puts_r+0x92>
 8002320:	290a      	cmp	r1, #10
 8002322:	d014      	beq.n	800234e <_puts_r+0x92>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	6022      	str	r2, [r4, #0]
 800232a:	7019      	strb	r1, [r3, #0]
 800232c:	68a3      	ldr	r3, [r4, #8]
 800232e:	7831      	ldrb	r1, [r6, #0]
 8002330:	3b01      	subs	r3, #1
 8002332:	2900      	cmp	r1, #0
 8002334:	d1ed      	bne.n	8002312 <_puts_r+0x56>
 8002336:	60a3      	str	r3, [r4, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	da0f      	bge.n	800235c <_puts_r+0xa0>
 800233c:	0022      	movs	r2, r4
 800233e:	0028      	movs	r0, r5
 8002340:	310a      	adds	r1, #10
 8002342:	f000 f867 	bl	8002414 <__swbuf_r>
 8002346:	3001      	adds	r0, #1
 8002348:	d0d6      	beq.n	80022f8 <_puts_r+0x3c>
 800234a:	250a      	movs	r5, #10
 800234c:	e7d6      	b.n	80022fc <_puts_r+0x40>
 800234e:	0022      	movs	r2, r4
 8002350:	0028      	movs	r0, r5
 8002352:	f000 f85f 	bl	8002414 <__swbuf_r>
 8002356:	3001      	adds	r0, #1
 8002358:	d1e8      	bne.n	800232c <_puts_r+0x70>
 800235a:	e7cd      	b.n	80022f8 <_puts_r+0x3c>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	6022      	str	r2, [r4, #0]
 8002362:	220a      	movs	r2, #10
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e7f0      	b.n	800234a <_puts_r+0x8e>

08002368 <puts>:
 8002368:	b510      	push	{r4, lr}
 800236a:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <puts+0x10>)
 800236c:	0001      	movs	r1, r0
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	f7ff ffa4 	bl	80022bc <_puts_r>
 8002374:	bd10      	pop	{r4, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	20000018 	.word	0x20000018

0800237c <__sread>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	000c      	movs	r4, r1
 8002380:	250e      	movs	r5, #14
 8002382:	5f49      	ldrsh	r1, [r1, r5]
 8002384:	f000 f98e 	bl	80026a4 <_read_r>
 8002388:	2800      	cmp	r0, #0
 800238a:	db03      	blt.n	8002394 <__sread+0x18>
 800238c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800238e:	181b      	adds	r3, r3, r0
 8002390:	6563      	str	r3, [r4, #84]	@ 0x54
 8002392:	bd70      	pop	{r4, r5, r6, pc}
 8002394:	89a3      	ldrh	r3, [r4, #12]
 8002396:	4a02      	ldr	r2, [pc, #8]	@ (80023a0 <__sread+0x24>)
 8002398:	4013      	ands	r3, r2
 800239a:	81a3      	strh	r3, [r4, #12]
 800239c:	e7f9      	b.n	8002392 <__sread+0x16>
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	ffffefff 	.word	0xffffefff

080023a4 <__swrite>:
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	001f      	movs	r7, r3
 80023a8:	898b      	ldrh	r3, [r1, #12]
 80023aa:	0005      	movs	r5, r0
 80023ac:	000c      	movs	r4, r1
 80023ae:	0016      	movs	r6, r2
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	d505      	bpl.n	80023c0 <__swrite+0x1c>
 80023b4:	230e      	movs	r3, #14
 80023b6:	5ec9      	ldrsh	r1, [r1, r3]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2302      	movs	r3, #2
 80023bc:	f000 f95e 	bl	800267c <_lseek_r>
 80023c0:	89a3      	ldrh	r3, [r4, #12]
 80023c2:	4a05      	ldr	r2, [pc, #20]	@ (80023d8 <__swrite+0x34>)
 80023c4:	0028      	movs	r0, r5
 80023c6:	4013      	ands	r3, r2
 80023c8:	81a3      	strh	r3, [r4, #12]
 80023ca:	0032      	movs	r2, r6
 80023cc:	230e      	movs	r3, #14
 80023ce:	5ee1      	ldrsh	r1, [r4, r3]
 80023d0:	003b      	movs	r3, r7
 80023d2:	f000 f97b 	bl	80026cc <_write_r>
 80023d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d8:	ffffefff 	.word	0xffffefff

080023dc <__sseek>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	000c      	movs	r4, r1
 80023e0:	250e      	movs	r5, #14
 80023e2:	5f49      	ldrsh	r1, [r1, r5]
 80023e4:	f000 f94a 	bl	800267c <_lseek_r>
 80023e8:	89a3      	ldrh	r3, [r4, #12]
 80023ea:	1c42      	adds	r2, r0, #1
 80023ec:	d103      	bne.n	80023f6 <__sseek+0x1a>
 80023ee:	4a05      	ldr	r2, [pc, #20]	@ (8002404 <__sseek+0x28>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	81a3      	strh	r3, [r4, #12]
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
 80023f6:	2280      	movs	r2, #128	@ 0x80
 80023f8:	0152      	lsls	r2, r2, #5
 80023fa:	4313      	orrs	r3, r2
 80023fc:	81a3      	strh	r3, [r4, #12]
 80023fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8002400:	e7f8      	b.n	80023f4 <__sseek+0x18>
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	ffffefff 	.word	0xffffefff

08002408 <__sclose>:
 8002408:	b510      	push	{r4, lr}
 800240a:	230e      	movs	r3, #14
 800240c:	5ec9      	ldrsh	r1, [r1, r3]
 800240e:	f000 f923 	bl	8002658 <_close_r>
 8002412:	bd10      	pop	{r4, pc}

08002414 <__swbuf_r>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	0006      	movs	r6, r0
 8002418:	000d      	movs	r5, r1
 800241a:	0014      	movs	r4, r2
 800241c:	2800      	cmp	r0, #0
 800241e:	d004      	beq.n	800242a <__swbuf_r+0x16>
 8002420:	6a03      	ldr	r3, [r0, #32]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <__swbuf_r+0x16>
 8002426:	f7ff ff05 	bl	8002234 <__sinit>
 800242a:	69a3      	ldr	r3, [r4, #24]
 800242c:	60a3      	str	r3, [r4, #8]
 800242e:	89a3      	ldrh	r3, [r4, #12]
 8002430:	071b      	lsls	r3, r3, #28
 8002432:	d502      	bpl.n	800243a <__swbuf_r+0x26>
 8002434:	6923      	ldr	r3, [r4, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <__swbuf_r+0x3a>
 800243a:	0021      	movs	r1, r4
 800243c:	0030      	movs	r0, r6
 800243e:	f000 f82b 	bl	8002498 <__swsetup_r>
 8002442:	2800      	cmp	r0, #0
 8002444:	d003      	beq.n	800244e <__swbuf_r+0x3a>
 8002446:	2501      	movs	r5, #1
 8002448:	426d      	negs	r5, r5
 800244a:	0028      	movs	r0, r5
 800244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800244e:	6923      	ldr	r3, [r4, #16]
 8002450:	6820      	ldr	r0, [r4, #0]
 8002452:	b2ef      	uxtb	r7, r5
 8002454:	1ac0      	subs	r0, r0, r3
 8002456:	6963      	ldr	r3, [r4, #20]
 8002458:	b2ed      	uxtb	r5, r5
 800245a:	4283      	cmp	r3, r0
 800245c:	dc05      	bgt.n	800246a <__swbuf_r+0x56>
 800245e:	0021      	movs	r1, r4
 8002460:	0030      	movs	r0, r6
 8002462:	f000 fde1 	bl	8003028 <_fflush_r>
 8002466:	2800      	cmp	r0, #0
 8002468:	d1ed      	bne.n	8002446 <__swbuf_r+0x32>
 800246a:	68a3      	ldr	r3, [r4, #8]
 800246c:	3001      	adds	r0, #1
 800246e:	3b01      	subs	r3, #1
 8002470:	60a3      	str	r3, [r4, #8]
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	6022      	str	r2, [r4, #0]
 8002478:	701f      	strb	r7, [r3, #0]
 800247a:	6963      	ldr	r3, [r4, #20]
 800247c:	4283      	cmp	r3, r0
 800247e:	d004      	beq.n	800248a <__swbuf_r+0x76>
 8002480:	89a3      	ldrh	r3, [r4, #12]
 8002482:	07db      	lsls	r3, r3, #31
 8002484:	d5e1      	bpl.n	800244a <__swbuf_r+0x36>
 8002486:	2d0a      	cmp	r5, #10
 8002488:	d1df      	bne.n	800244a <__swbuf_r+0x36>
 800248a:	0021      	movs	r1, r4
 800248c:	0030      	movs	r0, r6
 800248e:	f000 fdcb 	bl	8003028 <_fflush_r>
 8002492:	2800      	cmp	r0, #0
 8002494:	d0d9      	beq.n	800244a <__swbuf_r+0x36>
 8002496:	e7d6      	b.n	8002446 <__swbuf_r+0x32>

08002498 <__swsetup_r>:
 8002498:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <__swsetup_r+0xb8>)
 800249a:	b570      	push	{r4, r5, r6, lr}
 800249c:	0005      	movs	r5, r0
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	000c      	movs	r4, r1
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d004      	beq.n	80024b0 <__swsetup_r+0x18>
 80024a6:	6a03      	ldr	r3, [r0, #32]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <__swsetup_r+0x18>
 80024ac:	f7ff fec2 	bl	8002234 <__sinit>
 80024b0:	230c      	movs	r3, #12
 80024b2:	5ee2      	ldrsh	r2, [r4, r3]
 80024b4:	0713      	lsls	r3, r2, #28
 80024b6:	d423      	bmi.n	8002500 <__swsetup_r+0x68>
 80024b8:	06d3      	lsls	r3, r2, #27
 80024ba:	d407      	bmi.n	80024cc <__swsetup_r+0x34>
 80024bc:	2309      	movs	r3, #9
 80024be:	602b      	str	r3, [r5, #0]
 80024c0:	2340      	movs	r3, #64	@ 0x40
 80024c2:	2001      	movs	r0, #1
 80024c4:	4313      	orrs	r3, r2
 80024c6:	81a3      	strh	r3, [r4, #12]
 80024c8:	4240      	negs	r0, r0
 80024ca:	e03a      	b.n	8002542 <__swsetup_r+0xaa>
 80024cc:	0752      	lsls	r2, r2, #29
 80024ce:	d513      	bpl.n	80024f8 <__swsetup_r+0x60>
 80024d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d008      	beq.n	80024e8 <__swsetup_r+0x50>
 80024d6:	0023      	movs	r3, r4
 80024d8:	3344      	adds	r3, #68	@ 0x44
 80024da:	4299      	cmp	r1, r3
 80024dc:	d002      	beq.n	80024e4 <__swsetup_r+0x4c>
 80024de:	0028      	movs	r0, r5
 80024e0:	f000 f954 	bl	800278c <_free_r>
 80024e4:	2300      	movs	r3, #0
 80024e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80024e8:	2224      	movs	r2, #36	@ 0x24
 80024ea:	89a3      	ldrh	r3, [r4, #12]
 80024ec:	4393      	bics	r3, r2
 80024ee:	81a3      	strh	r3, [r4, #12]
 80024f0:	2300      	movs	r3, #0
 80024f2:	6063      	str	r3, [r4, #4]
 80024f4:	6923      	ldr	r3, [r4, #16]
 80024f6:	6023      	str	r3, [r4, #0]
 80024f8:	2308      	movs	r3, #8
 80024fa:	89a2      	ldrh	r2, [r4, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	81a3      	strh	r3, [r4, #12]
 8002500:	6923      	ldr	r3, [r4, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <__swsetup_r+0x86>
 8002506:	21a0      	movs	r1, #160	@ 0xa0
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	89a3      	ldrh	r3, [r4, #12]
 800250c:	0089      	lsls	r1, r1, #2
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	400b      	ands	r3, r1
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <__swsetup_r+0x86>
 8002516:	0021      	movs	r1, r4
 8002518:	0028      	movs	r0, r5
 800251a:	f000 fdeb 	bl	80030f4 <__smakebuf_r>
 800251e:	230c      	movs	r3, #12
 8002520:	5ee2      	ldrsh	r2, [r4, r3]
 8002522:	2101      	movs	r1, #1
 8002524:	0013      	movs	r3, r2
 8002526:	400b      	ands	r3, r1
 8002528:	420a      	tst	r2, r1
 800252a:	d00b      	beq.n	8002544 <__swsetup_r+0xac>
 800252c:	2300      	movs	r3, #0
 800252e:	60a3      	str	r3, [r4, #8]
 8002530:	6963      	ldr	r3, [r4, #20]
 8002532:	425b      	negs	r3, r3
 8002534:	61a3      	str	r3, [r4, #24]
 8002536:	2000      	movs	r0, #0
 8002538:	6923      	ldr	r3, [r4, #16]
 800253a:	4283      	cmp	r3, r0
 800253c:	d101      	bne.n	8002542 <__swsetup_r+0xaa>
 800253e:	0613      	lsls	r3, r2, #24
 8002540:	d4be      	bmi.n	80024c0 <__swsetup_r+0x28>
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	0791      	lsls	r1, r2, #30
 8002546:	d400      	bmi.n	800254a <__swsetup_r+0xb2>
 8002548:	6963      	ldr	r3, [r4, #20]
 800254a:	60a3      	str	r3, [r4, #8]
 800254c:	e7f3      	b.n	8002536 <__swsetup_r+0x9e>
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	20000018 	.word	0x20000018

08002554 <memset>:
 8002554:	0003      	movs	r3, r0
 8002556:	1882      	adds	r2, r0, r2
 8002558:	4293      	cmp	r3, r2
 800255a:	d100      	bne.n	800255e <memset+0xa>
 800255c:	4770      	bx	lr
 800255e:	7019      	strb	r1, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	e7f9      	b.n	8002558 <memset+0x4>

08002564 <strcasecmp>:
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	0005      	movs	r5, r0
 8002568:	2400      	movs	r4, #0
 800256a:	2703      	movs	r7, #3
 800256c:	4e09      	ldr	r6, [pc, #36]	@ (8002594 <strcasecmp+0x30>)
 800256e:	5d2a      	ldrb	r2, [r5, r4]
 8002570:	5cb3      	ldrb	r3, [r6, r2]
 8002572:	403b      	ands	r3, r7
 8002574:	2b01      	cmp	r3, #1
 8002576:	d100      	bne.n	800257a <strcasecmp+0x16>
 8002578:	3220      	adds	r2, #32
 800257a:	5d0b      	ldrb	r3, [r1, r4]
 800257c:	5cf0      	ldrb	r0, [r6, r3]
 800257e:	4038      	ands	r0, r7
 8002580:	2801      	cmp	r0, #1
 8002582:	d100      	bne.n	8002586 <strcasecmp+0x22>
 8002584:	3320      	adds	r3, #32
 8002586:	1ad0      	subs	r0, r2, r3
 8002588:	429a      	cmp	r2, r3
 800258a:	d102      	bne.n	8002592 <strcasecmp+0x2e>
 800258c:	3401      	adds	r4, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ed      	bne.n	800256e <strcasecmp+0xa>
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002594:	08003402 	.word	0x08003402

08002598 <strtok>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <strtok+0x5c>)
 800259c:	0005      	movs	r5, r0
 800259e:	681f      	ldr	r7, [r3, #0]
 80025a0:	000e      	movs	r6, r1
 80025a2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d11d      	bne.n	80025e4 <strtok+0x4c>
 80025a8:	2050      	movs	r0, #80	@ 0x50
 80025aa:	f000 f939 	bl	8002820 <malloc>
 80025ae:	1e02      	subs	r2, r0, #0
 80025b0:	6478      	str	r0, [r7, #68]	@ 0x44
 80025b2:	d104      	bne.n	80025be <strtok+0x26>
 80025b4:	215b      	movs	r1, #91	@ 0x5b
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <strtok+0x60>)
 80025b8:	4810      	ldr	r0, [pc, #64]	@ (80025fc <strtok+0x64>)
 80025ba:	f000 f8c9 	bl	8002750 <__assert_func>
 80025be:	6004      	str	r4, [r0, #0]
 80025c0:	6044      	str	r4, [r0, #4]
 80025c2:	6084      	str	r4, [r0, #8]
 80025c4:	60c4      	str	r4, [r0, #12]
 80025c6:	6104      	str	r4, [r0, #16]
 80025c8:	6144      	str	r4, [r0, #20]
 80025ca:	6184      	str	r4, [r0, #24]
 80025cc:	6284      	str	r4, [r0, #40]	@ 0x28
 80025ce:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80025d0:	6304      	str	r4, [r0, #48]	@ 0x30
 80025d2:	6344      	str	r4, [r0, #52]	@ 0x34
 80025d4:	6384      	str	r4, [r0, #56]	@ 0x38
 80025d6:	63c4      	str	r4, [r0, #60]	@ 0x3c
 80025d8:	6404      	str	r4, [r0, #64]	@ 0x40
 80025da:	6444      	str	r4, [r0, #68]	@ 0x44
 80025dc:	6484      	str	r4, [r0, #72]	@ 0x48
 80025de:	64c4      	str	r4, [r0, #76]	@ 0x4c
 80025e0:	7704      	strb	r4, [r0, #28]
 80025e2:	6244      	str	r4, [r0, #36]	@ 0x24
 80025e4:	0031      	movs	r1, r6
 80025e6:	0028      	movs	r0, r5
 80025e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025ea:	2301      	movs	r3, #1
 80025ec:	f000 f808 	bl	8002600 <__strtok_r>
 80025f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	20000018 	.word	0x20000018
 80025f8:	08003354 	.word	0x08003354
 80025fc:	0800336b 	.word	0x0800336b

08002600 <__strtok_r>:
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	1e04      	subs	r4, r0, #0
 8002604:	d102      	bne.n	800260c <__strtok_r+0xc>
 8002606:	6814      	ldr	r4, [r2, #0]
 8002608:	2c00      	cmp	r4, #0
 800260a:	d009      	beq.n	8002620 <__strtok_r+0x20>
 800260c:	0020      	movs	r0, r4
 800260e:	000e      	movs	r6, r1
 8002610:	7805      	ldrb	r5, [r0, #0]
 8002612:	3401      	adds	r4, #1
 8002614:	7837      	ldrb	r7, [r6, #0]
 8002616:	2f00      	cmp	r7, #0
 8002618:	d104      	bne.n	8002624 <__strtok_r+0x24>
 800261a:	2d00      	cmp	r5, #0
 800261c:	d10d      	bne.n	800263a <__strtok_r+0x3a>
 800261e:	6015      	str	r5, [r2, #0]
 8002620:	2000      	movs	r0, #0
 8002622:	e006      	b.n	8002632 <__strtok_r+0x32>
 8002624:	3601      	adds	r6, #1
 8002626:	42bd      	cmp	r5, r7
 8002628:	d1f4      	bne.n	8002614 <__strtok_r+0x14>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ee      	bne.n	800260c <__strtok_r+0xc>
 800262e:	6014      	str	r4, [r2, #0]
 8002630:	7003      	strb	r3, [r0, #0]
 8002632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002634:	3301      	adds	r3, #1
 8002636:	2d00      	cmp	r5, #0
 8002638:	d102      	bne.n	8002640 <__strtok_r+0x40>
 800263a:	000b      	movs	r3, r1
 800263c:	7826      	ldrb	r6, [r4, #0]
 800263e:	3401      	adds	r4, #1
 8002640:	781d      	ldrb	r5, [r3, #0]
 8002642:	42ae      	cmp	r6, r5
 8002644:	d1f6      	bne.n	8002634 <__strtok_r+0x34>
 8002646:	2300      	movs	r3, #0
 8002648:	001d      	movs	r5, r3
 800264a:	429e      	cmp	r6, r3
 800264c:	d002      	beq.n	8002654 <__strtok_r+0x54>
 800264e:	0023      	movs	r3, r4
 8002650:	1e61      	subs	r1, r4, #1
 8002652:	700d      	strb	r5, [r1, #0]
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e7ec      	b.n	8002632 <__strtok_r+0x32>

08002658 <_close_r>:
 8002658:	2300      	movs	r3, #0
 800265a:	b570      	push	{r4, r5, r6, lr}
 800265c:	4d06      	ldr	r5, [pc, #24]	@ (8002678 <_close_r+0x20>)
 800265e:	0004      	movs	r4, r0
 8002660:	0008      	movs	r0, r1
 8002662:	602b      	str	r3, [r5, #0]
 8002664:	f7fe f92e 	bl	80008c4 <_close>
 8002668:	1c43      	adds	r3, r0, #1
 800266a:	d103      	bne.n	8002674 <_close_r+0x1c>
 800266c:	682b      	ldr	r3, [r5, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d000      	beq.n	8002674 <_close_r+0x1c>
 8002672:	6023      	str	r3, [r4, #0]
 8002674:	bd70      	pop	{r4, r5, r6, pc}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	200003dc 	.word	0x200003dc

0800267c <_lseek_r>:
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	0004      	movs	r4, r0
 8002680:	0008      	movs	r0, r1
 8002682:	0011      	movs	r1, r2
 8002684:	001a      	movs	r2, r3
 8002686:	2300      	movs	r3, #0
 8002688:	4d05      	ldr	r5, [pc, #20]	@ (80026a0 <_lseek_r+0x24>)
 800268a:	602b      	str	r3, [r5, #0]
 800268c:	f7fe f93b 	bl	8000906 <_lseek>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d103      	bne.n	800269c <_lseek_r+0x20>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d000      	beq.n	800269c <_lseek_r+0x20>
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	200003dc 	.word	0x200003dc

080026a4 <_read_r>:
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	0004      	movs	r4, r0
 80026a8:	0008      	movs	r0, r1
 80026aa:	0011      	movs	r1, r2
 80026ac:	001a      	movs	r2, r3
 80026ae:	2300      	movs	r3, #0
 80026b0:	4d05      	ldr	r5, [pc, #20]	@ (80026c8 <_read_r+0x24>)
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	f7fe f8e9 	bl	800088a <_read>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d103      	bne.n	80026c4 <_read_r+0x20>
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d000      	beq.n	80026c4 <_read_r+0x20>
 80026c2:	6023      	str	r3, [r4, #0]
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	200003dc 	.word	0x200003dc

080026cc <_write_r>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	0004      	movs	r4, r0
 80026d0:	0008      	movs	r0, r1
 80026d2:	0011      	movs	r1, r2
 80026d4:	001a      	movs	r2, r3
 80026d6:	2300      	movs	r3, #0
 80026d8:	4d05      	ldr	r5, [pc, #20]	@ (80026f0 <_write_r+0x24>)
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	f7fd fdaa 	bl	8000234 <_write>
 80026e0:	1c43      	adds	r3, r0, #1
 80026e2:	d103      	bne.n	80026ec <_write_r+0x20>
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d000      	beq.n	80026ec <_write_r+0x20>
 80026ea:	6023      	str	r3, [r4, #0]
 80026ec:	bd70      	pop	{r4, r5, r6, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	200003dc 	.word	0x200003dc

080026f4 <__errno>:
 80026f4:	4b01      	ldr	r3, [pc, #4]	@ (80026fc <__errno+0x8>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	4770      	bx	lr
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	20000018 	.word	0x20000018

08002700 <__libc_init_array>:
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	2600      	movs	r6, #0
 8002704:	4c0c      	ldr	r4, [pc, #48]	@ (8002738 <__libc_init_array+0x38>)
 8002706:	4d0d      	ldr	r5, [pc, #52]	@ (800273c <__libc_init_array+0x3c>)
 8002708:	1b64      	subs	r4, r4, r5
 800270a:	10a4      	asrs	r4, r4, #2
 800270c:	42a6      	cmp	r6, r4
 800270e:	d109      	bne.n	8002724 <__libc_init_array+0x24>
 8002710:	2600      	movs	r6, #0
 8002712:	f000 fdc3 	bl	800329c <_init>
 8002716:	4c0a      	ldr	r4, [pc, #40]	@ (8002740 <__libc_init_array+0x40>)
 8002718:	4d0a      	ldr	r5, [pc, #40]	@ (8002744 <__libc_init_array+0x44>)
 800271a:	1b64      	subs	r4, r4, r5
 800271c:	10a4      	asrs	r4, r4, #2
 800271e:	42a6      	cmp	r6, r4
 8002720:	d105      	bne.n	800272e <__libc_init_array+0x2e>
 8002722:	bd70      	pop	{r4, r5, r6, pc}
 8002724:	00b3      	lsls	r3, r6, #2
 8002726:	58eb      	ldr	r3, [r5, r3]
 8002728:	4798      	blx	r3
 800272a:	3601      	adds	r6, #1
 800272c:	e7ee      	b.n	800270c <__libc_init_array+0xc>
 800272e:	00b3      	lsls	r3, r6, #2
 8002730:	58eb      	ldr	r3, [r5, r3]
 8002732:	4798      	blx	r3
 8002734:	3601      	adds	r6, #1
 8002736:	e7f2      	b.n	800271e <__libc_init_array+0x1e>
 8002738:	08003538 	.word	0x08003538
 800273c:	08003538 	.word	0x08003538
 8002740:	0800353c 	.word	0x0800353c
 8002744:	08003538 	.word	0x08003538

08002748 <__retarget_lock_init_recursive>:
 8002748:	4770      	bx	lr

0800274a <__retarget_lock_acquire_recursive>:
 800274a:	4770      	bx	lr

0800274c <__retarget_lock_release_recursive>:
 800274c:	4770      	bx	lr
	...

08002750 <__assert_func>:
 8002750:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002752:	0014      	movs	r4, r2
 8002754:	001a      	movs	r2, r3
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <__assert_func+0x2c>)
 8002758:	0005      	movs	r5, r0
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	000e      	movs	r6, r1
 800275e:	68d8      	ldr	r0, [r3, #12]
 8002760:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <__assert_func+0x30>)
 8002762:	2c00      	cmp	r4, #0
 8002764:	d101      	bne.n	800276a <__assert_func+0x1a>
 8002766:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <__assert_func+0x34>)
 8002768:	001c      	movs	r4, r3
 800276a:	4907      	ldr	r1, [pc, #28]	@ (8002788 <__assert_func+0x38>)
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	9402      	str	r4, [sp, #8]
 8002770:	002b      	movs	r3, r5
 8002772:	9600      	str	r6, [sp, #0]
 8002774:	f000 fc84 	bl	8003080 <fiprintf>
 8002778:	f000 fd3f 	bl	80031fa <abort>
 800277c:	20000018 	.word	0x20000018
 8002780:	080033c5 	.word	0x080033c5
 8002784:	08003400 	.word	0x08003400
 8002788:	080033d2 	.word	0x080033d2

0800278c <_free_r>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	0005      	movs	r5, r0
 8002790:	1e0c      	subs	r4, r1, #0
 8002792:	d010      	beq.n	80027b6 <_free_r+0x2a>
 8002794:	3c04      	subs	r4, #4
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	da00      	bge.n	800279e <_free_r+0x12>
 800279c:	18e4      	adds	r4, r4, r3
 800279e:	0028      	movs	r0, r5
 80027a0:	f000 f8ea 	bl	8002978 <__malloc_lock>
 80027a4:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <_free_r+0x90>)
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <_free_r+0x2c>
 80027ac:	6063      	str	r3, [r4, #4]
 80027ae:	6014      	str	r4, [r2, #0]
 80027b0:	0028      	movs	r0, r5
 80027b2:	f000 f8e9 	bl	8002988 <__malloc_unlock>
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	42a3      	cmp	r3, r4
 80027ba:	d908      	bls.n	80027ce <_free_r+0x42>
 80027bc:	6820      	ldr	r0, [r4, #0]
 80027be:	1821      	adds	r1, r4, r0
 80027c0:	428b      	cmp	r3, r1
 80027c2:	d1f3      	bne.n	80027ac <_free_r+0x20>
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	1809      	adds	r1, r1, r0
 80027ca:	6021      	str	r1, [r4, #0]
 80027cc:	e7ee      	b.n	80027ac <_free_r+0x20>
 80027ce:	001a      	movs	r2, r3
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <_free_r+0x4e>
 80027d6:	42a3      	cmp	r3, r4
 80027d8:	d9f9      	bls.n	80027ce <_free_r+0x42>
 80027da:	6811      	ldr	r1, [r2, #0]
 80027dc:	1850      	adds	r0, r2, r1
 80027de:	42a0      	cmp	r0, r4
 80027e0:	d10b      	bne.n	80027fa <_free_r+0x6e>
 80027e2:	6820      	ldr	r0, [r4, #0]
 80027e4:	1809      	adds	r1, r1, r0
 80027e6:	1850      	adds	r0, r2, r1
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	4283      	cmp	r3, r0
 80027ec:	d1e0      	bne.n	80027b0 <_free_r+0x24>
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	1841      	adds	r1, r0, r1
 80027f4:	6011      	str	r1, [r2, #0]
 80027f6:	6053      	str	r3, [r2, #4]
 80027f8:	e7da      	b.n	80027b0 <_free_r+0x24>
 80027fa:	42a0      	cmp	r0, r4
 80027fc:	d902      	bls.n	8002804 <_free_r+0x78>
 80027fe:	230c      	movs	r3, #12
 8002800:	602b      	str	r3, [r5, #0]
 8002802:	e7d5      	b.n	80027b0 <_free_r+0x24>
 8002804:	6820      	ldr	r0, [r4, #0]
 8002806:	1821      	adds	r1, r4, r0
 8002808:	428b      	cmp	r3, r1
 800280a:	d103      	bne.n	8002814 <_free_r+0x88>
 800280c:	6819      	ldr	r1, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	1809      	adds	r1, r1, r0
 8002812:	6021      	str	r1, [r4, #0]
 8002814:	6063      	str	r3, [r4, #4]
 8002816:	6054      	str	r4, [r2, #4]
 8002818:	e7ca      	b.n	80027b0 <_free_r+0x24>
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	200003e8 	.word	0x200003e8

08002820 <malloc>:
 8002820:	b510      	push	{r4, lr}
 8002822:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <malloc+0x10>)
 8002824:	0001      	movs	r1, r0
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	f000 f826 	bl	8002878 <_malloc_r>
 800282c:	bd10      	pop	{r4, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	20000018 	.word	0x20000018

08002834 <sbrk_aligned>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	4e0f      	ldr	r6, [pc, #60]	@ (8002874 <sbrk_aligned+0x40>)
 8002838:	000d      	movs	r5, r1
 800283a:	6831      	ldr	r1, [r6, #0]
 800283c:	0004      	movs	r4, r0
 800283e:	2900      	cmp	r1, #0
 8002840:	d102      	bne.n	8002848 <sbrk_aligned+0x14>
 8002842:	f000 fcbd 	bl	80031c0 <_sbrk_r>
 8002846:	6030      	str	r0, [r6, #0]
 8002848:	0029      	movs	r1, r5
 800284a:	0020      	movs	r0, r4
 800284c:	f000 fcb8 	bl	80031c0 <_sbrk_r>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d103      	bne.n	800285c <sbrk_aligned+0x28>
 8002854:	2501      	movs	r5, #1
 8002856:	426d      	negs	r5, r5
 8002858:	0028      	movs	r0, r5
 800285a:	bd70      	pop	{r4, r5, r6, pc}
 800285c:	2303      	movs	r3, #3
 800285e:	1cc5      	adds	r5, r0, #3
 8002860:	439d      	bics	r5, r3
 8002862:	42a8      	cmp	r0, r5
 8002864:	d0f8      	beq.n	8002858 <sbrk_aligned+0x24>
 8002866:	1a29      	subs	r1, r5, r0
 8002868:	0020      	movs	r0, r4
 800286a:	f000 fca9 	bl	80031c0 <_sbrk_r>
 800286e:	3001      	adds	r0, #1
 8002870:	d1f2      	bne.n	8002858 <sbrk_aligned+0x24>
 8002872:	e7ef      	b.n	8002854 <sbrk_aligned+0x20>
 8002874:	200003e4 	.word	0x200003e4

08002878 <_malloc_r>:
 8002878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800287a:	2203      	movs	r2, #3
 800287c:	1ccb      	adds	r3, r1, #3
 800287e:	4393      	bics	r3, r2
 8002880:	3308      	adds	r3, #8
 8002882:	0005      	movs	r5, r0
 8002884:	001f      	movs	r7, r3
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d234      	bcs.n	80028f4 <_malloc_r+0x7c>
 800288a:	270c      	movs	r7, #12
 800288c:	42b9      	cmp	r1, r7
 800288e:	d833      	bhi.n	80028f8 <_malloc_r+0x80>
 8002890:	0028      	movs	r0, r5
 8002892:	f000 f871 	bl	8002978 <__malloc_lock>
 8002896:	4e37      	ldr	r6, [pc, #220]	@ (8002974 <_malloc_r+0xfc>)
 8002898:	6833      	ldr	r3, [r6, #0]
 800289a:	001c      	movs	r4, r3
 800289c:	2c00      	cmp	r4, #0
 800289e:	d12f      	bne.n	8002900 <_malloc_r+0x88>
 80028a0:	0039      	movs	r1, r7
 80028a2:	0028      	movs	r0, r5
 80028a4:	f7ff ffc6 	bl	8002834 <sbrk_aligned>
 80028a8:	0004      	movs	r4, r0
 80028aa:	1c43      	adds	r3, r0, #1
 80028ac:	d15f      	bne.n	800296e <_malloc_r+0xf6>
 80028ae:	6834      	ldr	r4, [r6, #0]
 80028b0:	9400      	str	r4, [sp, #0]
 80028b2:	9b00      	ldr	r3, [sp, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d14a      	bne.n	800294e <_malloc_r+0xd6>
 80028b8:	2c00      	cmp	r4, #0
 80028ba:	d052      	beq.n	8002962 <_malloc_r+0xea>
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	0028      	movs	r0, r5
 80028c0:	18e3      	adds	r3, r4, r3
 80028c2:	9900      	ldr	r1, [sp, #0]
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	f000 fc7b 	bl	80031c0 <_sbrk_r>
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	4283      	cmp	r3, r0
 80028ce:	d148      	bne.n	8002962 <_malloc_r+0xea>
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	0028      	movs	r0, r5
 80028d4:	1aff      	subs	r7, r7, r3
 80028d6:	0039      	movs	r1, r7
 80028d8:	f7ff ffac 	bl	8002834 <sbrk_aligned>
 80028dc:	3001      	adds	r0, #1
 80028de:	d040      	beq.n	8002962 <_malloc_r+0xea>
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	19db      	adds	r3, r3, r7
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	6833      	ldr	r3, [r6, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	2a00      	cmp	r2, #0
 80028ec:	d133      	bne.n	8002956 <_malloc_r+0xde>
 80028ee:	9b00      	ldr	r3, [sp, #0]
 80028f0:	6033      	str	r3, [r6, #0]
 80028f2:	e019      	b.n	8002928 <_malloc_r+0xb0>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dac9      	bge.n	800288c <_malloc_r+0x14>
 80028f8:	230c      	movs	r3, #12
 80028fa:	602b      	str	r3, [r5, #0]
 80028fc:	2000      	movs	r0, #0
 80028fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002900:	6821      	ldr	r1, [r4, #0]
 8002902:	1bc9      	subs	r1, r1, r7
 8002904:	d420      	bmi.n	8002948 <_malloc_r+0xd0>
 8002906:	290b      	cmp	r1, #11
 8002908:	d90a      	bls.n	8002920 <_malloc_r+0xa8>
 800290a:	19e2      	adds	r2, r4, r7
 800290c:	6027      	str	r7, [r4, #0]
 800290e:	42a3      	cmp	r3, r4
 8002910:	d104      	bne.n	800291c <_malloc_r+0xa4>
 8002912:	6032      	str	r2, [r6, #0]
 8002914:	6863      	ldr	r3, [r4, #4]
 8002916:	6011      	str	r1, [r2, #0]
 8002918:	6053      	str	r3, [r2, #4]
 800291a:	e005      	b.n	8002928 <_malloc_r+0xb0>
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e7f9      	b.n	8002914 <_malloc_r+0x9c>
 8002920:	6862      	ldr	r2, [r4, #4]
 8002922:	42a3      	cmp	r3, r4
 8002924:	d10e      	bne.n	8002944 <_malloc_r+0xcc>
 8002926:	6032      	str	r2, [r6, #0]
 8002928:	0028      	movs	r0, r5
 800292a:	f000 f82d 	bl	8002988 <__malloc_unlock>
 800292e:	0020      	movs	r0, r4
 8002930:	2207      	movs	r2, #7
 8002932:	300b      	adds	r0, #11
 8002934:	1d23      	adds	r3, r4, #4
 8002936:	4390      	bics	r0, r2
 8002938:	1ac2      	subs	r2, r0, r3
 800293a:	4298      	cmp	r0, r3
 800293c:	d0df      	beq.n	80028fe <_malloc_r+0x86>
 800293e:	1a1b      	subs	r3, r3, r0
 8002940:	50a3      	str	r3, [r4, r2]
 8002942:	e7dc      	b.n	80028fe <_malloc_r+0x86>
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	e7ef      	b.n	8002928 <_malloc_r+0xb0>
 8002948:	0023      	movs	r3, r4
 800294a:	6864      	ldr	r4, [r4, #4]
 800294c:	e7a6      	b.n	800289c <_malloc_r+0x24>
 800294e:	9c00      	ldr	r4, [sp, #0]
 8002950:	6863      	ldr	r3, [r4, #4]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	e7ad      	b.n	80028b2 <_malloc_r+0x3a>
 8002956:	001a      	movs	r2, r3
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	42a3      	cmp	r3, r4
 800295c:	d1fb      	bne.n	8002956 <_malloc_r+0xde>
 800295e:	2300      	movs	r3, #0
 8002960:	e7da      	b.n	8002918 <_malloc_r+0xa0>
 8002962:	230c      	movs	r3, #12
 8002964:	0028      	movs	r0, r5
 8002966:	602b      	str	r3, [r5, #0]
 8002968:	f000 f80e 	bl	8002988 <__malloc_unlock>
 800296c:	e7c6      	b.n	80028fc <_malloc_r+0x84>
 800296e:	6007      	str	r7, [r0, #0]
 8002970:	e7da      	b.n	8002928 <_malloc_r+0xb0>
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	200003e8 	.word	0x200003e8

08002978 <__malloc_lock>:
 8002978:	b510      	push	{r4, lr}
 800297a:	4802      	ldr	r0, [pc, #8]	@ (8002984 <__malloc_lock+0xc>)
 800297c:	f7ff fee5 	bl	800274a <__retarget_lock_acquire_recursive>
 8002980:	bd10      	pop	{r4, pc}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	200003e0 	.word	0x200003e0

08002988 <__malloc_unlock>:
 8002988:	b510      	push	{r4, lr}
 800298a:	4802      	ldr	r0, [pc, #8]	@ (8002994 <__malloc_unlock+0xc>)
 800298c:	f7ff fede 	bl	800274c <__retarget_lock_release_recursive>
 8002990:	bd10      	pop	{r4, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	200003e0 	.word	0x200003e0

08002998 <__sfputc_r>:
 8002998:	6893      	ldr	r3, [r2, #8]
 800299a:	b510      	push	{r4, lr}
 800299c:	3b01      	subs	r3, #1
 800299e:	6093      	str	r3, [r2, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da04      	bge.n	80029ae <__sfputc_r+0x16>
 80029a4:	6994      	ldr	r4, [r2, #24]
 80029a6:	42a3      	cmp	r3, r4
 80029a8:	db07      	blt.n	80029ba <__sfputc_r+0x22>
 80029aa:	290a      	cmp	r1, #10
 80029ac:	d005      	beq.n	80029ba <__sfputc_r+0x22>
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	1c58      	adds	r0, r3, #1
 80029b2:	6010      	str	r0, [r2, #0]
 80029b4:	7019      	strb	r1, [r3, #0]
 80029b6:	0008      	movs	r0, r1
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	f7ff fd2b 	bl	8002414 <__swbuf_r>
 80029be:	0001      	movs	r1, r0
 80029c0:	e7f9      	b.n	80029b6 <__sfputc_r+0x1e>

080029c2 <__sfputs_r>:
 80029c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c4:	0006      	movs	r6, r0
 80029c6:	000f      	movs	r7, r1
 80029c8:	0014      	movs	r4, r2
 80029ca:	18d5      	adds	r5, r2, r3
 80029cc:	42ac      	cmp	r4, r5
 80029ce:	d101      	bne.n	80029d4 <__sfputs_r+0x12>
 80029d0:	2000      	movs	r0, #0
 80029d2:	e007      	b.n	80029e4 <__sfputs_r+0x22>
 80029d4:	7821      	ldrb	r1, [r4, #0]
 80029d6:	003a      	movs	r2, r7
 80029d8:	0030      	movs	r0, r6
 80029da:	f7ff ffdd 	bl	8002998 <__sfputc_r>
 80029de:	3401      	adds	r4, #1
 80029e0:	1c43      	adds	r3, r0, #1
 80029e2:	d1f3      	bne.n	80029cc <__sfputs_r+0xa>
 80029e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029e8 <_vfiprintf_r>:
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ea:	b0a1      	sub	sp, #132	@ 0x84
 80029ec:	000f      	movs	r7, r1
 80029ee:	0015      	movs	r5, r2
 80029f0:	001e      	movs	r6, r3
 80029f2:	9003      	str	r0, [sp, #12]
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d004      	beq.n	8002a02 <_vfiprintf_r+0x1a>
 80029f8:	6a03      	ldr	r3, [r0, #32]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <_vfiprintf_r+0x1a>
 80029fe:	f7ff fc19 	bl	8002234 <__sinit>
 8002a02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a04:	07db      	lsls	r3, r3, #31
 8002a06:	d405      	bmi.n	8002a14 <_vfiprintf_r+0x2c>
 8002a08:	89bb      	ldrh	r3, [r7, #12]
 8002a0a:	059b      	lsls	r3, r3, #22
 8002a0c:	d402      	bmi.n	8002a14 <_vfiprintf_r+0x2c>
 8002a0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002a10:	f7ff fe9b 	bl	800274a <__retarget_lock_acquire_recursive>
 8002a14:	89bb      	ldrh	r3, [r7, #12]
 8002a16:	071b      	lsls	r3, r3, #28
 8002a18:	d502      	bpl.n	8002a20 <_vfiprintf_r+0x38>
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d113      	bne.n	8002a48 <_vfiprintf_r+0x60>
 8002a20:	0039      	movs	r1, r7
 8002a22:	9803      	ldr	r0, [sp, #12]
 8002a24:	f7ff fd38 	bl	8002498 <__swsetup_r>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d00d      	beq.n	8002a48 <_vfiprintf_r+0x60>
 8002a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a2e:	07db      	lsls	r3, r3, #31
 8002a30:	d503      	bpl.n	8002a3a <_vfiprintf_r+0x52>
 8002a32:	2001      	movs	r0, #1
 8002a34:	4240      	negs	r0, r0
 8002a36:	b021      	add	sp, #132	@ 0x84
 8002a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a3a:	89bb      	ldrh	r3, [r7, #12]
 8002a3c:	059b      	lsls	r3, r3, #22
 8002a3e:	d4f8      	bmi.n	8002a32 <_vfiprintf_r+0x4a>
 8002a40:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002a42:	f7ff fe83 	bl	800274c <__retarget_lock_release_recursive>
 8002a46:	e7f4      	b.n	8002a32 <_vfiprintf_r+0x4a>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	ac08      	add	r4, sp, #32
 8002a4c:	6163      	str	r3, [r4, #20]
 8002a4e:	3320      	adds	r3, #32
 8002a50:	7663      	strb	r3, [r4, #25]
 8002a52:	3310      	adds	r3, #16
 8002a54:	76a3      	strb	r3, [r4, #26]
 8002a56:	9607      	str	r6, [sp, #28]
 8002a58:	002e      	movs	r6, r5
 8002a5a:	7833      	ldrb	r3, [r6, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <_vfiprintf_r+0x7c>
 8002a60:	2b25      	cmp	r3, #37	@ 0x25
 8002a62:	d148      	bne.n	8002af6 <_vfiprintf_r+0x10e>
 8002a64:	1b73      	subs	r3, r6, r5
 8002a66:	9305      	str	r3, [sp, #20]
 8002a68:	42ae      	cmp	r6, r5
 8002a6a:	d00b      	beq.n	8002a84 <_vfiprintf_r+0x9c>
 8002a6c:	002a      	movs	r2, r5
 8002a6e:	0039      	movs	r1, r7
 8002a70:	9803      	ldr	r0, [sp, #12]
 8002a72:	f7ff ffa6 	bl	80029c2 <__sfputs_r>
 8002a76:	3001      	adds	r0, #1
 8002a78:	d100      	bne.n	8002a7c <_vfiprintf_r+0x94>
 8002a7a:	e0ae      	b.n	8002bda <_vfiprintf_r+0x1f2>
 8002a7c:	6963      	ldr	r3, [r4, #20]
 8002a7e:	9a05      	ldr	r2, [sp, #20]
 8002a80:	189b      	adds	r3, r3, r2
 8002a82:	6163      	str	r3, [r4, #20]
 8002a84:	7833      	ldrb	r3, [r6, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d100      	bne.n	8002a8c <_vfiprintf_r+0xa4>
 8002a8a:	e0a6      	b.n	8002bda <_vfiprintf_r+0x1f2>
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4252      	negs	r2, r2
 8002a92:	6062      	str	r2, [r4, #4]
 8002a94:	a904      	add	r1, sp, #16
 8002a96:	3254      	adds	r2, #84	@ 0x54
 8002a98:	1852      	adds	r2, r2, r1
 8002a9a:	1c75      	adds	r5, r6, #1
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	60e3      	str	r3, [r4, #12]
 8002aa0:	60a3      	str	r3, [r4, #8]
 8002aa2:	7013      	strb	r3, [r2, #0]
 8002aa4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002aa6:	4b59      	ldr	r3, [pc, #356]	@ (8002c0c <_vfiprintf_r+0x224>)
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	0018      	movs	r0, r3
 8002aac:	7829      	ldrb	r1, [r5, #0]
 8002aae:	9305      	str	r3, [sp, #20]
 8002ab0:	f000 fb98 	bl	80031e4 <memchr>
 8002ab4:	1c6e      	adds	r6, r5, #1
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d11f      	bne.n	8002afa <_vfiprintf_r+0x112>
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	06d3      	lsls	r3, r2, #27
 8002abe:	d504      	bpl.n	8002aca <_vfiprintf_r+0xe2>
 8002ac0:	2353      	movs	r3, #83	@ 0x53
 8002ac2:	a904      	add	r1, sp, #16
 8002ac4:	185b      	adds	r3, r3, r1
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	7019      	strb	r1, [r3, #0]
 8002aca:	0713      	lsls	r3, r2, #28
 8002acc:	d504      	bpl.n	8002ad8 <_vfiprintf_r+0xf0>
 8002ace:	2353      	movs	r3, #83	@ 0x53
 8002ad0:	a904      	add	r1, sp, #16
 8002ad2:	185b      	adds	r3, r3, r1
 8002ad4:	212b      	movs	r1, #43	@ 0x2b
 8002ad6:	7019      	strb	r1, [r3, #0]
 8002ad8:	782b      	ldrb	r3, [r5, #0]
 8002ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8002adc:	d016      	beq.n	8002b0c <_vfiprintf_r+0x124>
 8002ade:	002e      	movs	r6, r5
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	200a      	movs	r0, #10
 8002ae4:	68e3      	ldr	r3, [r4, #12]
 8002ae6:	7832      	ldrb	r2, [r6, #0]
 8002ae8:	1c75      	adds	r5, r6, #1
 8002aea:	3a30      	subs	r2, #48	@ 0x30
 8002aec:	2a09      	cmp	r2, #9
 8002aee:	d950      	bls.n	8002b92 <_vfiprintf_r+0x1aa>
 8002af0:	2900      	cmp	r1, #0
 8002af2:	d111      	bne.n	8002b18 <_vfiprintf_r+0x130>
 8002af4:	e017      	b.n	8002b26 <_vfiprintf_r+0x13e>
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7af      	b.n	8002a5a <_vfiprintf_r+0x72>
 8002afa:	9b05      	ldr	r3, [sp, #20]
 8002afc:	6822      	ldr	r2, [r4, #0]
 8002afe:	1ac0      	subs	r0, r0, r3
 8002b00:	2301      	movs	r3, #1
 8002b02:	4083      	lsls	r3, r0
 8002b04:	4313      	orrs	r3, r2
 8002b06:	0035      	movs	r5, r6
 8002b08:	6023      	str	r3, [r4, #0]
 8002b0a:	e7cc      	b.n	8002aa6 <_vfiprintf_r+0xbe>
 8002b0c:	9b07      	ldr	r3, [sp, #28]
 8002b0e:	1d19      	adds	r1, r3, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	9107      	str	r1, [sp, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	db01      	blt.n	8002b1c <_vfiprintf_r+0x134>
 8002b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002b1a:	e004      	b.n	8002b26 <_vfiprintf_r+0x13e>
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	60e3      	str	r3, [r4, #12]
 8002b20:	2302      	movs	r3, #2
 8002b22:	4313      	orrs	r3, r2
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	7833      	ldrb	r3, [r6, #0]
 8002b28:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b2a:	d10c      	bne.n	8002b46 <_vfiprintf_r+0x15e>
 8002b2c:	7873      	ldrb	r3, [r6, #1]
 8002b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b30:	d134      	bne.n	8002b9c <_vfiprintf_r+0x1b4>
 8002b32:	9b07      	ldr	r3, [sp, #28]
 8002b34:	3602      	adds	r6, #2
 8002b36:	1d1a      	adds	r2, r3, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	9207      	str	r2, [sp, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	da01      	bge.n	8002b44 <_vfiprintf_r+0x15c>
 8002b40:	2301      	movs	r3, #1
 8002b42:	425b      	negs	r3, r3
 8002b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b46:	4d32      	ldr	r5, [pc, #200]	@ (8002c10 <_vfiprintf_r+0x228>)
 8002b48:	2203      	movs	r2, #3
 8002b4a:	0028      	movs	r0, r5
 8002b4c:	7831      	ldrb	r1, [r6, #0]
 8002b4e:	f000 fb49 	bl	80031e4 <memchr>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d006      	beq.n	8002b64 <_vfiprintf_r+0x17c>
 8002b56:	2340      	movs	r3, #64	@ 0x40
 8002b58:	1b40      	subs	r0, r0, r5
 8002b5a:	4083      	lsls	r3, r0
 8002b5c:	6822      	ldr	r2, [r4, #0]
 8002b5e:	3601      	adds	r6, #1
 8002b60:	4313      	orrs	r3, r2
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	7831      	ldrb	r1, [r6, #0]
 8002b66:	2206      	movs	r2, #6
 8002b68:	482a      	ldr	r0, [pc, #168]	@ (8002c14 <_vfiprintf_r+0x22c>)
 8002b6a:	1c75      	adds	r5, r6, #1
 8002b6c:	7621      	strb	r1, [r4, #24]
 8002b6e:	f000 fb39 	bl	80031e4 <memchr>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d040      	beq.n	8002bf8 <_vfiprintf_r+0x210>
 8002b76:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <_vfiprintf_r+0x230>)
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d122      	bne.n	8002bc2 <_vfiprintf_r+0x1da>
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	9b07      	ldr	r3, [sp, #28]
 8002b80:	3307      	adds	r3, #7
 8002b82:	4393      	bics	r3, r2
 8002b84:	3308      	adds	r3, #8
 8002b86:	9307      	str	r3, [sp, #28]
 8002b88:	6963      	ldr	r3, [r4, #20]
 8002b8a:	9a04      	ldr	r2, [sp, #16]
 8002b8c:	189b      	adds	r3, r3, r2
 8002b8e:	6163      	str	r3, [r4, #20]
 8002b90:	e762      	b.n	8002a58 <_vfiprintf_r+0x70>
 8002b92:	4343      	muls	r3, r0
 8002b94:	002e      	movs	r6, r5
 8002b96:	2101      	movs	r1, #1
 8002b98:	189b      	adds	r3, r3, r2
 8002b9a:	e7a4      	b.n	8002ae6 <_vfiprintf_r+0xfe>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	200a      	movs	r0, #10
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	6063      	str	r3, [r4, #4]
 8002ba6:	7832      	ldrb	r2, [r6, #0]
 8002ba8:	1c75      	adds	r5, r6, #1
 8002baa:	3a30      	subs	r2, #48	@ 0x30
 8002bac:	2a09      	cmp	r2, #9
 8002bae:	d903      	bls.n	8002bb8 <_vfiprintf_r+0x1d0>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0c8      	beq.n	8002b46 <_vfiprintf_r+0x15e>
 8002bb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8002bb6:	e7c6      	b.n	8002b46 <_vfiprintf_r+0x15e>
 8002bb8:	4341      	muls	r1, r0
 8002bba:	002e      	movs	r6, r5
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	1889      	adds	r1, r1, r2
 8002bc0:	e7f1      	b.n	8002ba6 <_vfiprintf_r+0x1be>
 8002bc2:	aa07      	add	r2, sp, #28
 8002bc4:	9200      	str	r2, [sp, #0]
 8002bc6:	0021      	movs	r1, r4
 8002bc8:	003a      	movs	r2, r7
 8002bca:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <_vfiprintf_r+0x234>)
 8002bcc:	9803      	ldr	r0, [sp, #12]
 8002bce:	e000      	b.n	8002bd2 <_vfiprintf_r+0x1ea>
 8002bd0:	bf00      	nop
 8002bd2:	9004      	str	r0, [sp, #16]
 8002bd4:	9b04      	ldr	r3, [sp, #16]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	d1d6      	bne.n	8002b88 <_vfiprintf_r+0x1a0>
 8002bda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bdc:	07db      	lsls	r3, r3, #31
 8002bde:	d405      	bmi.n	8002bec <_vfiprintf_r+0x204>
 8002be0:	89bb      	ldrh	r3, [r7, #12]
 8002be2:	059b      	lsls	r3, r3, #22
 8002be4:	d402      	bmi.n	8002bec <_vfiprintf_r+0x204>
 8002be6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002be8:	f7ff fdb0 	bl	800274c <__retarget_lock_release_recursive>
 8002bec:	89bb      	ldrh	r3, [r7, #12]
 8002bee:	065b      	lsls	r3, r3, #25
 8002bf0:	d500      	bpl.n	8002bf4 <_vfiprintf_r+0x20c>
 8002bf2:	e71e      	b.n	8002a32 <_vfiprintf_r+0x4a>
 8002bf4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002bf6:	e71e      	b.n	8002a36 <_vfiprintf_r+0x4e>
 8002bf8:	aa07      	add	r2, sp, #28
 8002bfa:	9200      	str	r2, [sp, #0]
 8002bfc:	0021      	movs	r1, r4
 8002bfe:	003a      	movs	r2, r7
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <_vfiprintf_r+0x234>)
 8002c02:	9803      	ldr	r0, [sp, #12]
 8002c04:	f000 f87c 	bl	8002d00 <_printf_i>
 8002c08:	e7e3      	b.n	8002bd2 <_vfiprintf_r+0x1ea>
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	08003502 	.word	0x08003502
 8002c10:	08003508 	.word	0x08003508
 8002c14:	0800350c 	.word	0x0800350c
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	080029c3 	.word	0x080029c3

08002c20 <_printf_common>:
 8002c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c22:	0016      	movs	r6, r2
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	688a      	ldr	r2, [r1, #8]
 8002c28:	690b      	ldr	r3, [r1, #16]
 8002c2a:	000c      	movs	r4, r1
 8002c2c:	9000      	str	r0, [sp, #0]
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	da00      	bge.n	8002c34 <_printf_common+0x14>
 8002c32:	0013      	movs	r3, r2
 8002c34:	0022      	movs	r2, r4
 8002c36:	6033      	str	r3, [r6, #0]
 8002c38:	3243      	adds	r2, #67	@ 0x43
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	d001      	beq.n	8002c44 <_printf_common+0x24>
 8002c40:	3301      	adds	r3, #1
 8002c42:	6033      	str	r3, [r6, #0]
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	d502      	bpl.n	8002c50 <_printf_common+0x30>
 8002c4a:	6833      	ldr	r3, [r6, #0]
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	6033      	str	r3, [r6, #0]
 8002c50:	6822      	ldr	r2, [r4, #0]
 8002c52:	2306      	movs	r3, #6
 8002c54:	0015      	movs	r5, r2
 8002c56:	401d      	ands	r5, r3
 8002c58:	421a      	tst	r2, r3
 8002c5a:	d027      	beq.n	8002cac <_printf_common+0x8c>
 8002c5c:	0023      	movs	r3, r4
 8002c5e:	3343      	adds	r3, #67	@ 0x43
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	1e5a      	subs	r2, r3, #1
 8002c64:	4193      	sbcs	r3, r2
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	0692      	lsls	r2, r2, #26
 8002c6a:	d430      	bmi.n	8002cce <_printf_common+0xae>
 8002c6c:	0022      	movs	r2, r4
 8002c6e:	9901      	ldr	r1, [sp, #4]
 8002c70:	9800      	ldr	r0, [sp, #0]
 8002c72:	9d08      	ldr	r5, [sp, #32]
 8002c74:	3243      	adds	r2, #67	@ 0x43
 8002c76:	47a8      	blx	r5
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d025      	beq.n	8002cc8 <_printf_common+0xa8>
 8002c7c:	2206      	movs	r2, #6
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	2500      	movs	r5, #0
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d105      	bne.n	8002c94 <_printf_common+0x74>
 8002c88:	6833      	ldr	r3, [r6, #0]
 8002c8a:	68e5      	ldr	r5, [r4, #12]
 8002c8c:	1aed      	subs	r5, r5, r3
 8002c8e:	43eb      	mvns	r3, r5
 8002c90:	17db      	asrs	r3, r3, #31
 8002c92:	401d      	ands	r5, r3
 8002c94:	68a3      	ldr	r3, [r4, #8]
 8002c96:	6922      	ldr	r2, [r4, #16]
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	dd01      	ble.n	8002ca0 <_printf_common+0x80>
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	18ed      	adds	r5, r5, r3
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	42b5      	cmp	r5, r6
 8002ca4:	d120      	bne.n	8002ce8 <_printf_common+0xc8>
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	e010      	b.n	8002ccc <_printf_common+0xac>
 8002caa:	3501      	adds	r5, #1
 8002cac:	68e3      	ldr	r3, [r4, #12]
 8002cae:	6832      	ldr	r2, [r6, #0]
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	42ab      	cmp	r3, r5
 8002cb4:	ddd2      	ble.n	8002c5c <_printf_common+0x3c>
 8002cb6:	0022      	movs	r2, r4
 8002cb8:	2301      	movs	r3, #1
 8002cba:	9901      	ldr	r1, [sp, #4]
 8002cbc:	9800      	ldr	r0, [sp, #0]
 8002cbe:	9f08      	ldr	r7, [sp, #32]
 8002cc0:	3219      	adds	r2, #25
 8002cc2:	47b8      	blx	r7
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d1f0      	bne.n	8002caa <_printf_common+0x8a>
 8002cc8:	2001      	movs	r0, #1
 8002cca:	4240      	negs	r0, r0
 8002ccc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002cce:	2030      	movs	r0, #48	@ 0x30
 8002cd0:	18e1      	adds	r1, r4, r3
 8002cd2:	3143      	adds	r1, #67	@ 0x43
 8002cd4:	7008      	strb	r0, [r1, #0]
 8002cd6:	0021      	movs	r1, r4
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	3145      	adds	r1, #69	@ 0x45
 8002cdc:	7809      	ldrb	r1, [r1, #0]
 8002cde:	18a2      	adds	r2, r4, r2
 8002ce0:	3243      	adds	r2, #67	@ 0x43
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	7011      	strb	r1, [r2, #0]
 8002ce6:	e7c1      	b.n	8002c6c <_printf_common+0x4c>
 8002ce8:	0022      	movs	r2, r4
 8002cea:	2301      	movs	r3, #1
 8002cec:	9901      	ldr	r1, [sp, #4]
 8002cee:	9800      	ldr	r0, [sp, #0]
 8002cf0:	9f08      	ldr	r7, [sp, #32]
 8002cf2:	321a      	adds	r2, #26
 8002cf4:	47b8      	blx	r7
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	d0e6      	beq.n	8002cc8 <_printf_common+0xa8>
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7d1      	b.n	8002ca2 <_printf_common+0x82>
	...

08002d00 <_printf_i>:
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	b08b      	sub	sp, #44	@ 0x2c
 8002d04:	9206      	str	r2, [sp, #24]
 8002d06:	000a      	movs	r2, r1
 8002d08:	3243      	adds	r2, #67	@ 0x43
 8002d0a:	9307      	str	r3, [sp, #28]
 8002d0c:	9005      	str	r0, [sp, #20]
 8002d0e:	9203      	str	r2, [sp, #12]
 8002d10:	7e0a      	ldrb	r2, [r1, #24]
 8002d12:	000c      	movs	r4, r1
 8002d14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002d16:	2a78      	cmp	r2, #120	@ 0x78
 8002d18:	d809      	bhi.n	8002d2e <_printf_i+0x2e>
 8002d1a:	2a62      	cmp	r2, #98	@ 0x62
 8002d1c:	d80b      	bhi.n	8002d36 <_printf_i+0x36>
 8002d1e:	2a00      	cmp	r2, #0
 8002d20:	d100      	bne.n	8002d24 <_printf_i+0x24>
 8002d22:	e0bc      	b.n	8002e9e <_printf_i+0x19e>
 8002d24:	497b      	ldr	r1, [pc, #492]	@ (8002f14 <_printf_i+0x214>)
 8002d26:	9104      	str	r1, [sp, #16]
 8002d28:	2a58      	cmp	r2, #88	@ 0x58
 8002d2a:	d100      	bne.n	8002d2e <_printf_i+0x2e>
 8002d2c:	e090      	b.n	8002e50 <_printf_i+0x150>
 8002d2e:	0025      	movs	r5, r4
 8002d30:	3542      	adds	r5, #66	@ 0x42
 8002d32:	702a      	strb	r2, [r5, #0]
 8002d34:	e022      	b.n	8002d7c <_printf_i+0x7c>
 8002d36:	0010      	movs	r0, r2
 8002d38:	3863      	subs	r0, #99	@ 0x63
 8002d3a:	2815      	cmp	r0, #21
 8002d3c:	d8f7      	bhi.n	8002d2e <_printf_i+0x2e>
 8002d3e:	f7fd f9e3 	bl	8000108 <__gnu_thumb1_case_shi>
 8002d42:	0016      	.short	0x0016
 8002d44:	fff6001f 	.word	0xfff6001f
 8002d48:	fff6fff6 	.word	0xfff6fff6
 8002d4c:	001ffff6 	.word	0x001ffff6
 8002d50:	fff6fff6 	.word	0xfff6fff6
 8002d54:	fff6fff6 	.word	0xfff6fff6
 8002d58:	003600a1 	.word	0x003600a1
 8002d5c:	fff60080 	.word	0xfff60080
 8002d60:	00b2fff6 	.word	0x00b2fff6
 8002d64:	0036fff6 	.word	0x0036fff6
 8002d68:	fff6fff6 	.word	0xfff6fff6
 8002d6c:	0084      	.short	0x0084
 8002d6e:	0025      	movs	r5, r4
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	3542      	adds	r5, #66	@ 0x42
 8002d74:	1d11      	adds	r1, r2, #4
 8002d76:	6019      	str	r1, [r3, #0]
 8002d78:	6813      	ldr	r3, [r2, #0]
 8002d7a:	702b      	strb	r3, [r5, #0]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0a0      	b.n	8002ec2 <_printf_i+0x1c2>
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	6809      	ldr	r1, [r1, #0]
 8002d84:	1d02      	adds	r2, r0, #4
 8002d86:	060d      	lsls	r5, r1, #24
 8002d88:	d50b      	bpl.n	8002da2 <_printf_i+0xa2>
 8002d8a:	6806      	ldr	r6, [r0, #0]
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	2e00      	cmp	r6, #0
 8002d90:	da03      	bge.n	8002d9a <_printf_i+0x9a>
 8002d92:	232d      	movs	r3, #45	@ 0x2d
 8002d94:	9a03      	ldr	r2, [sp, #12]
 8002d96:	4276      	negs	r6, r6
 8002d98:	7013      	strb	r3, [r2, #0]
 8002d9a:	4b5e      	ldr	r3, [pc, #376]	@ (8002f14 <_printf_i+0x214>)
 8002d9c:	270a      	movs	r7, #10
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	e018      	b.n	8002dd4 <_printf_i+0xd4>
 8002da2:	6806      	ldr	r6, [r0, #0]
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	0649      	lsls	r1, r1, #25
 8002da8:	d5f1      	bpl.n	8002d8e <_printf_i+0x8e>
 8002daa:	b236      	sxth	r6, r6
 8002dac:	e7ef      	b.n	8002d8e <_printf_i+0x8e>
 8002dae:	6808      	ldr	r0, [r1, #0]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	c940      	ldmia	r1!, {r6}
 8002db4:	0605      	lsls	r5, r0, #24
 8002db6:	d402      	bmi.n	8002dbe <_printf_i+0xbe>
 8002db8:	0640      	lsls	r0, r0, #25
 8002dba:	d500      	bpl.n	8002dbe <_printf_i+0xbe>
 8002dbc:	b2b6      	uxth	r6, r6
 8002dbe:	6019      	str	r1, [r3, #0]
 8002dc0:	4b54      	ldr	r3, [pc, #336]	@ (8002f14 <_printf_i+0x214>)
 8002dc2:	270a      	movs	r7, #10
 8002dc4:	9304      	str	r3, [sp, #16]
 8002dc6:	2a6f      	cmp	r2, #111	@ 0x6f
 8002dc8:	d100      	bne.n	8002dcc <_printf_i+0xcc>
 8002dca:	3f02      	subs	r7, #2
 8002dcc:	0023      	movs	r3, r4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	3343      	adds	r3, #67	@ 0x43
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	60a3      	str	r3, [r4, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	db03      	blt.n	8002de4 <_printf_i+0xe4>
 8002ddc:	2104      	movs	r1, #4
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	438a      	bics	r2, r1
 8002de2:	6022      	str	r2, [r4, #0]
 8002de4:	2e00      	cmp	r6, #0
 8002de6:	d102      	bne.n	8002dee <_printf_i+0xee>
 8002de8:	9d03      	ldr	r5, [sp, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00c      	beq.n	8002e08 <_printf_i+0x108>
 8002dee:	9d03      	ldr	r5, [sp, #12]
 8002df0:	0030      	movs	r0, r6
 8002df2:	0039      	movs	r1, r7
 8002df4:	f7fd fa18 	bl	8000228 <__aeabi_uidivmod>
 8002df8:	9b04      	ldr	r3, [sp, #16]
 8002dfa:	3d01      	subs	r5, #1
 8002dfc:	5c5b      	ldrb	r3, [r3, r1]
 8002dfe:	702b      	strb	r3, [r5, #0]
 8002e00:	0033      	movs	r3, r6
 8002e02:	0006      	movs	r6, r0
 8002e04:	429f      	cmp	r7, r3
 8002e06:	d9f3      	bls.n	8002df0 <_printf_i+0xf0>
 8002e08:	2f08      	cmp	r7, #8
 8002e0a:	d109      	bne.n	8002e20 <_printf_i+0x120>
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	07db      	lsls	r3, r3, #31
 8002e10:	d506      	bpl.n	8002e20 <_printf_i+0x120>
 8002e12:	6862      	ldr	r2, [r4, #4]
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dc02      	bgt.n	8002e20 <_printf_i+0x120>
 8002e1a:	2330      	movs	r3, #48	@ 0x30
 8002e1c:	3d01      	subs	r5, #1
 8002e1e:	702b      	strb	r3, [r5, #0]
 8002e20:	9b03      	ldr	r3, [sp, #12]
 8002e22:	1b5b      	subs	r3, r3, r5
 8002e24:	6123      	str	r3, [r4, #16]
 8002e26:	9b07      	ldr	r3, [sp, #28]
 8002e28:	0021      	movs	r1, r4
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	9805      	ldr	r0, [sp, #20]
 8002e2e:	9b06      	ldr	r3, [sp, #24]
 8002e30:	aa09      	add	r2, sp, #36	@ 0x24
 8002e32:	f7ff fef5 	bl	8002c20 <_printf_common>
 8002e36:	3001      	adds	r0, #1
 8002e38:	d148      	bne.n	8002ecc <_printf_i+0x1cc>
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	4240      	negs	r0, r0
 8002e3e:	b00b      	add	sp, #44	@ 0x2c
 8002e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e42:	2220      	movs	r2, #32
 8002e44:	6809      	ldr	r1, [r1, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	6022      	str	r2, [r4, #0]
 8002e4a:	2278      	movs	r2, #120	@ 0x78
 8002e4c:	4932      	ldr	r1, [pc, #200]	@ (8002f18 <_printf_i+0x218>)
 8002e4e:	9104      	str	r1, [sp, #16]
 8002e50:	0021      	movs	r1, r4
 8002e52:	3145      	adds	r1, #69	@ 0x45
 8002e54:	700a      	strb	r2, [r1, #0]
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	6822      	ldr	r2, [r4, #0]
 8002e5a:	c940      	ldmia	r1!, {r6}
 8002e5c:	0610      	lsls	r0, r2, #24
 8002e5e:	d402      	bmi.n	8002e66 <_printf_i+0x166>
 8002e60:	0650      	lsls	r0, r2, #25
 8002e62:	d500      	bpl.n	8002e66 <_printf_i+0x166>
 8002e64:	b2b6      	uxth	r6, r6
 8002e66:	6019      	str	r1, [r3, #0]
 8002e68:	07d3      	lsls	r3, r2, #31
 8002e6a:	d502      	bpl.n	8002e72 <_printf_i+0x172>
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	6023      	str	r3, [r4, #0]
 8002e72:	2e00      	cmp	r6, #0
 8002e74:	d001      	beq.n	8002e7a <_printf_i+0x17a>
 8002e76:	2710      	movs	r7, #16
 8002e78:	e7a8      	b.n	8002dcc <_printf_i+0xcc>
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	4393      	bics	r3, r2
 8002e80:	6023      	str	r3, [r4, #0]
 8002e82:	e7f8      	b.n	8002e76 <_printf_i+0x176>
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	680d      	ldr	r5, [r1, #0]
 8002e88:	1d10      	adds	r0, r2, #4
 8002e8a:	6949      	ldr	r1, [r1, #20]
 8002e8c:	6018      	str	r0, [r3, #0]
 8002e8e:	6813      	ldr	r3, [r2, #0]
 8002e90:	062e      	lsls	r6, r5, #24
 8002e92:	d501      	bpl.n	8002e98 <_printf_i+0x198>
 8002e94:	6019      	str	r1, [r3, #0]
 8002e96:	e002      	b.n	8002e9e <_printf_i+0x19e>
 8002e98:	066d      	lsls	r5, r5, #25
 8002e9a:	d5fb      	bpl.n	8002e94 <_printf_i+0x194>
 8002e9c:	8019      	strh	r1, [r3, #0]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9d03      	ldr	r5, [sp, #12]
 8002ea2:	6123      	str	r3, [r4, #16]
 8002ea4:	e7bf      	b.n	8002e26 <_printf_i+0x126>
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	1d11      	adds	r1, r2, #4
 8002eaa:	6019      	str	r1, [r3, #0]
 8002eac:	6815      	ldr	r5, [r2, #0]
 8002eae:	2100      	movs	r1, #0
 8002eb0:	0028      	movs	r0, r5
 8002eb2:	6862      	ldr	r2, [r4, #4]
 8002eb4:	f000 f996 	bl	80031e4 <memchr>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d001      	beq.n	8002ec0 <_printf_i+0x1c0>
 8002ebc:	1b40      	subs	r0, r0, r5
 8002ebe:	6060      	str	r0, [r4, #4]
 8002ec0:	6863      	ldr	r3, [r4, #4]
 8002ec2:	6123      	str	r3, [r4, #16]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9a03      	ldr	r2, [sp, #12]
 8002ec8:	7013      	strb	r3, [r2, #0]
 8002eca:	e7ac      	b.n	8002e26 <_printf_i+0x126>
 8002ecc:	002a      	movs	r2, r5
 8002ece:	6923      	ldr	r3, [r4, #16]
 8002ed0:	9906      	ldr	r1, [sp, #24]
 8002ed2:	9805      	ldr	r0, [sp, #20]
 8002ed4:	9d07      	ldr	r5, [sp, #28]
 8002ed6:	47a8      	blx	r5
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d0ae      	beq.n	8002e3a <_printf_i+0x13a>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	079b      	lsls	r3, r3, #30
 8002ee0:	d415      	bmi.n	8002f0e <_printf_i+0x20e>
 8002ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ee4:	68e0      	ldr	r0, [r4, #12]
 8002ee6:	4298      	cmp	r0, r3
 8002ee8:	daa9      	bge.n	8002e3e <_printf_i+0x13e>
 8002eea:	0018      	movs	r0, r3
 8002eec:	e7a7      	b.n	8002e3e <_printf_i+0x13e>
 8002eee:	0022      	movs	r2, r4
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	9906      	ldr	r1, [sp, #24]
 8002ef4:	9805      	ldr	r0, [sp, #20]
 8002ef6:	9e07      	ldr	r6, [sp, #28]
 8002ef8:	3219      	adds	r2, #25
 8002efa:	47b0      	blx	r6
 8002efc:	3001      	adds	r0, #1
 8002efe:	d09c      	beq.n	8002e3a <_printf_i+0x13a>
 8002f00:	3501      	adds	r5, #1
 8002f02:	68e3      	ldr	r3, [r4, #12]
 8002f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	42ab      	cmp	r3, r5
 8002f0a:	dcf0      	bgt.n	8002eee <_printf_i+0x1ee>
 8002f0c:	e7e9      	b.n	8002ee2 <_printf_i+0x1e2>
 8002f0e:	2500      	movs	r5, #0
 8002f10:	e7f7      	b.n	8002f02 <_printf_i+0x202>
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	08003513 	.word	0x08003513
 8002f18:	08003524 	.word	0x08003524

08002f1c <__sflush_r>:
 8002f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f1e:	220c      	movs	r2, #12
 8002f20:	5e8b      	ldrsh	r3, [r1, r2]
 8002f22:	0005      	movs	r5, r0
 8002f24:	000c      	movs	r4, r1
 8002f26:	071a      	lsls	r2, r3, #28
 8002f28:	d456      	bmi.n	8002fd8 <__sflush_r+0xbc>
 8002f2a:	684a      	ldr	r2, [r1, #4]
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	dc02      	bgt.n	8002f36 <__sflush_r+0x1a>
 8002f30:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	dd4e      	ble.n	8002fd4 <__sflush_r+0xb8>
 8002f36:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002f38:	2f00      	cmp	r7, #0
 8002f3a:	d04b      	beq.n	8002fd4 <__sflush_r+0xb8>
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2080      	movs	r0, #128	@ 0x80
 8002f40:	682e      	ldr	r6, [r5, #0]
 8002f42:	602a      	str	r2, [r5, #0]
 8002f44:	001a      	movs	r2, r3
 8002f46:	0140      	lsls	r0, r0, #5
 8002f48:	6a21      	ldr	r1, [r4, #32]
 8002f4a:	4002      	ands	r2, r0
 8002f4c:	4203      	tst	r3, r0
 8002f4e:	d033      	beq.n	8002fb8 <__sflush_r+0x9c>
 8002f50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	075b      	lsls	r3, r3, #29
 8002f56:	d506      	bpl.n	8002f66 <__sflush_r+0x4a>
 8002f58:	6863      	ldr	r3, [r4, #4]
 8002f5a:	1ad2      	subs	r2, r2, r3
 8002f5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <__sflush_r+0x4a>
 8002f62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f64:	1ad2      	subs	r2, r2, r3
 8002f66:	2300      	movs	r3, #0
 8002f68:	0028      	movs	r0, r5
 8002f6a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002f6c:	6a21      	ldr	r1, [r4, #32]
 8002f6e:	47b8      	blx	r7
 8002f70:	89a2      	ldrh	r2, [r4, #12]
 8002f72:	1c43      	adds	r3, r0, #1
 8002f74:	d106      	bne.n	8002f84 <__sflush_r+0x68>
 8002f76:	6829      	ldr	r1, [r5, #0]
 8002f78:	291d      	cmp	r1, #29
 8002f7a:	d846      	bhi.n	800300a <__sflush_r+0xee>
 8002f7c:	4b29      	ldr	r3, [pc, #164]	@ (8003024 <__sflush_r+0x108>)
 8002f7e:	410b      	asrs	r3, r1
 8002f80:	07db      	lsls	r3, r3, #31
 8002f82:	d442      	bmi.n	800300a <__sflush_r+0xee>
 8002f84:	2300      	movs	r3, #0
 8002f86:	6063      	str	r3, [r4, #4]
 8002f88:	6923      	ldr	r3, [r4, #16]
 8002f8a:	6023      	str	r3, [r4, #0]
 8002f8c:	04d2      	lsls	r2, r2, #19
 8002f8e:	d505      	bpl.n	8002f9c <__sflush_r+0x80>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	d102      	bne.n	8002f9a <__sflush_r+0x7e>
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d100      	bne.n	8002f9c <__sflush_r+0x80>
 8002f9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f9e:	602e      	str	r6, [r5, #0]
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	d017      	beq.n	8002fd4 <__sflush_r+0xb8>
 8002fa4:	0023      	movs	r3, r4
 8002fa6:	3344      	adds	r3, #68	@ 0x44
 8002fa8:	4299      	cmp	r1, r3
 8002faa:	d002      	beq.n	8002fb2 <__sflush_r+0x96>
 8002fac:	0028      	movs	r0, r5
 8002fae:	f7ff fbed 	bl	800278c <_free_r>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fb6:	e00d      	b.n	8002fd4 <__sflush_r+0xb8>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	0028      	movs	r0, r5
 8002fbc:	47b8      	blx	r7
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d1c6      	bne.n	8002f52 <__sflush_r+0x36>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0c3      	beq.n	8002f52 <__sflush_r+0x36>
 8002fca:	2b1d      	cmp	r3, #29
 8002fcc:	d001      	beq.n	8002fd2 <__sflush_r+0xb6>
 8002fce:	2b16      	cmp	r3, #22
 8002fd0:	d11a      	bne.n	8003008 <__sflush_r+0xec>
 8002fd2:	602e      	str	r6, [r5, #0]
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	e01e      	b.n	8003016 <__sflush_r+0xfa>
 8002fd8:	690e      	ldr	r6, [r1, #16]
 8002fda:	2e00      	cmp	r6, #0
 8002fdc:	d0fa      	beq.n	8002fd4 <__sflush_r+0xb8>
 8002fde:	680f      	ldr	r7, [r1, #0]
 8002fe0:	600e      	str	r6, [r1, #0]
 8002fe2:	1bba      	subs	r2, r7, r6
 8002fe4:	9201      	str	r2, [sp, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	079b      	lsls	r3, r3, #30
 8002fea:	d100      	bne.n	8002fee <__sflush_r+0xd2>
 8002fec:	694a      	ldr	r2, [r1, #20]
 8002fee:	60a2      	str	r2, [r4, #8]
 8002ff0:	9b01      	ldr	r3, [sp, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	ddee      	ble.n	8002fd4 <__sflush_r+0xb8>
 8002ff6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002ff8:	0032      	movs	r2, r6
 8002ffa:	001f      	movs	r7, r3
 8002ffc:	0028      	movs	r0, r5
 8002ffe:	9b01      	ldr	r3, [sp, #4]
 8003000:	6a21      	ldr	r1, [r4, #32]
 8003002:	47b8      	blx	r7
 8003004:	2800      	cmp	r0, #0
 8003006:	dc07      	bgt.n	8003018 <__sflush_r+0xfc>
 8003008:	89a2      	ldrh	r2, [r4, #12]
 800300a:	2340      	movs	r3, #64	@ 0x40
 800300c:	2001      	movs	r0, #1
 800300e:	4313      	orrs	r3, r2
 8003010:	b21b      	sxth	r3, r3
 8003012:	81a3      	strh	r3, [r4, #12]
 8003014:	4240      	negs	r0, r0
 8003016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003018:	9b01      	ldr	r3, [sp, #4]
 800301a:	1836      	adds	r6, r6, r0
 800301c:	1a1b      	subs	r3, r3, r0
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	e7e6      	b.n	8002ff0 <__sflush_r+0xd4>
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	dfbffffe 	.word	0xdfbffffe

08003028 <_fflush_r>:
 8003028:	690b      	ldr	r3, [r1, #16]
 800302a:	b570      	push	{r4, r5, r6, lr}
 800302c:	0005      	movs	r5, r0
 800302e:	000c      	movs	r4, r1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <_fflush_r+0x12>
 8003034:	2500      	movs	r5, #0
 8003036:	0028      	movs	r0, r5
 8003038:	bd70      	pop	{r4, r5, r6, pc}
 800303a:	2800      	cmp	r0, #0
 800303c:	d004      	beq.n	8003048 <_fflush_r+0x20>
 800303e:	6a03      	ldr	r3, [r0, #32]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <_fflush_r+0x20>
 8003044:	f7ff f8f6 	bl	8002234 <__sinit>
 8003048:	220c      	movs	r2, #12
 800304a:	5ea3      	ldrsh	r3, [r4, r2]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f1      	beq.n	8003034 <_fflush_r+0xc>
 8003050:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003052:	07d2      	lsls	r2, r2, #31
 8003054:	d404      	bmi.n	8003060 <_fflush_r+0x38>
 8003056:	059b      	lsls	r3, r3, #22
 8003058:	d402      	bmi.n	8003060 <_fflush_r+0x38>
 800305a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800305c:	f7ff fb75 	bl	800274a <__retarget_lock_acquire_recursive>
 8003060:	0028      	movs	r0, r5
 8003062:	0021      	movs	r1, r4
 8003064:	f7ff ff5a 	bl	8002f1c <__sflush_r>
 8003068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800306a:	0005      	movs	r5, r0
 800306c:	07db      	lsls	r3, r3, #31
 800306e:	d4e2      	bmi.n	8003036 <_fflush_r+0xe>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	059b      	lsls	r3, r3, #22
 8003074:	d4df      	bmi.n	8003036 <_fflush_r+0xe>
 8003076:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003078:	f7ff fb68 	bl	800274c <__retarget_lock_release_recursive>
 800307c:	e7db      	b.n	8003036 <_fflush_r+0xe>
	...

08003080 <fiprintf>:
 8003080:	b40e      	push	{r1, r2, r3}
 8003082:	b517      	push	{r0, r1, r2, r4, lr}
 8003084:	4c05      	ldr	r4, [pc, #20]	@ (800309c <fiprintf+0x1c>)
 8003086:	ab05      	add	r3, sp, #20
 8003088:	cb04      	ldmia	r3!, {r2}
 800308a:	0001      	movs	r1, r0
 800308c:	6820      	ldr	r0, [r4, #0]
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	f7ff fcaa 	bl	80029e8 <_vfiprintf_r>
 8003094:	bc1e      	pop	{r1, r2, r3, r4}
 8003096:	bc08      	pop	{r3}
 8003098:	b003      	add	sp, #12
 800309a:	4718      	bx	r3
 800309c:	20000018 	.word	0x20000018

080030a0 <__swhatbuf_r>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	000e      	movs	r6, r1
 80030a4:	001d      	movs	r5, r3
 80030a6:	230e      	movs	r3, #14
 80030a8:	5ec9      	ldrsh	r1, [r1, r3]
 80030aa:	0014      	movs	r4, r2
 80030ac:	b096      	sub	sp, #88	@ 0x58
 80030ae:	2900      	cmp	r1, #0
 80030b0:	da0c      	bge.n	80030cc <__swhatbuf_r+0x2c>
 80030b2:	89b2      	ldrh	r2, [r6, #12]
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	0011      	movs	r1, r2
 80030b8:	4019      	ands	r1, r3
 80030ba:	421a      	tst	r2, r3
 80030bc:	d114      	bne.n	80030e8 <__swhatbuf_r+0x48>
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	2000      	movs	r0, #0
 80030c4:	6029      	str	r1, [r5, #0]
 80030c6:	6023      	str	r3, [r4, #0]
 80030c8:	b016      	add	sp, #88	@ 0x58
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	466a      	mov	r2, sp
 80030ce:	f000 f853 	bl	8003178 <_fstat_r>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	dbed      	blt.n	80030b2 <__swhatbuf_r+0x12>
 80030d6:	23f0      	movs	r3, #240	@ 0xf0
 80030d8:	9901      	ldr	r1, [sp, #4]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	4019      	ands	r1, r3
 80030de:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <__swhatbuf_r+0x50>)
 80030e0:	18c9      	adds	r1, r1, r3
 80030e2:	424b      	negs	r3, r1
 80030e4:	4159      	adcs	r1, r3
 80030e6:	e7ea      	b.n	80030be <__swhatbuf_r+0x1e>
 80030e8:	2100      	movs	r1, #0
 80030ea:	2340      	movs	r3, #64	@ 0x40
 80030ec:	e7e9      	b.n	80030c2 <__swhatbuf_r+0x22>
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	ffffe000 	.word	0xffffe000

080030f4 <__smakebuf_r>:
 80030f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f6:	2602      	movs	r6, #2
 80030f8:	898b      	ldrh	r3, [r1, #12]
 80030fa:	0005      	movs	r5, r0
 80030fc:	000c      	movs	r4, r1
 80030fe:	b085      	sub	sp, #20
 8003100:	4233      	tst	r3, r6
 8003102:	d007      	beq.n	8003114 <__smakebuf_r+0x20>
 8003104:	0023      	movs	r3, r4
 8003106:	3347      	adds	r3, #71	@ 0x47
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	6123      	str	r3, [r4, #16]
 800310c:	2301      	movs	r3, #1
 800310e:	6163      	str	r3, [r4, #20]
 8003110:	b005      	add	sp, #20
 8003112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003114:	ab03      	add	r3, sp, #12
 8003116:	aa02      	add	r2, sp, #8
 8003118:	f7ff ffc2 	bl	80030a0 <__swhatbuf_r>
 800311c:	9f02      	ldr	r7, [sp, #8]
 800311e:	9001      	str	r0, [sp, #4]
 8003120:	0039      	movs	r1, r7
 8003122:	0028      	movs	r0, r5
 8003124:	f7ff fba8 	bl	8002878 <_malloc_r>
 8003128:	2800      	cmp	r0, #0
 800312a:	d108      	bne.n	800313e <__smakebuf_r+0x4a>
 800312c:	220c      	movs	r2, #12
 800312e:	5ea3      	ldrsh	r3, [r4, r2]
 8003130:	059a      	lsls	r2, r3, #22
 8003132:	d4ed      	bmi.n	8003110 <__smakebuf_r+0x1c>
 8003134:	2203      	movs	r2, #3
 8003136:	4393      	bics	r3, r2
 8003138:	431e      	orrs	r6, r3
 800313a:	81a6      	strh	r6, [r4, #12]
 800313c:	e7e2      	b.n	8003104 <__smakebuf_r+0x10>
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	89a2      	ldrh	r2, [r4, #12]
 8003142:	6020      	str	r0, [r4, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	9b03      	ldr	r3, [sp, #12]
 800314a:	6120      	str	r0, [r4, #16]
 800314c:	6167      	str	r7, [r4, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <__smakebuf_r+0x78>
 8003152:	0028      	movs	r0, r5
 8003154:	230e      	movs	r3, #14
 8003156:	5ee1      	ldrsh	r1, [r4, r3]
 8003158:	f000 f820 	bl	800319c <_isatty_r>
 800315c:	2800      	cmp	r0, #0
 800315e:	d005      	beq.n	800316c <__smakebuf_r+0x78>
 8003160:	2303      	movs	r3, #3
 8003162:	89a2      	ldrh	r2, [r4, #12]
 8003164:	439a      	bics	r2, r3
 8003166:	3b02      	subs	r3, #2
 8003168:	4313      	orrs	r3, r2
 800316a:	81a3      	strh	r3, [r4, #12]
 800316c:	89a3      	ldrh	r3, [r4, #12]
 800316e:	9a01      	ldr	r2, [sp, #4]
 8003170:	4313      	orrs	r3, r2
 8003172:	81a3      	strh	r3, [r4, #12]
 8003174:	e7cc      	b.n	8003110 <__smakebuf_r+0x1c>
	...

08003178 <_fstat_r>:
 8003178:	2300      	movs	r3, #0
 800317a:	b570      	push	{r4, r5, r6, lr}
 800317c:	4d06      	ldr	r5, [pc, #24]	@ (8003198 <_fstat_r+0x20>)
 800317e:	0004      	movs	r4, r0
 8003180:	0008      	movs	r0, r1
 8003182:	0011      	movs	r1, r2
 8003184:	602b      	str	r3, [r5, #0]
 8003186:	f7fd fba7 	bl	80008d8 <_fstat>
 800318a:	1c43      	adds	r3, r0, #1
 800318c:	d103      	bne.n	8003196 <_fstat_r+0x1e>
 800318e:	682b      	ldr	r3, [r5, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d000      	beq.n	8003196 <_fstat_r+0x1e>
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	200003dc 	.word	0x200003dc

0800319c <_isatty_r>:
 800319c:	2300      	movs	r3, #0
 800319e:	b570      	push	{r4, r5, r6, lr}
 80031a0:	4d06      	ldr	r5, [pc, #24]	@ (80031bc <_isatty_r+0x20>)
 80031a2:	0004      	movs	r4, r0
 80031a4:	0008      	movs	r0, r1
 80031a6:	602b      	str	r3, [r5, #0]
 80031a8:	f7fd fba4 	bl	80008f4 <_isatty>
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	d103      	bne.n	80031b8 <_isatty_r+0x1c>
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d000      	beq.n	80031b8 <_isatty_r+0x1c>
 80031b6:	6023      	str	r3, [r4, #0]
 80031b8:	bd70      	pop	{r4, r5, r6, pc}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	200003dc 	.word	0x200003dc

080031c0 <_sbrk_r>:
 80031c0:	2300      	movs	r3, #0
 80031c2:	b570      	push	{r4, r5, r6, lr}
 80031c4:	4d06      	ldr	r5, [pc, #24]	@ (80031e0 <_sbrk_r+0x20>)
 80031c6:	0004      	movs	r4, r0
 80031c8:	0008      	movs	r0, r1
 80031ca:	602b      	str	r3, [r5, #0]
 80031cc:	f7fd fba6 	bl	800091c <_sbrk>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d103      	bne.n	80031dc <_sbrk_r+0x1c>
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d000      	beq.n	80031dc <_sbrk_r+0x1c>
 80031da:	6023      	str	r3, [r4, #0]
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	200003dc 	.word	0x200003dc

080031e4 <memchr>:
 80031e4:	b2c9      	uxtb	r1, r1
 80031e6:	1882      	adds	r2, r0, r2
 80031e8:	4290      	cmp	r0, r2
 80031ea:	d101      	bne.n	80031f0 <memchr+0xc>
 80031ec:	2000      	movs	r0, #0
 80031ee:	4770      	bx	lr
 80031f0:	7803      	ldrb	r3, [r0, #0]
 80031f2:	428b      	cmp	r3, r1
 80031f4:	d0fb      	beq.n	80031ee <memchr+0xa>
 80031f6:	3001      	adds	r0, #1
 80031f8:	e7f6      	b.n	80031e8 <memchr+0x4>

080031fa <abort>:
 80031fa:	2006      	movs	r0, #6
 80031fc:	b510      	push	{r4, lr}
 80031fe:	f000 f82d 	bl	800325c <raise>
 8003202:	2001      	movs	r0, #1
 8003204:	f7fd fb34 	bl	8000870 <_exit>

08003208 <_raise_r>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	0004      	movs	r4, r0
 800320c:	000d      	movs	r5, r1
 800320e:	291f      	cmp	r1, #31
 8003210:	d904      	bls.n	800321c <_raise_r+0x14>
 8003212:	2316      	movs	r3, #22
 8003214:	6003      	str	r3, [r0, #0]
 8003216:	2001      	movs	r0, #1
 8003218:	4240      	negs	r0, r0
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <_raise_r+0x24>
 8003222:	008a      	lsls	r2, r1, #2
 8003224:	189b      	adds	r3, r3, r2
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2a00      	cmp	r2, #0
 800322a:	d108      	bne.n	800323e <_raise_r+0x36>
 800322c:	0020      	movs	r0, r4
 800322e:	f000 f831 	bl	8003294 <_getpid_r>
 8003232:	002a      	movs	r2, r5
 8003234:	0001      	movs	r1, r0
 8003236:	0020      	movs	r0, r4
 8003238:	f000 f81a 	bl	8003270 <_kill_r>
 800323c:	e7ed      	b.n	800321a <_raise_r+0x12>
 800323e:	2a01      	cmp	r2, #1
 8003240:	d009      	beq.n	8003256 <_raise_r+0x4e>
 8003242:	1c51      	adds	r1, r2, #1
 8003244:	d103      	bne.n	800324e <_raise_r+0x46>
 8003246:	2316      	movs	r3, #22
 8003248:	6003      	str	r3, [r0, #0]
 800324a:	2001      	movs	r0, #1
 800324c:	e7e5      	b.n	800321a <_raise_r+0x12>
 800324e:	2100      	movs	r1, #0
 8003250:	0028      	movs	r0, r5
 8003252:	6019      	str	r1, [r3, #0]
 8003254:	4790      	blx	r2
 8003256:	2000      	movs	r0, #0
 8003258:	e7df      	b.n	800321a <_raise_r+0x12>
	...

0800325c <raise>:
 800325c:	b510      	push	{r4, lr}
 800325e:	4b03      	ldr	r3, [pc, #12]	@ (800326c <raise+0x10>)
 8003260:	0001      	movs	r1, r0
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	f7ff ffd0 	bl	8003208 <_raise_r>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	20000018 	.word	0x20000018

08003270 <_kill_r>:
 8003270:	2300      	movs	r3, #0
 8003272:	b570      	push	{r4, r5, r6, lr}
 8003274:	4d06      	ldr	r5, [pc, #24]	@ (8003290 <_kill_r+0x20>)
 8003276:	0004      	movs	r4, r0
 8003278:	0008      	movs	r0, r1
 800327a:	0011      	movs	r1, r2
 800327c:	602b      	str	r3, [r5, #0]
 800327e:	f7fd fae7 	bl	8000850 <_kill>
 8003282:	1c43      	adds	r3, r0, #1
 8003284:	d103      	bne.n	800328e <_kill_r+0x1e>
 8003286:	682b      	ldr	r3, [r5, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d000      	beq.n	800328e <_kill_r+0x1e>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd70      	pop	{r4, r5, r6, pc}
 8003290:	200003dc 	.word	0x200003dc

08003294 <_getpid_r>:
 8003294:	b510      	push	{r4, lr}
 8003296:	f7fd fad5 	bl	8000844 <_getpid>
 800329a:	bd10      	pop	{r4, pc}

0800329c <_init>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr

080032a8 <_fini>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr
