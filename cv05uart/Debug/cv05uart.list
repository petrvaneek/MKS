
cv05uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004558  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048bc  080048bc  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  080048bc  080048bc  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048bc  080048bc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048bc  080048bc  000058bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c0  080048c0  000058c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080048c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000068  0800492c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800492c  00006440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b272  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c01  00000000  00000000  00011302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00012f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b5  00000000  00000000  000138f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000109c8  00000000  00000000  000140a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dba7  00000000  00000000  00024a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fc5c  00000000  00000000  00032614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00092270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e60  00000000  00000000  000922b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00095114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004600 	.word	0x08004600

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004600 	.word	0x08004600

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char const *buf, int n)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <_write+0x28>)
 800024c:	f002 f9f0 	bl	8002630 <HAL_UART_Transmit>
	return n;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	2000011c 	.word	0x2000011c

08000260 <uart_process_command>:
static void uart_process_command(char *cmd)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b08e      	sub	sp, #56	@ 0x38
 8000264:	af04      	add	r7, sp, #16
 8000266:	6078      	str	r0, [r7, #4]
	//printf("prijato: '%s'\n", cmd);
	char *token;
	uint16_t addr;
	uint8_t value;

	token = strtok(cmd, " ");
 8000268:	4aa8      	ldr	r2, [pc, #672]	@ (800050c <uart_process_command+0x2ac>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	0011      	movs	r1, r2
 800026e:	0018      	movs	r0, r3
 8000270:	f003 fb0e 	bl	8003890 <strtok>
 8000274:	0003      	movs	r3, r0
 8000276:	623b      	str	r3, [r7, #32]
	if (strcasecmp(token, "HELLO") == 0)
 8000278:	4aa5      	ldr	r2, [pc, #660]	@ (8000510 <uart_process_command+0x2b0>)
 800027a:	6a3b      	ldr	r3, [r7, #32]
 800027c:	0011      	movs	r1, r2
 800027e:	0018      	movs	r0, r3
 8000280:	f003 faec 	bl	800385c <strcasecmp>
 8000284:	1e03      	subs	r3, r0, #0
 8000286:	d104      	bne.n	8000292 <uart_process_command+0x32>
	{
		printf("Komunikace OK\n");
 8000288:	4ba2      	ldr	r3, [pc, #648]	@ (8000514 <uart_process_command+0x2b4>)
 800028a:	0018      	movs	r0, r3
 800028c:	f003 f9e8 	bl	8003660 <puts>

			printf("Adresa 0x%04X = 0x%04X\n",i,value[i]);
		}
		printf("\n");
	}
}
 8000290:	e138      	b.n	8000504 <uart_process_command+0x2a4>
	else if(strcasecmp(token, "LED1") == 0)
 8000292:	4aa1      	ldr	r2, [pc, #644]	@ (8000518 <uart_process_command+0x2b8>)
 8000294:	6a3b      	ldr	r3, [r7, #32]
 8000296:	0011      	movs	r1, r2
 8000298:	0018      	movs	r0, r3
 800029a:	f003 fadf 	bl	800385c <strcasecmp>
 800029e:	1e03      	subs	r3, r0, #0
 80002a0:	d12a      	bne.n	80002f8 <uart_process_command+0x98>
		token = strtok(NULL, " ");
 80002a2:	4b9a      	ldr	r3, [pc, #616]	@ (800050c <uart_process_command+0x2ac>)
 80002a4:	0019      	movs	r1, r3
 80002a6:	2000      	movs	r0, #0
 80002a8:	f003 faf2 	bl	8003890 <strtok>
 80002ac:	0003      	movs	r3, r0
 80002ae:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0)
 80002b0:	4a9a      	ldr	r2, [pc, #616]	@ (800051c <uart_process_command+0x2bc>)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f003 fad0 	bl	800385c <strcasecmp>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d107      	bne.n	80002d0 <uart_process_command+0x70>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80002c0:	2390      	movs	r3, #144	@ 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2201      	movs	r2, #1
 80002c6:	2110      	movs	r1, #16
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 f932 	bl	8001532 <HAL_GPIO_WritePin>
 80002ce:	e00e      	b.n	80002ee <uart_process_command+0x8e>
		else if (strcasecmp(token, "OFF") == 0)
 80002d0:	4a93      	ldr	r2, [pc, #588]	@ (8000520 <uart_process_command+0x2c0>)
 80002d2:	6a3b      	ldr	r3, [r7, #32]
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f003 fac0 	bl	800385c <strcasecmp>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d106      	bne.n	80002ee <uart_process_command+0x8e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80002e0:	2390      	movs	r3, #144	@ 0x90
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f922 	bl	8001532 <HAL_GPIO_WritePin>
		printf("OK\n");
 80002ee:	4b8d      	ldr	r3, [pc, #564]	@ (8000524 <uart_process_command+0x2c4>)
 80002f0:	0018      	movs	r0, r3
 80002f2:	f003 f9b5 	bl	8003660 <puts>
}
 80002f6:	e105      	b.n	8000504 <uart_process_command+0x2a4>
	else if(strcasecmp(token, "LED2") == 0)
 80002f8:	4a8b      	ldr	r2, [pc, #556]	@ (8000528 <uart_process_command+0x2c8>)
 80002fa:	6a3b      	ldr	r3, [r7, #32]
 80002fc:	0011      	movs	r1, r2
 80002fe:	0018      	movs	r0, r3
 8000300:	f003 faac 	bl	800385c <strcasecmp>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d128      	bne.n	800035a <uart_process_command+0xfa>
		token = strtok(NULL, " ");
 8000308:	4b80      	ldr	r3, [pc, #512]	@ (800050c <uart_process_command+0x2ac>)
 800030a:	0019      	movs	r1, r3
 800030c:	2000      	movs	r0, #0
 800030e:	f003 fabf 	bl	8003890 <strtok>
 8000312:	0003      	movs	r3, r0
 8000314:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0)
 8000316:	4a81      	ldr	r2, [pc, #516]	@ (800051c <uart_process_command+0x2bc>)
 8000318:	6a3b      	ldr	r3, [r7, #32]
 800031a:	0011      	movs	r1, r2
 800031c:	0018      	movs	r0, r3
 800031e:	f003 fa9d 	bl	800385c <strcasecmp>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d106      	bne.n	8000334 <uart_process_command+0xd4>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000326:	4b81      	ldr	r3, [pc, #516]	@ (800052c <uart_process_command+0x2cc>)
 8000328:	2201      	movs	r2, #1
 800032a:	2101      	movs	r1, #1
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f900 	bl	8001532 <HAL_GPIO_WritePin>
 8000332:	e00d      	b.n	8000350 <uart_process_command+0xf0>
		else if (strcasecmp(token, "OFF") == 0)
 8000334:	4a7a      	ldr	r2, [pc, #488]	@ (8000520 <uart_process_command+0x2c0>)
 8000336:	6a3b      	ldr	r3, [r7, #32]
 8000338:	0011      	movs	r1, r2
 800033a:	0018      	movs	r0, r3
 800033c:	f003 fa8e 	bl	800385c <strcasecmp>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d105      	bne.n	8000350 <uart_process_command+0xf0>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000344:	4b79      	ldr	r3, [pc, #484]	@ (800052c <uart_process_command+0x2cc>)
 8000346:	2200      	movs	r2, #0
 8000348:	2101      	movs	r1, #1
 800034a:	0018      	movs	r0, r3
 800034c:	f001 f8f1 	bl	8001532 <HAL_GPIO_WritePin>
		printf("OK\n");
 8000350:	4b74      	ldr	r3, [pc, #464]	@ (8000524 <uart_process_command+0x2c4>)
 8000352:	0018      	movs	r0, r3
 8000354:	f003 f984 	bl	8003660 <puts>
}
 8000358:	e0d4      	b.n	8000504 <uart_process_command+0x2a4>
	else if(strcasecmp(token,"STATUS")==0)
 800035a:	4a75      	ldr	r2, [pc, #468]	@ (8000530 <uart_process_command+0x2d0>)
 800035c:	6a3b      	ldr	r3, [r7, #32]
 800035e:	0011      	movs	r1, r2
 8000360:	0018      	movs	r0, r3
 8000362:	f003 fa7b 	bl	800385c <strcasecmp>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d121      	bne.n	80003ae <uart_process_command+0x14e>
		if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin))
 800036a:	2390      	movs	r3, #144	@ 0x90
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	2110      	movs	r1, #16
 8000370:	0018      	movs	r0, r3
 8000372:	f001 f8c1 	bl	80014f8 <HAL_GPIO_ReadPin>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d004      	beq.n	8000384 <uart_process_command+0x124>
					printf("LED1 ON\n");
 800037a:	4b6e      	ldr	r3, [pc, #440]	@ (8000534 <uart_process_command+0x2d4>)
 800037c:	0018      	movs	r0, r3
 800037e:	f003 f96f 	bl	8003660 <puts>
 8000382:	e003      	b.n	800038c <uart_process_command+0x12c>
					printf("LED1 OFF\n");
 8000384:	4b6c      	ldr	r3, [pc, #432]	@ (8000538 <uart_process_command+0x2d8>)
 8000386:	0018      	movs	r0, r3
 8000388:	f003 f96a 	bl	8003660 <puts>
				if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin))
 800038c:	4b67      	ldr	r3, [pc, #412]	@ (800052c <uart_process_command+0x2cc>)
 800038e:	2101      	movs	r1, #1
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f8b1 	bl	80014f8 <HAL_GPIO_ReadPin>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d004      	beq.n	80003a4 <uart_process_command+0x144>
					printf("LED2 ON\n");
 800039a:	4b68      	ldr	r3, [pc, #416]	@ (800053c <uart_process_command+0x2dc>)
 800039c:	0018      	movs	r0, r3
 800039e:	f003 f95f 	bl	8003660 <puts>
}
 80003a2:	e0af      	b.n	8000504 <uart_process_command+0x2a4>
					printf("LED2 OFF\n");
 80003a4:	4b66      	ldr	r3, [pc, #408]	@ (8000540 <uart_process_command+0x2e0>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f003 f95a 	bl	8003660 <puts>
}
 80003ac:	e0aa      	b.n	8000504 <uart_process_command+0x2a4>
	else if(strcasecmp(token, "READ") == 0)
 80003ae:	4a65      	ldr	r2, [pc, #404]	@ (8000544 <uart_process_command+0x2e4>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f003 fa51 	bl	800385c <strcasecmp>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d127      	bne.n	800040e <uart_process_command+0x1ae>
		token = strtok(NULL, " ");
 80003be:	4b53      	ldr	r3, [pc, #332]	@ (800050c <uart_process_command+0x2ac>)
 80003c0:	0019      	movs	r1, r3
 80003c2:	2000      	movs	r0, #0
 80003c4:	f003 fa64 	bl	8003890 <strtok>
 80003c8:	0003      	movs	r3, r0
 80003ca:	623b      	str	r3, [r7, #32]
		addr = atoi(token);
 80003cc:	6a3b      	ldr	r3, [r7, #32]
 80003ce:	0018      	movs	r0, r3
 80003d0:	f002 ff75 	bl	80032be <atoi>
 80003d4:	0002      	movs	r2, r0
 80003d6:	241e      	movs	r4, #30
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	881a      	ldrh	r2, [r3, #0]
 80003e0:	4859      	ldr	r0, [pc, #356]	@ (8000548 <uart_process_command+0x2e8>)
 80003e2:	23fa      	movs	r3, #250	@ 0xfa
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	9302      	str	r3, [sp, #8]
 80003e8:	2301      	movs	r3, #1
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	251d      	movs	r5, #29
 80003ee:	197b      	adds	r3, r7, r5
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	2302      	movs	r3, #2
 80003f4:	21a0      	movs	r1, #160	@ 0xa0
 80003f6:	f001 fa8d 	bl	8001914 <HAL_I2C_Mem_Read>
		printf("Adresa 0x%04X = 0x%04X\n",addr,value);
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	8819      	ldrh	r1, [r3, #0]
 80003fe:	197b      	adds	r3, r7, r5
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	001a      	movs	r2, r3
 8000404:	4b51      	ldr	r3, [pc, #324]	@ (800054c <uart_process_command+0x2ec>)
 8000406:	0018      	movs	r0, r3
 8000408:	f003 f8ba 	bl	8003580 <iprintf>
}
 800040c:	e07a      	b.n	8000504 <uart_process_command+0x2a4>
	else if(strcasecmp(token, "WRITE") == 0)
 800040e:	4a50      	ldr	r2, [pc, #320]	@ (8000550 <uart_process_command+0x2f0>)
 8000410:	6a3b      	ldr	r3, [r7, #32]
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f003 fa21 	bl	800385c <strcasecmp>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d13d      	bne.n	800049a <uart_process_command+0x23a>
		token = strtok(NULL, " ");
 800041e:	4b3b      	ldr	r3, [pc, #236]	@ (800050c <uart_process_command+0x2ac>)
 8000420:	0019      	movs	r1, r3
 8000422:	2000      	movs	r0, #0
 8000424:	f003 fa34 	bl	8003890 <strtok>
 8000428:	0003      	movs	r3, r0
 800042a:	623b      	str	r3, [r7, #32]
		addr = atoi(token);
 800042c:	6a3b      	ldr	r3, [r7, #32]
 800042e:	0018      	movs	r0, r3
 8000430:	f002 ff45 	bl	80032be <atoi>
 8000434:	0002      	movs	r2, r0
 8000436:	241e      	movs	r4, #30
 8000438:	193b      	adds	r3, r7, r4
 800043a:	801a      	strh	r2, [r3, #0]
		token = strtok(NULL, " ");
 800043c:	4b33      	ldr	r3, [pc, #204]	@ (800050c <uart_process_command+0x2ac>)
 800043e:	0019      	movs	r1, r3
 8000440:	2000      	movs	r0, #0
 8000442:	f003 fa25 	bl	8003890 <strtok>
 8000446:	0003      	movs	r3, r0
 8000448:	623b      	str	r3, [r7, #32]
		value = atoi(token);
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	0018      	movs	r0, r3
 800044e:	f002 ff36 	bl	80032be <atoi>
 8000452:	0003      	movs	r3, r0
 8000454:	b2da      	uxtb	r2, r3
 8000456:	211d      	movs	r1, #29
 8000458:	187b      	adds	r3, r7, r1
 800045a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 800045c:	193b      	adds	r3, r7, r4
 800045e:	881a      	ldrh	r2, [r3, #0]
 8000460:	4839      	ldr	r0, [pc, #228]	@ (8000548 <uart_process_command+0x2e8>)
 8000462:	23fa      	movs	r3, #250	@ 0xfa
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	9302      	str	r3, [sp, #8]
 8000468:	2301      	movs	r3, #1
 800046a:	9301      	str	r3, [sp, #4]
 800046c:	187b      	adds	r3, r7, r1
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2302      	movs	r3, #2
 8000472:	21a0      	movs	r1, #160	@ 0xa0
 8000474:	f001 f920 	bl	80016b8 <HAL_I2C_Mem_Write>
		while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDR, 300, 1000) == HAL_TIMEOUT) {} ;
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	23fa      	movs	r3, #250	@ 0xfa
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	2296      	movs	r2, #150	@ 0x96
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	4831      	ldr	r0, [pc, #196]	@ (8000548 <uart_process_command+0x2e8>)
 8000484:	21a0      	movs	r1, #160	@ 0xa0
 8000486:	f001 fb79 	bl	8001b7c <HAL_I2C_IsDeviceReady>
 800048a:	0003      	movs	r3, r0
 800048c:	2b03      	cmp	r3, #3
 800048e:	d0f4      	beq.n	800047a <uart_process_command+0x21a>
		printf("OK\n");
 8000490:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <uart_process_command+0x2c4>)
 8000492:	0018      	movs	r0, r3
 8000494:	f003 f8e4 	bl	8003660 <puts>
}
 8000498:	e034      	b.n	8000504 <uart_process_command+0x2a4>
	else if (strcasecmp(token,"DUMP")==0)
 800049a:	4a2e      	ldr	r2, [pc, #184]	@ (8000554 <uart_process_command+0x2f4>)
 800049c:	6a3b      	ldr	r3, [r7, #32]
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f003 f9db 	bl	800385c <strcasecmp>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d12c      	bne.n	8000504 <uart_process_command+0x2a4>
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, I2C_MEMADD_SIZE_16BIT, value, 16, 1000);
 80004aa:	4827      	ldr	r0, [pc, #156]	@ (8000548 <uart_process_command+0x2e8>)
 80004ac:	23fa      	movs	r3, #250	@ 0xfa
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	9302      	str	r3, [sp, #8]
 80004b2:	2310      	movs	r3, #16
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2302      	movs	r3, #2
 80004be:	2200      	movs	r2, #0
 80004c0:	21a0      	movs	r1, #160	@ 0xa0
 80004c2:	f001 fa27 	bl	8001914 <HAL_I2C_Mem_Read>
		for(uint8_t i =0;i<16;i++)
 80004c6:	2327      	movs	r3, #39	@ 0x27
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	e011      	b.n	80004f4 <uart_process_command+0x294>
			printf("Adresa 0x%04X = 0x%04X\n",i,value[i]);
 80004d0:	2427      	movs	r4, #39	@ 0x27
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	7819      	ldrb	r1, [r3, #0]
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	220c      	movs	r2, #12
 80004dc:	18ba      	adds	r2, r7, r2
 80004de:	5cd3      	ldrb	r3, [r2, r3]
 80004e0:	001a      	movs	r2, r3
 80004e2:	4b1a      	ldr	r3, [pc, #104]	@ (800054c <uart_process_command+0x2ec>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f003 f84b 	bl	8003580 <iprintf>
		for(uint8_t i =0;i<16;i++)
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	3201      	adds	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	2327      	movs	r3, #39	@ 0x27
 80004f6:	18fb      	adds	r3, r7, r3
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d9e8      	bls.n	80004d0 <uart_process_command+0x270>
		printf("\n");
 80004fe:	200a      	movs	r0, #10
 8000500:	f003 f84e 	bl	80035a0 <putchar>
}
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b00a      	add	sp, #40	@ 0x28
 800050a:	bdb0      	pop	{r4, r5, r7, pc}
 800050c:	08004618 	.word	0x08004618
 8000510:	0800461c 	.word	0x0800461c
 8000514:	08004624 	.word	0x08004624
 8000518:	08004634 	.word	0x08004634
 800051c:	0800463c 	.word	0x0800463c
 8000520:	08004640 	.word	0x08004640
 8000524:	08004644 	.word	0x08004644
 8000528:	08004648 	.word	0x08004648
 800052c:	48000400 	.word	0x48000400
 8000530:	08004650 	.word	0x08004650
 8000534:	08004658 	.word	0x08004658
 8000538:	08004660 	.word	0x08004660
 800053c:	0800466c 	.word	0x0800466c
 8000540:	08004674 	.word	0x08004674
 8000544:	08004680 	.word	0x08004680
 8000548:	200000c8 	.word	0x200000c8
 800054c:	08004688 	.word	0x08004688
 8000550:	080046a0 	.word	0x080046a0
 8000554:	080046a8 	.word	0x080046a8

08000558 <uart_byte_available>:
static void uart_byte_available(uint8_t c)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	0002      	movs	r2, r0
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 8000564:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <uart_byte_available+0x74>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	2bff      	cmp	r3, #255	@ 0xff
 800056a:	d812      	bhi.n	8000592 <uart_byte_available+0x3a>
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b1f      	cmp	r3, #31
 8000572:	d90e      	bls.n	8000592 <uart_byte_available+0x3a>
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b7e      	cmp	r3, #126	@ 0x7e
 800057a:	d80a      	bhi.n	8000592 <uart_byte_available+0x3a>
 800057c:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <uart_byte_available+0x74>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	b291      	uxth	r1, r2
 8000584:	4a11      	ldr	r2, [pc, #68]	@ (80005cc <uart_byte_available+0x74>)
 8000586:	8011      	strh	r1, [r2, #0]
 8000588:	0019      	movs	r1, r3
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <uart_byte_available+0x78>)
 800058c:	1dfa      	adds	r2, r7, #7
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0) {
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b0a      	cmp	r3, #10
 8000598:	d003      	beq.n	80005a2 <uart_byte_available+0x4a>
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b0d      	cmp	r3, #13
 80005a0:	d110      	bne.n	80005c4 <uart_byte_available+0x6c>
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <uart_byte_available+0x74>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d00c      	beq.n	80005c4 <uart_byte_available+0x6c>
		data[cnt] = '\0';
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <uart_byte_available+0x74>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	001a      	movs	r2, r3
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <uart_byte_available+0x78>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <uart_byte_available+0x78>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff fe51 	bl	8000260 <uart_process_command>
		cnt = 0;
 80005be:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <uart_byte_available+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	801a      	strh	r2, [r3, #0]
	}
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200001e8 	.word	0x200001e8
 80005d0:	200001ec 	.word	0x200001ec

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fb43 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8c9 	bl	8000774 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e2:	f000 f8a9 	bl	8000738 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 f877 	bl	80006d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ea:	f000 f835 	bl	8000658 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 80005ee:	4916      	ldr	r1, [pc, #88]	@ (8000648 <main+0x74>)
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <main+0x78>)
 80005f2:	2240      	movs	r2, #64	@ 0x40
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 f8ba 	bl	800276e <HAL_UART_Receive_DMA>
  {
	  //uint8_t c;
	  //HAL_UART_Receive(&huart2, &c, 1, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);

	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80005fa:	e019      	b.n	8000630 <main+0x5c>
	  uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <main+0x7c>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	b29b      	uxth	r3, r3
 8000602:	0019      	movs	r1, r3
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <main+0x74>)
 8000608:	5c52      	ldrb	r2, [r2, r1]
 800060a:	701a      	strb	r2, [r3, #0]
	  if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 800060c:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <main+0x7c>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	b29b      	uxth	r3, r3
 8000612:	3301      	adds	r3, #1
 8000614:	b29b      	uxth	r3, r3
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <main+0x7c>)
 8000618:	1c19      	adds	r1, r3, #0
 800061a:	8011      	strh	r1, [r2, #0]
 800061c:	2b3f      	cmp	r3, #63	@ 0x3f
 800061e:	d902      	bls.n	8000626 <main+0x52>
 8000620:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <main+0x7c>)
 8000622:	2200      	movs	r2, #0
 8000624:	801a      	strh	r2, [r3, #0]
	  uart_byte_available(b); // process every received byte with the RX state machine
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ff94 	bl	8000558 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <main+0x7c>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	b29b      	uxth	r3, r3
 8000636:	0019      	movs	r1, r3
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <main+0x80>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	2240      	movs	r2, #64	@ 0x40
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	4299      	cmp	r1, r3
 8000644:	d1da      	bne.n	80005fc <main+0x28>
 8000646:	e7f3      	b.n	8000630 <main+0x5c>
 8000648:	20000084 	.word	0x20000084
 800064c:	2000011c 	.word	0x2000011c
 8000650:	200000c4 	.word	0x200000c4
 8000654:	200001a4 	.word	0x200001a4

08000658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_I2C1_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000664:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <MX_I2C1_Init+0x7c>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000670:	2201      	movs	r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000694:	0018      	movs	r0, r3
 8000696:	f000 ff69 	bl	800156c <HAL_I2C_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 f8fb 	bl	8000898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006a4:	2100      	movs	r1, #0
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 fe60 	bl	800236c <HAL_I2CEx_ConfigAnalogFilter>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 f8f2 	bl	8000898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fea3 	bl	8002404 <HAL_I2CEx_ConfigDigitalFilter>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 f8e9 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200000c8 	.word	0x200000c8
 80006d0:	40005400 	.word	0x40005400
 80006d4:	00201d2b 	.word	0x00201d2b

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006de:	4a15      	ldr	r2, [pc, #84]	@ (8000734 <MX_USART2_UART_Init+0x5c>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006e4:	2296      	movs	r2, #150	@ 0x96
 80006e6:	0212      	lsls	r2, r2, #8
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 800071c:	0018      	movs	r0, r3
 800071e:	f001 ff33 	bl	8002588 <HAL_UART_Init>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000726:	f000 f8b7 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000011c 	.word	0x2000011c
 8000734:	40004400 	.word	0x40004400

08000738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_DMA_Init+0x38>)
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_DMA_Init+0x38>)
 8000744:	2101      	movs	r1, #1
 8000746:	430a      	orrs	r2, r1
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_DMA_Init+0x38>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	2201      	movs	r2, #1
 8000750:	4013      	ands	r3, r2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	200b      	movs	r0, #11
 800075c:	f000 fb92 	bl	8000e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000760:	200b      	movs	r0, #11
 8000762:	f000 fba4 	bl	8000eae <HAL_NVIC_EnableIRQ>

}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	40021000 	.word	0x40021000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b08b      	sub	sp, #44	@ 0x2c
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	2414      	movs	r4, #20
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2314      	movs	r3, #20
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f003 f861 	bl	800384c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b40      	ldr	r3, [pc, #256]	@ (800088c <MX_GPIO_Init+0x118>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	4b3f      	ldr	r3, [pc, #252]	@ (800088c <MX_GPIO_Init+0x118>)
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	0309      	lsls	r1, r1, #12
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <MX_GPIO_Init+0x118>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	031b      	lsls	r3, r3, #12
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b39      	ldr	r3, [pc, #228]	@ (800088c <MX_GPIO_Init+0x118>)
 80007a8:	695a      	ldr	r2, [r3, #20]
 80007aa:	4b38      	ldr	r3, [pc, #224]	@ (800088c <MX_GPIO_Init+0x118>)
 80007ac:	2180      	movs	r1, #128	@ 0x80
 80007ae:	03c9      	lsls	r1, r1, #15
 80007b0:	430a      	orrs	r2, r1
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	4b35      	ldr	r3, [pc, #212]	@ (800088c <MX_GPIO_Init+0x118>)
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	2380      	movs	r3, #128	@ 0x80
 80007ba:	03db      	lsls	r3, r3, #15
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b32      	ldr	r3, [pc, #200]	@ (800088c <MX_GPIO_Init+0x118>)
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	4b31      	ldr	r3, [pc, #196]	@ (800088c <MX_GPIO_Init+0x118>)
 80007c8:	2180      	movs	r1, #128	@ 0x80
 80007ca:	0289      	lsls	r1, r1, #10
 80007cc:	430a      	orrs	r2, r1
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <MX_GPIO_Init+0x118>)
 80007d2:	695a      	ldr	r2, [r3, #20]
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	029b      	lsls	r3, r3, #10
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <MX_GPIO_Init+0x118>)
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	4b2a      	ldr	r3, [pc, #168]	@ (800088c <MX_GPIO_Init+0x118>)
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	02c9      	lsls	r1, r1, #11
 80007e8:	430a      	orrs	r2, r1
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	4b27      	ldr	r3, [pc, #156]	@ (800088c <MX_GPIO_Init+0x118>)
 80007ee:	695a      	ldr	r2, [r3, #20]
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	02db      	lsls	r3, r3, #11
 80007f4:	4013      	ands	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2390      	movs	r3, #144	@ 0x90
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	2200      	movs	r2, #0
 8000800:	2130      	movs	r1, #48	@ 0x30
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fe95 	bl	8001532 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000808:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_GPIO_Init+0x11c>)
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fe8f 	bl	8001532 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2280      	movs	r2, #128	@ 0x80
 8000818:	0192      	lsls	r2, r2, #6
 800081a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2284      	movs	r2, #132	@ 0x84
 8000820:	0392      	lsls	r2, r2, #14
 8000822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082a:	193b      	adds	r3, r7, r4
 800082c:	4a19      	ldr	r2, [pc, #100]	@ (8000894 <MX_GPIO_Init+0x120>)
 800082e:	0019      	movs	r1, r3
 8000830:	0010      	movs	r0, r2
 8000832:	f000 fcf1 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2230      	movs	r2, #48	@ 0x30
 800083a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2201      	movs	r2, #1
 8000840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	193a      	adds	r2, r7, r4
 8000850:	2390      	movs	r3, #144	@ 0x90
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fcde 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800085c:	0021      	movs	r1, r4
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2201      	movs	r2, #1
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000876:	187b      	adds	r3, r7, r1
 8000878:	4a05      	ldr	r2, [pc, #20]	@ (8000890 <MX_GPIO_Init+0x11c>)
 800087a:	0019      	movs	r1, r3
 800087c:	0010      	movs	r0, r2
 800087e:	f000 fccb 	bl	8001218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b00b      	add	sp, #44	@ 0x2c
 8000888:	bd90      	pop	{r4, r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400
 8000894:	48000800 	.word	0x48000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x44>)
 80008ac:	699a      	ldr	r2, [r3, #24]
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	619a      	str	r2, [r3, #24]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c4:	69da      	ldr	r2, [r3, #28]
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c8:	2180      	movs	r1, #128	@ 0x80
 80008ca:	0549      	lsls	r1, r1, #21
 80008cc:	430a      	orrs	r2, r1
 80008ce:	61da      	str	r2, [r3, #28]
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_MspInit+0x44>)
 80008d2:	69da      	ldr	r2, [r3, #28]
 80008d4:	2380      	movs	r3, #128	@ 0x80
 80008d6:	055b      	lsls	r3, r3, #21
 80008d8:	4013      	ands	r3, r2
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b08b      	sub	sp, #44	@ 0x2c
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	2414      	movs	r4, #20
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	0018      	movs	r0, r3
 80008fa:	2314      	movs	r3, #20
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f002 ffa4 	bl	800384c <memset>
  if(hi2c->Instance==I2C1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <HAL_I2C_MspInit+0x90>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d132      	bne.n	8000974 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <HAL_I2C_MspInit+0x94>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <HAL_I2C_MspInit+0x94>)
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	02c9      	lsls	r1, r1, #11
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <HAL_I2C_MspInit+0x94>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	02db      	lsls	r3, r3, #11
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	22c0      	movs	r2, #192	@ 0xc0
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000932:	0021      	movs	r1, r4
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2212      	movs	r2, #18
 8000938:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2203      	movs	r2, #3
 8000944:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2201      	movs	r2, #1
 800094a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	187b      	adds	r3, r7, r1
 800094e:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <HAL_I2C_MspInit+0x98>)
 8000950:	0019      	movs	r1, r3
 8000952:	0010      	movs	r0, r2
 8000954:	f000 fc60 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <HAL_I2C_MspInit+0x94>)
 800095a:	69da      	ldr	r2, [r3, #28]
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_I2C_MspInit+0x94>)
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	0389      	lsls	r1, r1, #14
 8000962:	430a      	orrs	r2, r1
 8000964:	61da      	str	r2, [r3, #28]
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_I2C_MspInit+0x94>)
 8000968:	69da      	ldr	r2, [r3, #28]
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	039b      	lsls	r3, r3, #14
 800096e:	4013      	ands	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b00b      	add	sp, #44	@ 0x2c
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40005400 	.word	0x40005400
 8000980:	40021000 	.word	0x40021000
 8000984:	48000400 	.word	0x48000400

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b08b      	sub	sp, #44	@ 0x2c
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	2414      	movs	r4, #20
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2314      	movs	r3, #20
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f002 ff56 	bl	800384c <memset>
  if(huart->Instance==USART2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000a64 <HAL_UART_MspInit+0xdc>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d158      	bne.n	8000a5c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <HAL_UART_MspInit+0xe0>)
 80009ac:	69da      	ldr	r2, [r3, #28]
 80009ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000a68 <HAL_UART_MspInit+0xe0>)
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	0289      	lsls	r1, r1, #10
 80009b4:	430a      	orrs	r2, r1
 80009b6:	61da      	str	r2, [r3, #28]
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <HAL_UART_MspInit+0xe0>)
 80009ba:	69da      	ldr	r2, [r3, #28]
 80009bc:	2380      	movs	r3, #128	@ 0x80
 80009be:	029b      	lsls	r3, r3, #10
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <HAL_UART_MspInit+0xe0>)
 80009c8:	695a      	ldr	r2, [r3, #20]
 80009ca:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <HAL_UART_MspInit+0xe0>)
 80009cc:	2180      	movs	r1, #128	@ 0x80
 80009ce:	0289      	lsls	r1, r1, #10
 80009d0:	430a      	orrs	r2, r1
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <HAL_UART_MspInit+0xe0>)
 80009d6:	695a      	ldr	r2, [r3, #20]
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	029b      	lsls	r3, r3, #10
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e2:	0021      	movs	r1, r4
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2202      	movs	r2, #2
 80009ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2201      	movs	r2, #1
 8000a00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	187a      	adds	r2, r7, r1
 8000a04:	2390      	movs	r3, #144	@ 0x90
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fc04 	bl	8001218 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_MspInit+0xe8>)
 8000a14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a36:	2220      	movs	r2, #32
 8000a38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fa50 	bl	8000ee8 <HAL_DMA_Init>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000a4c:	f7ff ff24 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a54:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a56:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_UART_MspInit+0xe4>)
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00b      	add	sp, #44	@ 0x2c
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	200001a4 	.word	0x200001a4
 8000a70:	40020058 	.word	0x40020058

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 f92a 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000aac:	4b03      	ldr	r3, [pc, #12]	@ (8000abc <DMA1_Channel4_5_IRQHandler+0x14>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fac8 	bl	8001044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	200001a4 	.word	0x200001a4

08000ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  return 1;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_kill>:

int _kill(int pid, int sig)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ad6:	f002 ff89 	bl	80039ec <__errno>
 8000ada:	0003      	movs	r3, r0
 8000adc:	2216      	movs	r2, #22
 8000ade:	601a      	str	r2, [r3, #0]
  return -1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	425b      	negs	r3, r3
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_exit>:

void _exit (int status)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000af4:	2301      	movs	r3, #1
 8000af6:	425a      	negs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff ffe5 	bl	8000acc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	e7fd      	b.n	8000b02 <_exit+0x16>

08000b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e00a      	b.n	8000b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b18:	e000      	b.n	8000b1c <_read+0x16>
 8000b1a:	bf00      	nop
 8000b1c:	0001      	movs	r1, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	60ba      	str	r2, [r7, #8]
 8000b24:	b2ca      	uxtb	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbf0      	blt.n	8000b18 <_read+0x12>
  }

  return len;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b006      	add	sp, #24
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	425b      	negs	r3, r3
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	0192      	lsls	r2, r2, #6
 8000b64:	605a      	str	r2, [r3, #4]
  return 0;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_isatty>:

int _isatty(int file)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b78:	2301      	movs	r3, #1
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b004      	add	sp, #16
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f002 ff10 	bl	80039ec <__errno>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	18d2      	adds	r2, r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <_sbrk+0x64>)
 8000be8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b006      	add	sp, #24
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20002000 	.word	0x20002000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	200002ec 	.word	0x200002ec
 8000c00:	20000440 	.word	0x20000440

08000c04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c14:	f7ff fff6 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	@ (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3e:	f002 fedb 	bl	80039f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c42:	f7ff fcc7 	bl	80005d4 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   r0, =_estack
 8000c48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c54:	080048c4 	.word	0x080048c4
  ldr r2, =_sbss
 8000c58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c5c:	20000440 	.word	0x20000440

08000c60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_IRQHandler>
	...

08000c64 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <HAL_Init+0x24>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_Init+0x24>)
 8000c6e:	2110      	movs	r1, #16
 8000c70:	430a      	orrs	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f809 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7a:	f7ff fe13 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <HAL_InitTick+0x5c>)
 8000c96:	681c      	ldr	r4, [r3, #0]
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <HAL_InitTick+0x60>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	23fa      	movs	r3, #250	@ 0xfa
 8000ca0:	0098      	lsls	r0, r3, #2
 8000ca2:	f7ff fa3b 	bl	800011c <__udivsi3>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	0019      	movs	r1, r3
 8000caa:	0020      	movs	r0, r4
 8000cac:	f7ff fa36 	bl	800011c <__udivsi3>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 f90b 	bl	8000ece <HAL_SYSTICK_Config>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e00f      	b.n	8000ce0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d80b      	bhi.n	8000cde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	425b      	negs	r3, r3
 8000ccc:	2200      	movs	r2, #0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 f8d8 	bl	8000e84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_InitTick+0x64>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b003      	add	sp, #12
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_IncTick+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	18d2      	adds	r2, r2, r3
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_IncTick+0x20>)
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200002f0 	.word	0x200002f0

08000d18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	@ (8000d28 <HAL_GetTick+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	200002f0 	.word	0x200002f0

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	0002      	movs	r2, r0
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d3e:	d809      	bhi.n	8000d54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	001a      	movs	r2, r3
 8000d46:	231f      	movs	r3, #31
 8000d48:	401a      	ands	r2, r3
 8000d4a:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <__NVIC_EnableIRQ+0x30>)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4091      	lsls	r1, r2
 8000d50:	000a      	movs	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]
  }
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	0002      	movs	r2, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d74:	d828      	bhi.n	8000dc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d76:	4a2f      	ldr	r2, [pc, #188]	@ (8000e34 <__NVIC_SetPriority+0xd4>)
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	33c0      	adds	r3, #192	@ 0xc0
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	589b      	ldr	r3, [r3, r2]
 8000d86:	1dfa      	adds	r2, r7, #7
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	400a      	ands	r2, r1
 8000d90:	00d2      	lsls	r2, r2, #3
 8000d92:	21ff      	movs	r1, #255	@ 0xff
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	43d2      	mvns	r2, r2
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	019b      	lsls	r3, r3, #6
 8000da2:	22ff      	movs	r2, #255	@ 0xff
 8000da4:	401a      	ands	r2, r3
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	0018      	movs	r0, r3
 8000dac:	2303      	movs	r3, #3
 8000dae:	4003      	ands	r3, r0
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	481f      	ldr	r0, [pc, #124]	@ (8000e34 <__NVIC_SetPriority+0xd4>)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	33c0      	adds	r3, #192	@ 0xc0
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dc6:	e031      	b.n	8000e2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e38 <__NVIC_SetPriority+0xd8>)
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	0019      	movs	r1, r3
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	400b      	ands	r3, r1
 8000dd4:	3b08      	subs	r3, #8
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3306      	adds	r3, #6
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	18d3      	adds	r3, r2, r3
 8000dde:	3304      	adds	r3, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1dfa      	adds	r2, r7, #7
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	0011      	movs	r1, r2
 8000de8:	2203      	movs	r2, #3
 8000dea:	400a      	ands	r2, r1
 8000dec:	00d2      	lsls	r2, r2, #3
 8000dee:	21ff      	movs	r1, #255	@ 0xff
 8000df0:	4091      	lsls	r1, r2
 8000df2:	000a      	movs	r2, r1
 8000df4:	43d2      	mvns	r2, r2
 8000df6:	401a      	ands	r2, r3
 8000df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	019b      	lsls	r3, r3, #6
 8000dfe:	22ff      	movs	r2, #255	@ 0xff
 8000e00:	401a      	ands	r2, r3
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	0018      	movs	r0, r3
 8000e08:	2303      	movs	r3, #3
 8000e0a:	4003      	ands	r3, r0
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e10:	4809      	ldr	r0, [pc, #36]	@ (8000e38 <__NVIC_SetPriority+0xd8>)
 8000e12:	1dfb      	adds	r3, r7, #7
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	001c      	movs	r4, r3
 8000e18:	230f      	movs	r3, #15
 8000e1a:	4023      	ands	r3, r4
 8000e1c:	3b08      	subs	r3, #8
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	430a      	orrs	r2, r1
 8000e22:	3306      	adds	r3, #6
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	18c3      	adds	r3, r0, r3
 8000e28:	3304      	adds	r3, #4
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b003      	add	sp, #12
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	1e5a      	subs	r2, r3, #1
 8000e48:	2380      	movs	r3, #128	@ 0x80
 8000e4a:	045b      	lsls	r3, r3, #17
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d301      	bcc.n	8000e54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e50:	2301      	movs	r3, #1
 8000e52:	e010      	b.n	8000e76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <SysTick_Config+0x44>)
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	425b      	negs	r3, r3
 8000e60:	2103      	movs	r1, #3
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff ff7c 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <SysTick_Config+0x44>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <SysTick_Config+0x44>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	210f      	movs	r1, #15
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	1c02      	adds	r2, r0, #0
 8000e94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b004      	add	sp, #16
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ff33 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff ffaf 	bl	8000e3c <SysTick_Config>
 8000ede:	0003      	movs	r3, r0
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e036      	b.n	8000f6c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2221      	movs	r2, #33	@ 0x21
 8000f02:	2102      	movs	r1, #2
 8000f04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4a18      	ldr	r2, [pc, #96]	@ (8000f74 <HAL_DMA_Init+0x8c>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 f946 	bl	80011e0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2221      	movs	r2, #33	@ 0x21
 8000f5e:	2101      	movs	r1, #1
 8000f60:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2220      	movs	r2, #32
 8000f66:	2100      	movs	r1, #0
 8000f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b004      	add	sp, #16
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	ffffc00f 	.word	0xffffc00f

08000f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2317      	movs	r3, #23
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2220      	movs	r2, #32
 8000f92:	5c9b      	ldrb	r3, [r3, r2]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <HAL_DMA_Start_IT+0x24>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e04f      	b.n	800103c <HAL_DMA_Start_IT+0xc4>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2221      	movs	r2, #33	@ 0x21
 8000fa8:	5c9b      	ldrb	r3, [r3, r2]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d13a      	bne.n	8001026 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2221      	movs	r2, #33	@ 0x21
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f000 f8d7 	bl	8001188 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d008      	beq.n	8000ff4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	210e      	movs	r1, #14
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e00f      	b.n	8001014 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	210a      	movs	r1, #10
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2104      	movs	r1, #4
 8001010:	438a      	bics	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2101      	movs	r1, #1
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2220      	movs	r2, #32
 800102a:	2100      	movs	r1, #0
 800102c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800102e:	2317      	movs	r3, #23
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2202      	movs	r2, #2
 8001034:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001036:	2317      	movs	r3, #23
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	781b      	ldrb	r3, [r3, #0]
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b006      	add	sp, #24
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	2204      	movs	r2, #4
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4013      	ands	r3, r2
 800106a:	d024      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x72>
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2204      	movs	r2, #4
 8001070:	4013      	ands	r3, r2
 8001072:	d020      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2220      	movs	r2, #32
 800107c:	4013      	ands	r3, r2
 800107e:	d107      	bne.n	8001090 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2104      	movs	r1, #4
 800108c:	438a      	bics	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001098:	2104      	movs	r1, #4
 800109a:	4091      	lsls	r1, r2
 800109c:	000a      	movs	r2, r1
 800109e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d100      	bne.n	80010aa <HAL_DMA_IRQHandler+0x66>
 80010a8:	e06a      	b.n	8001180 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	0010      	movs	r0, r2
 80010b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010b4:	e064      	b.n	8001180 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	2202      	movs	r2, #2
 80010bc:	409a      	lsls	r2, r3
 80010be:	0013      	movs	r3, r2
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4013      	ands	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_DMA_IRQHandler+0xda>
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2202      	movs	r2, #2
 80010ca:	4013      	ands	r3, r2
 80010cc:	d027      	beq.n	800111e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2220      	movs	r2, #32
 80010d6:	4013      	ands	r3, r2
 80010d8:	d10b      	bne.n	80010f2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	210a      	movs	r1, #10
 80010e6:	438a      	bics	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2221      	movs	r2, #33	@ 0x21
 80010ee:	2101      	movs	r1, #1
 80010f0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010fa:	2102      	movs	r1, #2
 80010fc:	4091      	lsls	r1, r2
 80010fe:	000a      	movs	r2, r1
 8001100:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2220      	movs	r2, #32
 8001106:	2100      	movs	r1, #0
 8001108:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110e:	2b00      	cmp	r3, #0
 8001110:	d036      	beq.n	8001180 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	0010      	movs	r0, r2
 800111a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800111c:	e030      	b.n	8001180 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	2208      	movs	r2, #8
 8001124:	409a      	lsls	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4013      	ands	r3, r2
 800112c:	d028      	beq.n	8001180 <HAL_DMA_IRQHandler+0x13c>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2208      	movs	r2, #8
 8001132:	4013      	ands	r3, r2
 8001134:	d024      	beq.n	8001180 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	210e      	movs	r1, #14
 8001142:	438a      	bics	r2, r1
 8001144:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800114e:	2101      	movs	r1, #1
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2221      	movs	r2, #33	@ 0x21
 8001160:	2101      	movs	r1, #1
 8001162:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2220      	movs	r2, #32
 8001168:	2100      	movs	r1, #0
 800116a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	0010      	movs	r0, r2
 800117c:	4798      	blx	r3
    }
  }
}
 800117e:	e7ff      	b.n	8001180 <HAL_DMA_IRQHandler+0x13c>
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}

08001188 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800119e:	2101      	movs	r1, #1
 80011a0:	4091      	lsls	r1, r2
 80011a2:	000a      	movs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b10      	cmp	r3, #16
 80011b4:	d108      	bne.n	80011c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011c6:	e007      	b.n	80011d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	60da      	str	r2, [r3, #12]
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}

080011e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <DMA_CalcBaseAndBitshift+0x30>)
 80011ee:	4694      	mov	ip, r2
 80011f0:	4463      	add	r3, ip
 80011f2:	2114      	movs	r1, #20
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7fe ff91 	bl	800011c <__udivsi3>
 80011fa:	0003      	movs	r3, r0
 80011fc:	009a      	lsls	r2, r3, #2
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a03      	ldr	r2, [pc, #12]	@ (8001214 <DMA_CalcBaseAndBitshift+0x34>)
 8001206:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}
 8001210:	bffdfff8 	.word	0xbffdfff8
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e14f      	b.n	80014c8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0x28>
 800123e:	e140      	b.n	80014c2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	409a      	lsls	r2, r3
 800127a:	0013      	movs	r3, r2
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	2201      	movs	r2, #1
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	58d3      	ldr	r3, [r2, r3]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2207      	movs	r2, #7
 8001314:	4013      	ands	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2107      	movs	r1, #7
 800132e:	400b      	ands	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	401a      	ands	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	23c0      	movs	r3, #192	@ 0xc0
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d100      	bne.n	800138c <HAL_GPIO_Init+0x174>
 800138a:	e09a      	b.n	80014c2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <HAL_GPIO_Init+0x2c8>)
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	4b53      	ldr	r3, [pc, #332]	@ (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001392:	2101      	movs	r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <HAL_GPIO_Init+0x2c8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2201      	movs	r2, #1
 800139e:	4013      	ands	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a4:	4a4f      	ldr	r2, [pc, #316]	@ (80014e4 <HAL_GPIO_Init+0x2cc>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	589b      	ldr	r3, [r3, r2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4013      	ands	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	43da      	mvns	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	2390      	movs	r3, #144	@ 0x90
 80013cc:	05db      	lsls	r3, r3, #23
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a44      	ldr	r2, [pc, #272]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x1de>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a43      	ldr	r2, [pc, #268]	@ (80014ec <HAL_GPIO_Init+0x2d4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x1da>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a42      	ldr	r2, [pc, #264]	@ (80014f0 <HAL_GPIO_Init+0x2d8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x1d6>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013fa:	2300      	movs	r3, #0
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	2103      	movs	r1, #3
 8001400:	400a      	ands	r2, r1
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	@ (80014e4 <HAL_GPIO_Init+0x2cc>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	035b      	lsls	r3, r3, #13
 8001432:	4013      	ands	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800143e:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001444:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	039b      	lsls	r3, r3, #14
 800145c:	4013      	ands	r3, r2
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001468:	4b22      	ldr	r3, [pc, #136]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800146e:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	029b      	lsls	r3, r3, #10
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	025b      	lsls	r3, r3, #9
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	40da      	lsrs	r2, r3
 80014d0:	1e13      	subs	r3, r2, #0
 80014d2:	d000      	beq.n	80014d6 <HAL_GPIO_Init+0x2be>
 80014d4:	e6a8      	b.n	8001228 <HAL_GPIO_Init+0x10>
  } 
}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b006      	add	sp, #24
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	000a      	movs	r2, r1
 8001502:	1cbb      	adds	r3, r7, #2
 8001504:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	1cba      	adds	r2, r7, #2
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	4013      	ands	r3, r2
 8001510:	d004      	beq.n	800151c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001512:	230f      	movs	r3, #15
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e003      	b.n	8001524 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151c:	230f      	movs	r3, #15
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	781b      	ldrb	r3, [r3, #0]
  }
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b004      	add	sp, #16
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	0008      	movs	r0, r1
 800153c:	0011      	movs	r1, r2
 800153e:	1cbb      	adds	r3, r7, #2
 8001540:	1c02      	adds	r2, r0, #0
 8001542:	801a      	strh	r2, [r3, #0]
 8001544:	1c7b      	adds	r3, r7, #1
 8001546:	1c0a      	adds	r2, r1, #0
 8001548:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154a:	1c7b      	adds	r3, r7, #1
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001552:	1cbb      	adds	r3, r7, #2
 8001554:	881a      	ldrh	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800155a:	e003      	b.n	8001564 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155c:	1cbb      	adds	r3, r7, #2
 800155e:	881a      	ldrh	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001564:	46c0      	nop			@ (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e08f      	b.n	800169e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2241      	movs	r2, #65	@ 0x41
 8001582:	5c9b      	ldrb	r3, [r3, r2]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d107      	bne.n	800159a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2240      	movs	r2, #64	@ 0x40
 800158e:	2100      	movs	r1, #0
 8001590:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff f9a9 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2241      	movs	r2, #65	@ 0x41
 800159e:	2124      	movs	r1, #36	@ 0x24
 80015a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	438a      	bics	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	493b      	ldr	r1, [pc, #236]	@ (80016a8 <HAL_I2C_Init+0x13c>)
 80015bc:	400a      	ands	r2, r1
 80015be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4938      	ldr	r1, [pc, #224]	@ (80016ac <HAL_I2C_Init+0x140>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d108      	bne.n	80015ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2180      	movs	r1, #128	@ 0x80
 80015e2:	0209      	lsls	r1, r1, #8
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	e007      	b.n	80015fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2184      	movs	r1, #132	@ 0x84
 80015f4:	0209      	lsls	r1, r1, #8
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d109      	bne.n	8001616 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2180      	movs	r1, #128	@ 0x80
 800160e:	0109      	lsls	r1, r1, #4
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	e007      	b.n	8001626 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4923      	ldr	r1, [pc, #140]	@ (80016b0 <HAL_I2C_Init+0x144>)
 8001622:	400a      	ands	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4920      	ldr	r1, [pc, #128]	@ (80016b4 <HAL_I2C_Init+0x148>)
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	491a      	ldr	r1, [pc, #104]	@ (80016ac <HAL_I2C_Init+0x140>)
 8001642:	400a      	ands	r2, r1
 8001644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	431a      	orrs	r2, r3
 8001650:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69d9      	ldr	r1, [r3, #28]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2241      	movs	r2, #65	@ 0x41
 800168a:	2120      	movs	r1, #32
 800168c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2242      	movs	r2, #66	@ 0x42
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	f0ffffff 	.word	0xf0ffffff
 80016ac:	ffff7fff 	.word	0xffff7fff
 80016b0:	fffff7ff 	.word	0xfffff7ff
 80016b4:	02008000 	.word	0x02008000

080016b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	@ 0x24
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	000c      	movs	r4, r1
 80016c2:	0010      	movs	r0, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	230a      	movs	r3, #10
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	1c22      	adds	r2, r4, #0
 80016cc:	801a      	strh	r2, [r3, #0]
 80016ce:	2308      	movs	r3, #8
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	1c02      	adds	r2, r0, #0
 80016d4:	801a      	strh	r2, [r3, #0]
 80016d6:	1dbb      	adds	r3, r7, #6
 80016d8:	1c0a      	adds	r2, r1, #0
 80016da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2241      	movs	r2, #65	@ 0x41
 80016e0:	5c9b      	ldrb	r3, [r3, r2]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b20      	cmp	r3, #32
 80016e6:	d000      	beq.n	80016ea <HAL_I2C_Mem_Write+0x32>
 80016e8:	e10c      	b.n	8001904 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_I2C_Mem_Write+0x42>
 80016f0:	232c      	movs	r3, #44	@ 0x2c
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0ff      	b.n	8001906 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2240      	movs	r2, #64	@ 0x40
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_I2C_Mem_Write+0x5c>
 8001710:	2302      	movs	r3, #2
 8001712:	e0f8      	b.n	8001906 <HAL_I2C_Mem_Write+0x24e>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2240      	movs	r2, #64	@ 0x40
 8001718:	2101      	movs	r1, #1
 800171a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800171c:	f7ff fafc 	bl	8000d18 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	0219      	lsls	r1, r3, #8
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2319      	movs	r3, #25
 8001730:	2201      	movs	r2, #1
 8001732:	f000 fc07 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0e3      	b.n	8001906 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2241      	movs	r2, #65	@ 0x41
 8001742:	2121      	movs	r1, #33	@ 0x21
 8001744:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2242      	movs	r2, #66	@ 0x42
 800174a:	2140      	movs	r1, #64	@ 0x40
 800174c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	222c      	movs	r2, #44	@ 0x2c
 800175e:	18ba      	adds	r2, r7, r2
 8001760:	8812      	ldrh	r2, [r2, #0]
 8001762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800176a:	1dbb      	adds	r3, r7, #6
 800176c:	881c      	ldrh	r4, [r3, #0]
 800176e:	2308      	movs	r3, #8
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	230a      	movs	r3, #10
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	8819      	ldrh	r1, [r3, #0]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	0023      	movs	r3, r4
 8001786:	f000 faf5 	bl	8001d74 <I2C_RequestMemoryWrite>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d005      	beq.n	800179a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2240      	movs	r2, #64	@ 0x40
 8001792:	2100      	movs	r1, #0
 8001794:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0b5      	b.n	8001906 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2bff      	cmp	r3, #255	@ 0xff
 80017a2:	d911      	bls.n	80017c8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	22ff      	movs	r2, #255	@ 0xff
 80017a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	045c      	lsls	r4, r3, #17
 80017b4:	230a      	movs	r3, #10
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	8819      	ldrh	r1, [r3, #0]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	0023      	movs	r3, r4
 80017c2:	f000 fd99 	bl	80022f8 <I2C_TransferConfig>
 80017c6:	e012      	b.n	80017ee <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	049c      	lsls	r4, r3, #18
 80017dc:	230a      	movs	r3, #10
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	8819      	ldrh	r1, [r3, #0]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	0023      	movs	r3, r4
 80017ea:	f000 fd85 	bl	80022f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f000 fbfd 	bl	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e081      	b.n	8001906 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181c:	b29b      	uxth	r3, r3
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d03a      	beq.n	80018b2 <HAL_I2C_Mem_Write+0x1fa>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	d136      	bne.n	80018b2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	0013      	movs	r3, r2
 800184e:	2200      	movs	r2, #0
 8001850:	2180      	movs	r1, #128	@ 0x80
 8001852:	f000 fb77 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e053      	b.n	8001906 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	2bff      	cmp	r3, #255	@ 0xff
 8001866:	d911      	bls.n	800188c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	22ff      	movs	r2, #255	@ 0xff
 800186c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001872:	b2da      	uxtb	r2, r3
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	045c      	lsls	r4, r3, #17
 8001878:	230a      	movs	r3, #10
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	8819      	ldrh	r1, [r3, #0]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	0023      	movs	r3, r4
 8001886:	f000 fd37 	bl	80022f8 <I2C_TransferConfig>
 800188a:	e012      	b.n	80018b2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189a:	b2da      	uxtb	r2, r3
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	049c      	lsls	r4, r3, #18
 80018a0:	230a      	movs	r3, #10
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	8819      	ldrh	r1, [r3, #0]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	0023      	movs	r3, r4
 80018ae:	f000 fd23 	bl	80022f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d198      	bne.n	80017ee <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fbdc 	bl	8002080 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e01a      	b.n	8001906 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2220      	movs	r2, #32
 80018d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	490b      	ldr	r1, [pc, #44]	@ (8001910 <HAL_I2C_Mem_Write+0x258>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2241      	movs	r2, #65	@ 0x41
 80018ec:	2120      	movs	r1, #32
 80018ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2242      	movs	r2, #66	@ 0x42
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2240      	movs	r2, #64	@ 0x40
 80018fc:	2100      	movs	r1, #0
 80018fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
  }
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b007      	add	sp, #28
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	fe00e800 	.word	0xfe00e800

08001914 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	000c      	movs	r4, r1
 800191e:	0010      	movs	r0, r2
 8001920:	0019      	movs	r1, r3
 8001922:	230a      	movs	r3, #10
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	1c22      	adds	r2, r4, #0
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	2308      	movs	r3, #8
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	1c02      	adds	r2, r0, #0
 8001930:	801a      	strh	r2, [r3, #0]
 8001932:	1dbb      	adds	r3, r7, #6
 8001934:	1c0a      	adds	r2, r1, #0
 8001936:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2241      	movs	r2, #65	@ 0x41
 800193c:	5c9b      	ldrb	r3, [r3, r2]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b20      	cmp	r3, #32
 8001942:	d000      	beq.n	8001946 <HAL_I2C_Mem_Read+0x32>
 8001944:	e110      	b.n	8001b68 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_I2C_Mem_Read+0x42>
 800194c:	232c      	movs	r3, #44	@ 0x2c
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d105      	bne.n	8001962 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2280      	movs	r2, #128	@ 0x80
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e103      	b.n	8001b6a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2240      	movs	r2, #64	@ 0x40
 8001966:	5c9b      	ldrb	r3, [r3, r2]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_I2C_Mem_Read+0x5c>
 800196c:	2302      	movs	r3, #2
 800196e:	e0fc      	b.n	8001b6a <HAL_I2C_Mem_Read+0x256>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2240      	movs	r2, #64	@ 0x40
 8001974:	2101      	movs	r1, #1
 8001976:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001978:	f7ff f9ce 	bl	8000d18 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	0219      	lsls	r1, r3, #8
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2319      	movs	r3, #25
 800198c:	2201      	movs	r2, #1
 800198e:	f000 fad9 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0e7      	b.n	8001b6a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2241      	movs	r2, #65	@ 0x41
 800199e:	2122      	movs	r1, #34	@ 0x22
 80019a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2242      	movs	r2, #66	@ 0x42
 80019a6:	2140      	movs	r1, #64	@ 0x40
 80019a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	222c      	movs	r2, #44	@ 0x2c
 80019ba:	18ba      	adds	r2, r7, r2
 80019bc:	8812      	ldrh	r2, [r2, #0]
 80019be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c6:	1dbb      	adds	r3, r7, #6
 80019c8:	881c      	ldrh	r4, [r3, #0]
 80019ca:	2308      	movs	r3, #8
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	881a      	ldrh	r2, [r3, #0]
 80019d0:	230a      	movs	r3, #10
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	8819      	ldrh	r1, [r3, #0]
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	0023      	movs	r3, r4
 80019e2:	f000 fa2b 	bl	8001e3c <I2C_RequestMemoryRead>
 80019e6:	1e03      	subs	r3, r0, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2240      	movs	r2, #64	@ 0x40
 80019ee:	2100      	movs	r1, #0
 80019f0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0b9      	b.n	8001b6a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2bff      	cmp	r3, #255	@ 0xff
 80019fe:	d911      	bls.n	8001a24 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	045c      	lsls	r4, r3, #17
 8001a10:	230a      	movs	r3, #10
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	8819      	ldrh	r1, [r3, #0]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	4b56      	ldr	r3, [pc, #344]	@ (8001b74 <HAL_I2C_Mem_Read+0x260>)
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	0023      	movs	r3, r4
 8001a1e:	f000 fc6b 	bl	80022f8 <I2C_TransferConfig>
 8001a22:	e012      	b.n	8001a4a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	049c      	lsls	r4, r3, #18
 8001a38:	230a      	movs	r3, #10
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	8819      	ldrh	r1, [r3, #0]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	4b4c      	ldr	r3, [pc, #304]	@ (8001b74 <HAL_I2C_Mem_Read+0x260>)
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	0023      	movs	r3, r4
 8001a46:	f000 fc57 	bl	80022f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	0013      	movs	r3, r2
 8001a54:	2200      	movs	r2, #0
 8001a56:	2104      	movs	r1, #4
 8001a58:	f000 fa74 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e082      	b.n	8001b6a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d03a      	beq.n	8001b16 <HAL_I2C_Mem_Read+0x202>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d136      	bne.n	8001b16 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2180      	movs	r1, #128	@ 0x80
 8001ab6:	f000 fa45 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e053      	b.n	8001b6a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2bff      	cmp	r3, #255	@ 0xff
 8001aca:	d911      	bls.n	8001af0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	045c      	lsls	r4, r3, #17
 8001adc:	230a      	movs	r3, #10
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	8819      	ldrh	r1, [r3, #0]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	0023      	movs	r3, r4
 8001aea:	f000 fc05 	bl	80022f8 <I2C_TransferConfig>
 8001aee:	e012      	b.n	8001b16 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	049c      	lsls	r4, r3, #18
 8001b04:	230a      	movs	r3, #10
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	8819      	ldrh	r1, [r3, #0]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	0023      	movs	r3, r4
 8001b12:	f000 fbf1 	bl	80022f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d194      	bne.n	8001a4a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 faaa 	bl	8002080 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e01a      	b.n	8001b6a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	490c      	ldr	r1, [pc, #48]	@ (8001b78 <HAL_I2C_Mem_Read+0x264>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2241      	movs	r2, #65	@ 0x41
 8001b50:	2120      	movs	r1, #32
 8001b52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2242      	movs	r2, #66	@ 0x42
 8001b58:	2100      	movs	r1, #0
 8001b5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2240      	movs	r2, #64	@ 0x40
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
  }
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b007      	add	sp, #28
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	80002400 	.word	0x80002400
 8001b78:	fe00e800 	.word	0xfe00e800

08001b7c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	230a      	movs	r3, #10
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	1c0a      	adds	r2, r1, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2241      	movs	r2, #65	@ 0x41
 8001b98:	5c9b      	ldrb	r3, [r3, r2]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d000      	beq.n	8001ba2 <HAL_I2C_IsDeviceReady+0x26>
 8001ba0:	e0df      	b.n	8001d62 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	401a      	ands	r2, r3
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d101      	bne.n	8001bba <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e0d4      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2240      	movs	r2, #64	@ 0x40
 8001bbe:	5c9b      	ldrb	r3, [r3, r2]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2C_IsDeviceReady+0x4c>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e0cd      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x1e8>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2240      	movs	r2, #64	@ 0x40
 8001bcc:	2101      	movs	r1, #1
 8001bce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2241      	movs	r2, #65	@ 0x41
 8001bd4:	2124      	movs	r1, #36	@ 0x24
 8001bd6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_I2C_IsDeviceReady+0x7a>
 8001be6:	230a      	movs	r3, #10
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	059b      	lsls	r3, r3, #22
 8001bee:	0d9b      	lsrs	r3, r3, #22
 8001bf0:	4a5e      	ldr	r2, [pc, #376]	@ (8001d6c <HAL_I2C_IsDeviceReady+0x1f0>)
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	e006      	b.n	8001c04 <HAL_I2C_IsDeviceReady+0x88>
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	059b      	lsls	r3, r3, #22
 8001bfe:	0d9b      	lsrs	r3, r3, #22
 8001c00:	4a5b      	ldr	r2, [pc, #364]	@ (8001d70 <HAL_I2C_IsDeviceReady+0x1f4>)
 8001c02:	431a      	orrs	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f885 	bl	8000d18 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	3b20      	subs	r3, #32
 8001c1e:	425a      	negs	r2, r3
 8001c20:	4153      	adcs	r3, r2
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	231f      	movs	r3, #31
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2210      	movs	r2, #16
 8001c32:	4013      	ands	r3, r2
 8001c34:	3b10      	subs	r3, #16
 8001c36:	425a      	negs	r2, r3
 8001c38:	4153      	adcs	r3, r2
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	231e      	movs	r3, #30
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c42:	e035      	b.n	8001cb0 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	d01a      	beq.n	8001c80 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c4a:	f7ff f865 	bl	8000d18 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d302      	bcc.n	8001c60 <HAL_I2C_IsDeviceReady+0xe4>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2241      	movs	r2, #65	@ 0x41
 8001c64:	2120      	movs	r1, #32
 8001c66:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2240      	movs	r2, #64	@ 0x40
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e071      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2220      	movs	r2, #32
 8001c88:	4013      	ands	r3, r2
 8001c8a:	3b20      	subs	r3, #32
 8001c8c:	425a      	negs	r2, r3
 8001c8e:	4153      	adcs	r3, r2
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	231f      	movs	r3, #31
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	3b10      	subs	r3, #16
 8001ca4:	425a      	negs	r2, r3
 8001ca6:	4153      	adcs	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	231e      	movs	r3, #30
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001cb0:	231f      	movs	r3, #31
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d104      	bne.n	8001cc4 <HAL_I2C_IsDeviceReady+0x148>
 8001cba:	231e      	movs	r3, #30
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0bf      	beq.n	8001c44 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d01a      	beq.n	8001d08 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	0013      	movs	r3, r2
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2120      	movs	r1, #32
 8001ce0:	f000 f930 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001ce4:	1e03      	subs	r3, r0, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e03b      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2241      	movs	r2, #65	@ 0x41
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2240      	movs	r2, #64	@ 0x40
 8001d00:	2100      	movs	r1, #0
 8001d02:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e02d      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	0013      	movs	r3, r2
 8001d12:	2200      	movs	r2, #0
 8001d14:	2120      	movs	r1, #32
 8001d16:	f000 f915 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e020      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2210      	movs	r2, #16
 8001d28:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d900      	bls.n	8001d42 <HAL_I2C_IsDeviceReady+0x1c6>
 8001d40:	e74d      	b.n	8001bde <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2241      	movs	r2, #65	@ 0x41
 8001d46:	2120      	movs	r1, #32
 8001d48:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	2220      	movs	r2, #32
 8001d50:	431a      	orrs	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2240      	movs	r2, #64	@ 0x40
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
  }
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b008      	add	sp, #32
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	02002000 	.word	0x02002000
 8001d70:	02002800 	.word	0x02002800

08001d74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	000c      	movs	r4, r1
 8001d7e:	0010      	movs	r0, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	250a      	movs	r5, #10
 8001d84:	197b      	adds	r3, r7, r5
 8001d86:	1c22      	adds	r2, r4, #0
 8001d88:	801a      	strh	r2, [r3, #0]
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	1c02      	adds	r2, r0, #0
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	1dbb      	adds	r3, r7, #6
 8001d94:	1c0a      	adds	r2, r1, #0
 8001d96:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d98:	1dbb      	adds	r3, r7, #6
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	045c      	lsls	r4, r3, #17
 8001da2:	197b      	adds	r3, r7, r5
 8001da4:	8819      	ldrh	r1, [r3, #0]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <I2C_RequestMemoryWrite+0xc4>)
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	0023      	movs	r3, r4
 8001dae:	f000 faa3 	bl	80022f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 f91b 	bl	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dbe:	1e03      	subs	r3, r0, #0
 8001dc0:	d001      	beq.n	8001dc6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e033      	b.n	8001e2e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dc6:	1dbb      	adds	r3, r7, #6
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dce:	2308      	movs	r3, #8
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ddc:	e019      	b.n	8001e12 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dde:	2308      	movs	r3, #8
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df2:	6a39      	ldr	r1, [r7, #32]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f8fc 	bl	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d001      	beq.n	8001e04 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e014      	b.n	8001e2e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e04:	2308      	movs	r3, #8
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2180      	movs	r1, #128	@ 0x80
 8001e20:	f000 f890 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	1e03      	subs	r3, r0, #0
 8001e26:	d001      	beq.n	8001e2c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	80002000 	.word	0x80002000

08001e3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	000c      	movs	r4, r1
 8001e46:	0010      	movs	r0, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	250a      	movs	r5, #10
 8001e4c:	197b      	adds	r3, r7, r5
 8001e4e:	1c22      	adds	r2, r4, #0
 8001e50:	801a      	strh	r2, [r3, #0]
 8001e52:	2308      	movs	r3, #8
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	1c02      	adds	r2, r0, #0
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	1dbb      	adds	r3, r7, #6
 8001e5c:	1c0a      	adds	r2, r1, #0
 8001e5e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e60:	1dbb      	adds	r3, r7, #6
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	197b      	adds	r3, r7, r5
 8001e68:	8819      	ldrh	r1, [r3, #0]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <I2C_RequestMemoryRead+0xc0>)
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2300      	movs	r3, #0
 8001e72:	f000 fa41 	bl	80022f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e78:	6a39      	ldr	r1, [r7, #32]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f8b9 	bl	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d001      	beq.n	8001e8a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e033      	b.n	8001ef2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8a:	1dbb      	adds	r3, r7, #6
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e92:	2308      	movs	r3, #8
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ea0:	e019      	b.n	8001ed6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb6:	6a39      	ldr	r1, [r7, #32]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 f89a 	bl	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d001      	beq.n	8001ec8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e014      	b.n	8001ef2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ec8:	2308      	movs	r3, #8
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed6:	6a3a      	ldr	r2, [r7, #32]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	0013      	movs	r3, r2
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2140      	movs	r1, #64	@ 0x40
 8001ee4:	f000 f82e 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d001      	beq.n	8001ef0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	80002000 	.word	0x80002000

08001f00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d103      	bne.n	8001f1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d007      	beq.n	8001f3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	619a      	str	r2, [r3, #24]
  }
}
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f54:	e03a      	b.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 f8d3 	bl	8002108 <I2C_IsErrorOccurred>
 8001f62:	1e03      	subs	r3, r0, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e040      	b.n	8001fec <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	d02d      	beq.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f70:	f7fe fed2 	bl	8000d18 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d302      	bcc.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d122      	bne.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	425a      	negs	r2, r3
 8001f96:	4153      	adcs	r3, r2
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d113      	bne.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	2220      	movs	r2, #32
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2241      	movs	r2, #65	@ 0x41
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2242      	movs	r2, #66	@ 0x42
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2240      	movs	r2, #64	@ 0x40
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e00f      	b.n	8001fec <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	425a      	negs	r2, r3
 8001fdc:	4153      	adcs	r3, r2
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d0b5      	beq.n	8001f56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002000:	e032      	b.n	8002068 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0018      	movs	r0, r3
 800200a:	f000 f87d 	bl	8002108 <I2C_IsErrorOccurred>
 800200e:	1e03      	subs	r3, r0, #0
 8002010:	d001      	beq.n	8002016 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e030      	b.n	8002078 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	3301      	adds	r3, #1
 800201a:	d025      	beq.n	8002068 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201c:	f7fe fe7c 	bl	8000d18 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	429a      	cmp	r2, r3
 800202a:	d302      	bcc.n	8002032 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11a      	bne.n	8002068 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d013      	beq.n	8002068 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	2220      	movs	r2, #32
 8002046:	431a      	orrs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2241      	movs	r2, #65	@ 0x41
 8002050:	2120      	movs	r1, #32
 8002052:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2242      	movs	r2, #66	@ 0x42
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2240      	movs	r2, #64	@ 0x40
 8002060:	2100      	movs	r1, #0
 8002062:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e007      	b.n	8002078 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d1c5      	bne.n	8002002 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b004      	add	sp, #16
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800208c:	e02f      	b.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f837 	bl	8002108 <I2C_IsErrorOccurred>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d001      	beq.n	80020a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e02d      	b.n	80020fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7fe fe39 	bl	8000d18 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d302      	bcc.n	80020b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11a      	bne.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2220      	movs	r2, #32
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d013      	beq.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	2220      	movs	r2, #32
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2241      	movs	r2, #65	@ 0x41
 80020d6:	2120      	movs	r1, #32
 80020d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2242      	movs	r2, #66	@ 0x42
 80020de:	2100      	movs	r1, #0
 80020e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2240      	movs	r2, #64	@ 0x40
 80020e6:	2100      	movs	r1, #0
 80020e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e007      	b.n	80020fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2220      	movs	r2, #32
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d1c8      	bne.n	800208e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2327      	movs	r3, #39	@ 0x27
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2210      	movs	r2, #16
 8002130:	4013      	ands	r3, r2
 8002132:	d100      	bne.n	8002136 <I2C_IsErrorOccurred+0x2e>
 8002134:	e079      	b.n	800222a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2210      	movs	r2, #16
 800213c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800213e:	e057      	b.n	80021f0 <I2C_IsErrorOccurred+0xe8>
 8002140:	2227      	movs	r2, #39	@ 0x27
 8002142:	18bb      	adds	r3, r7, r2
 8002144:	18ba      	adds	r2, r7, r2
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3301      	adds	r3, #1
 800214e:	d04f      	beq.n	80021f0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002150:	f7fe fde2 	bl	8000d18 <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d302      	bcc.n	8002166 <I2C_IsErrorOccurred+0x5e>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d144      	bne.n	80021f0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	01db      	lsls	r3, r3, #7
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002174:	2013      	movs	r0, #19
 8002176:	183b      	adds	r3, r7, r0
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	2142      	movs	r1, #66	@ 0x42
 800217c:	5c52      	ldrb	r2, [r2, r1]
 800217e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	401a      	ands	r2, r3
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	429a      	cmp	r2, r3
 8002192:	d126      	bne.n	80021e2 <I2C_IsErrorOccurred+0xda>
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	01db      	lsls	r3, r3, #7
 800219a:	429a      	cmp	r2, r3
 800219c:	d021      	beq.n	80021e2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d01d      	beq.n	80021e2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2180      	movs	r1, #128	@ 0x80
 80021b2:	01c9      	lsls	r1, r1, #7
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021b8:	f7fe fdae 	bl	8000d18 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c0:	e00f      	b.n	80021e2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021c2:	f7fe fda9 	bl	8000d18 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b19      	cmp	r3, #25
 80021ce:	d908      	bls.n	80021e2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	2220      	movs	r2, #32
 80021d4:	4313      	orrs	r3, r2
 80021d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021d8:	2327      	movs	r3, #39	@ 0x27
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]

              break;
 80021e0:	e006      	b.n	80021f0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2220      	movs	r2, #32
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d1e8      	bne.n	80021c2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2220      	movs	r2, #32
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d004      	beq.n	8002208 <I2C_IsErrorOccurred+0x100>
 80021fe:	2327      	movs	r3, #39	@ 0x27
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d09b      	beq.n	8002140 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002208:	2327      	movs	r3, #39	@ 0x27
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2220      	movs	r2, #32
 8002218:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	2204      	movs	r2, #4
 800221e:	4313      	orrs	r3, r2
 8002220:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002222:	2327      	movs	r3, #39	@ 0x27
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4013      	ands	r3, r2
 800223a:	d00c      	beq.n	8002256 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2201      	movs	r2, #1
 8002240:	4313      	orrs	r3, r2
 8002242:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	0052      	lsls	r2, r2, #1
 800224c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800224e:	2327      	movs	r3, #39	@ 0x27
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4013      	ands	r3, r2
 800225e:	d00c      	beq.n	800227a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2208      	movs	r2, #8
 8002264:	4313      	orrs	r3, r2
 8002266:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	00d2      	lsls	r2, r2, #3
 8002270:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002272:	2327      	movs	r3, #39	@ 0x27
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4013      	ands	r3, r2
 8002282:	d00c      	beq.n	800229e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2202      	movs	r2, #2
 8002288:	4313      	orrs	r3, r2
 800228a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002296:	2327      	movs	r3, #39	@ 0x27
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800229e:	2327      	movs	r3, #39	@ 0x27
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01d      	beq.n	80022e4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7ff fe28 	bl	8001f00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	490e      	ldr	r1, [pc, #56]	@ (80022f4 <I2C_IsErrorOccurred+0x1ec>)
 80022bc:	400a      	ands	r2, r1
 80022be:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2241      	movs	r2, #65	@ 0x41
 80022d0:	2120      	movs	r1, #32
 80022d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2242      	movs	r2, #66	@ 0x42
 80022d8:	2100      	movs	r1, #0
 80022da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	@ 0x40
 80022e0:	2100      	movs	r1, #0
 80022e2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80022e4:	2327      	movs	r3, #39	@ 0x27
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	781b      	ldrb	r3, [r3, #0]
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b00a      	add	sp, #40	@ 0x28
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	fe00e800 	.word	0xfe00e800

080022f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	0008      	movs	r0, r1
 8002302:	0011      	movs	r1, r2
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	240a      	movs	r4, #10
 8002308:	193b      	adds	r3, r7, r4
 800230a:	1c02      	adds	r2, r0, #0
 800230c:	801a      	strh	r2, [r3, #0]
 800230e:	2009      	movs	r0, #9
 8002310:	183b      	adds	r3, r7, r0
 8002312:	1c0a      	adds	r2, r1, #0
 8002314:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002316:	193b      	adds	r3, r7, r4
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	059b      	lsls	r3, r3, #22
 800231c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800231e:	183b      	adds	r3, r7, r0
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	0419      	lsls	r1, r3, #16
 8002324:	23ff      	movs	r3, #255	@ 0xff
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800232a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002332:	4313      	orrs	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002342:	0d51      	lsrs	r1, r2, #21
 8002344:	2280      	movs	r2, #128	@ 0x80
 8002346:	00d2      	lsls	r2, r2, #3
 8002348:	400a      	ands	r2, r1
 800234a:	4907      	ldr	r1, [pc, #28]	@ (8002368 <I2C_TransferConfig+0x70>)
 800234c:	430a      	orrs	r2, r1
 800234e:	43d2      	mvns	r2, r2
 8002350:	401a      	ands	r2, r3
 8002352:	0011      	movs	r1, r2
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b007      	add	sp, #28
 8002364:	bd90      	pop	{r4, r7, pc}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	03ff63ff 	.word	0x03ff63ff

0800236c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2241      	movs	r2, #65	@ 0x41
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	d138      	bne.n	80023f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2240      	movs	r2, #64	@ 0x40
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800238c:	2302      	movs	r3, #2
 800238e:	e032      	b.n	80023f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	2101      	movs	r1, #1
 8002396:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2241      	movs	r2, #65	@ 0x41
 800239c:	2124      	movs	r1, #36	@ 0x24
 800239e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2101      	movs	r1, #1
 80023ac:	438a      	bics	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4911      	ldr	r1, [pc, #68]	@ (8002400 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80023bc:	400a      	ands	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2241      	movs	r2, #65	@ 0x41
 80023e4:	2120      	movs	r1, #32
 80023e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2240      	movs	r2, #64	@ 0x40
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b002      	add	sp, #8
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	ffffefff 	.word	0xffffefff

08002404 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2241      	movs	r2, #65	@ 0x41
 8002412:	5c9b      	ldrb	r3, [r3, r2]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b20      	cmp	r3, #32
 8002418:	d139      	bne.n	800248e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2240      	movs	r2, #64	@ 0x40
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002424:	2302      	movs	r3, #2
 8002426:	e033      	b.n	8002490 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2241      	movs	r2, #65	@ 0x41
 8002434:	2124      	movs	r1, #36	@ 0x24
 8002436:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	438a      	bics	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a11      	ldr	r2, [pc, #68]	@ (8002498 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2241      	movs	r2, #65	@ 0x41
 800247e:	2120      	movs	r1, #32
 8002480:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2240      	movs	r2, #64	@ 0x40
 8002486:	2100      	movs	r1, #0
 8002488:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b004      	add	sp, #16
 8002496:	bd80      	pop	{r7, pc}
 8002498:	fffff0ff 	.word	0xfffff0ff

0800249c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024b6:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	220c      	movs	r2, #12
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d002      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x30>
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x36>
 80024ca:	e02c      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ce:	613b      	str	r3, [r7, #16]
      break;
 80024d0:	e02c      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	0c9b      	lsrs	r3, r3, #18
 80024d6:	220f      	movs	r2, #15
 80024d8:	4013      	ands	r3, r2
 80024da:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024dc:	5cd3      	ldrb	r3, [r2, r3]
 80024de:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024e0:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	220f      	movs	r2, #15
 80024e6:	4013      	ands	r3, r2
 80024e8:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xa8>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	025b      	lsls	r3, r3, #9
 80024f4:	4013      	ands	r3, r2
 80024f6:	d009      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fc:	f7fd fe0e 	bl	800011c <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	001a      	movs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4353      	muls	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e009      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	000a      	movs	r2, r1
 8002510:	0152      	lsls	r2, r2, #5
 8002512:	1a52      	subs	r2, r2, r1
 8002514:	0193      	lsls	r3, r2, #6
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	185b      	adds	r3, r3, r1
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
      break;
 8002524:	e002      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002528:	613b      	str	r3, [r7, #16]
      break;
 800252a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800252c:	693b      	ldr	r3, [r7, #16]
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b006      	add	sp, #24
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	40021000 	.word	0x40021000
 800253c:	007a1200 	.word	0x007a1200
 8002540:	080046b8 	.word	0x080046b8
 8002544:	080046c8 	.word	0x080046c8

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b02      	ldr	r3, [pc, #8]	@ (8002558 <HAL_RCC_GetHCLKFreq+0x10>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002560:	f7ff fff2 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002564:	0001      	movs	r1, r0
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	2207      	movs	r2, #7
 800256e:	4013      	ands	r3, r2
 8002570:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	40d9      	lsrs	r1, r3
 8002576:	000b      	movs	r3, r1
}    
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	40021000 	.word	0x40021000
 8002584:	080046b0 	.word	0x080046b0

08002588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e044      	b.n	8002624 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2278      	movs	r2, #120	@ 0x78
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7fe f9eb 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2224      	movs	r2, #36	@ 0x24
 80025b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2101      	movs	r1, #1
 80025c4:	438a      	bics	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 fa86 	bl	8002ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 f942 	bl	8002864 <UART_SetConfig>
 80025e0:	0003      	movs	r3, r0
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e01c      	b.n	8002624 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	490d      	ldr	r1, [pc, #52]	@ (800262c <HAL_UART_Init+0xa4>)
 80025f6:	400a      	ands	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2108      	movs	r1, #8
 8002606:	438a      	bics	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f000 fb15 	bl	8002c4c <UART_CheckIdleState>
 8002622:	0003      	movs	r3, r0
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}
 800262c:	fffff7ff 	.word	0xfffff7ff

08002630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	1dbb      	adds	r3, r7, #6
 800263e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002644:	2b20      	cmp	r3, #32
 8002646:	d000      	beq.n	800264a <HAL_UART_Transmit+0x1a>
 8002648:	e08c      	b.n	8002764 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_UART_Transmit+0x28>
 8002650:	1dbb      	adds	r3, r7, #6
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e084      	b.n	8002766 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	015b      	lsls	r3, r3, #5
 8002664:	429a      	cmp	r2, r3
 8002666:	d109      	bne.n	800267c <HAL_UART_Transmit+0x4c>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2201      	movs	r2, #1
 8002674:	4013      	ands	r3, r2
 8002676:	d001      	beq.n	800267c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e074      	b.n	8002766 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2284      	movs	r2, #132	@ 0x84
 8002680:	2100      	movs	r1, #0
 8002682:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2221      	movs	r2, #33	@ 0x21
 8002688:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800268a:	f7fe fb45 	bl	8000d18 <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1dba      	adds	r2, r7, #6
 8002696:	2150      	movs	r1, #80	@ 0x50
 8002698:	8812      	ldrh	r2, [r2, #0]
 800269a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1dba      	adds	r2, r7, #6
 80026a0:	2152      	movs	r1, #82	@ 0x52
 80026a2:	8812      	ldrh	r2, [r2, #0]
 80026a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	015b      	lsls	r3, r3, #5
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d108      	bne.n	80026c4 <HAL_UART_Transmit+0x94>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d104      	bne.n	80026c4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e003      	b.n	80026cc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026cc:	e02f      	b.n	800272e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	0013      	movs	r3, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	@ 0x80
 80026dc:	f000 fb5e 	bl	8002d9c <UART_WaitOnFlagUntilTimeout>
 80026e0:	1e03      	subs	r3, r0, #0
 80026e2:	d004      	beq.n	80026ee <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e03b      	b.n	8002766 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	05d2      	lsls	r2, r2, #23
 80026fe:	0dd2      	lsrs	r2, r2, #23
 8002700:	b292      	uxth	r2, r2
 8002702:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	3302      	adds	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e007      	b.n	800271c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2252      	movs	r2, #82	@ 0x52
 8002720:	5a9b      	ldrh	r3, [r3, r2]
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b299      	uxth	r1, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2252      	movs	r2, #82	@ 0x52
 800272c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2252      	movs	r2, #82	@ 0x52
 8002732:	5a9b      	ldrh	r3, [r3, r2]
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1c9      	bne.n	80026ce <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	0013      	movs	r3, r2
 8002744:	2200      	movs	r2, #0
 8002746:	2140      	movs	r1, #64	@ 0x40
 8002748:	f000 fb28 	bl	8002d9c <UART_WaitOnFlagUntilTimeout>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d004      	beq.n	800275a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e005      	b.n	8002766 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b008      	add	sp, #32
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b088      	sub	sp, #32
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	1dbb      	adds	r3, r7, #6
 800277a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2280      	movs	r2, #128	@ 0x80
 8002780:	589b      	ldr	r3, [r3, r2]
 8002782:	2b20      	cmp	r3, #32
 8002784:	d145      	bne.n	8002812 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_UART_Receive_DMA+0x26>
 800278c:	1dbb      	adds	r3, r7, #6
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e03d      	b.n	8002814 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	015b      	lsls	r3, r3, #5
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d109      	bne.n	80027b8 <HAL_UART_Receive_DMA+0x4a>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4013      	ands	r3, r2
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e02d      	b.n	8002814 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	4013      	ands	r3, r2
 80027ca:	d019      	beq.n	8002800 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027cc:	f3ef 8310 	mrs	r3, PRIMASK
 80027d0:	613b      	str	r3, [r7, #16]
  return(result);
 80027d2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	2301      	movs	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f383 8810 	msr	PRIMASK, r3
}
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2180      	movs	r1, #128	@ 0x80
 80027ee:	04c9      	lsls	r1, r1, #19
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f383 8810 	msr	PRIMASK, r3
}
 80027fe:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002800:	1dbb      	adds	r3, r7, #6
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 fb37 	bl	8002e7c <UART_Start_Receive_DMA>
 800280e:	0003      	movs	r3, r0
 8002810:	e000      	b.n	8002814 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
  }
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b008      	add	sp, #32
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002824:	46c0      	nop			@ (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002834:	46c0      	nop			@ (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	000a      	movs	r2, r1
 8002856:	1cbb      	adds	r3, r7, #2
 8002858:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800286c:	231e      	movs	r3, #30
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a8d      	ldr	r2, [pc, #564]	@ (8002ac8 <UART_SetConfig+0x264>)
 8002894:	4013      	ands	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a88      	ldr	r2, [pc, #544]	@ (8002acc <UART_SetConfig+0x268>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ad0 <UART_SetConfig+0x26c>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	430a      	orrs	r2, r1
 80028de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a7b      	ldr	r2, [pc, #492]	@ (8002ad4 <UART_SetConfig+0x270>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d127      	bne.n	800293a <UART_SetConfig+0xd6>
 80028ea:	4b7b      	ldr	r3, [pc, #492]	@ (8002ad8 <UART_SetConfig+0x274>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	2203      	movs	r2, #3
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d00d      	beq.n	8002912 <UART_SetConfig+0xae>
 80028f6:	d81b      	bhi.n	8002930 <UART_SetConfig+0xcc>
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d014      	beq.n	8002926 <UART_SetConfig+0xc2>
 80028fc:	d818      	bhi.n	8002930 <UART_SetConfig+0xcc>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <UART_SetConfig+0xa4>
 8002902:	2b01      	cmp	r3, #1
 8002904:	d00a      	beq.n	800291c <UART_SetConfig+0xb8>
 8002906:	e013      	b.n	8002930 <UART_SetConfig+0xcc>
 8002908:	231f      	movs	r3, #31
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	e021      	b.n	8002956 <UART_SetConfig+0xf2>
 8002912:	231f      	movs	r3, #31
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	2202      	movs	r2, #2
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e01c      	b.n	8002956 <UART_SetConfig+0xf2>
 800291c:	231f      	movs	r3, #31
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2204      	movs	r2, #4
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e017      	b.n	8002956 <UART_SetConfig+0xf2>
 8002926:	231f      	movs	r3, #31
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2208      	movs	r2, #8
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e012      	b.n	8002956 <UART_SetConfig+0xf2>
 8002930:	231f      	movs	r3, #31
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2210      	movs	r2, #16
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e00d      	b.n	8002956 <UART_SetConfig+0xf2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a67      	ldr	r2, [pc, #412]	@ (8002adc <UART_SetConfig+0x278>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d104      	bne.n	800294e <UART_SetConfig+0xea>
 8002944:	231f      	movs	r3, #31
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e003      	b.n	8002956 <UART_SetConfig+0xf2>
 800294e:	231f      	movs	r3, #31
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	2210      	movs	r2, #16
 8002954:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	429a      	cmp	r2, r3
 8002960:	d15c      	bne.n	8002a1c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002962:	231f      	movs	r3, #31
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d015      	beq.n	8002998 <UART_SetConfig+0x134>
 800296c:	dc18      	bgt.n	80029a0 <UART_SetConfig+0x13c>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00d      	beq.n	800298e <UART_SetConfig+0x12a>
 8002972:	dc15      	bgt.n	80029a0 <UART_SetConfig+0x13c>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <UART_SetConfig+0x11a>
 8002978:	2b02      	cmp	r3, #2
 800297a:	d005      	beq.n	8002988 <UART_SetConfig+0x124>
 800297c:	e010      	b.n	80029a0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800297e:	f7ff fded 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8002982:	0003      	movs	r3, r0
 8002984:	61bb      	str	r3, [r7, #24]
        break;
 8002986:	e012      	b.n	80029ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002988:	4b55      	ldr	r3, [pc, #340]	@ (8002ae0 <UART_SetConfig+0x27c>)
 800298a:	61bb      	str	r3, [r7, #24]
        break;
 800298c:	e00f      	b.n	80029ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800298e:	f7ff fd85 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8002992:	0003      	movs	r3, r0
 8002994:	61bb      	str	r3, [r7, #24]
        break;
 8002996:	e00a      	b.n	80029ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	61bb      	str	r3, [r7, #24]
        break;
 800299e:	e006      	b.n	80029ae <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029a4:	231e      	movs	r3, #30
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
        break;
 80029ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d100      	bne.n	80029b6 <UART_SetConfig+0x152>
 80029b4:	e07a      	b.n	8002aac <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	005a      	lsls	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	18d2      	adds	r2, r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	0019      	movs	r1, r3
 80029c8:	0010      	movs	r0, r2
 80029ca:	f7fd fba7 	bl	800011c <__udivsi3>
 80029ce:	0003      	movs	r3, r0
 80029d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d91c      	bls.n	8002a12 <UART_SetConfig+0x1ae>
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	025b      	lsls	r3, r3, #9
 80029de:	429a      	cmp	r2, r3
 80029e0:	d217      	bcs.n	8002a12 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	200e      	movs	r0, #14
 80029e8:	183b      	adds	r3, r7, r0
 80029ea:	210f      	movs	r1, #15
 80029ec:	438a      	bics	r2, r1
 80029ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2207      	movs	r2, #7
 80029f8:	4013      	ands	r3, r2
 80029fa:	b299      	uxth	r1, r3
 80029fc:	183b      	adds	r3, r7, r0
 80029fe:	183a      	adds	r2, r7, r0
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	183a      	adds	r2, r7, r0
 8002a0c:	8812      	ldrh	r2, [r2, #0]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e04c      	b.n	8002aac <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002a12:	231e      	movs	r3, #30
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e047      	b.n	8002aac <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a1c:	231f      	movs	r3, #31
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d015      	beq.n	8002a52 <UART_SetConfig+0x1ee>
 8002a26:	dc18      	bgt.n	8002a5a <UART_SetConfig+0x1f6>
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d00d      	beq.n	8002a48 <UART_SetConfig+0x1e4>
 8002a2c:	dc15      	bgt.n	8002a5a <UART_SetConfig+0x1f6>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <UART_SetConfig+0x1d4>
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d005      	beq.n	8002a42 <UART_SetConfig+0x1de>
 8002a36:	e010      	b.n	8002a5a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a38:	f7ff fd90 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	61bb      	str	r3, [r7, #24]
        break;
 8002a40:	e012      	b.n	8002a68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a42:	4b27      	ldr	r3, [pc, #156]	@ (8002ae0 <UART_SetConfig+0x27c>)
 8002a44:	61bb      	str	r3, [r7, #24]
        break;
 8002a46:	e00f      	b.n	8002a68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a48:	f7ff fd28 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	61bb      	str	r3, [r7, #24]
        break;
 8002a50:	e00a      	b.n	8002a68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e006      	b.n	8002a68 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a5e:	231e      	movs	r3, #30
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
        break;
 8002a66:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d01e      	beq.n	8002aac <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	085a      	lsrs	r2, r3, #1
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	18d2      	adds	r2, r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	0010      	movs	r0, r2
 8002a80:	f7fd fb4c 	bl	800011c <__udivsi3>
 8002a84:	0003      	movs	r3, r0
 8002a86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	d90a      	bls.n	8002aa4 <UART_SetConfig+0x240>
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	025b      	lsls	r3, r3, #9
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d205      	bcs.n	8002aa4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	e003      	b.n	8002aac <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa4:	231e      	movs	r3, #30
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ab8:	231e      	movs	r3, #30
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b008      	add	sp, #32
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	ffff69f3 	.word	0xffff69f3
 8002acc:	ffffcfff 	.word	0xffffcfff
 8002ad0:	fffff4ff 	.word	0xfffff4ff
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40004400 	.word	0x40004400
 8002ae0:	007a1200 	.word	0x007a1200

08002ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	2208      	movs	r2, #8
 8002af2:	4013      	ands	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a4a      	ldr	r2, [pc, #296]	@ (8002c28 <UART_AdvFeatureConfig+0x144>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	2201      	movs	r2, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	d00b      	beq.n	8002b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a43      	ldr	r2, [pc, #268]	@ (8002c2c <UART_AdvFeatureConfig+0x148>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d00b      	beq.n	8002b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a3b      	ldr	r2, [pc, #236]	@ (8002c30 <UART_AdvFeatureConfig+0x14c>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	2204      	movs	r2, #4
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d00b      	beq.n	8002b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a34      	ldr	r2, [pc, #208]	@ (8002c34 <UART_AdvFeatureConfig+0x150>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	2210      	movs	r2, #16
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a2c      	ldr	r2, [pc, #176]	@ (8002c38 <UART_AdvFeatureConfig+0x154>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	0019      	movs	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d00b      	beq.n	8002bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a25      	ldr	r2, [pc, #148]	@ (8002c3c <UART_AdvFeatureConfig+0x158>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	2240      	movs	r2, #64	@ 0x40
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d01d      	beq.n	8002bfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <UART_AdvFeatureConfig+0x15c>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	035b      	lsls	r3, r3, #13
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d10b      	bne.n	8002bfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a15      	ldr	r2, [pc, #84]	@ (8002c44 <UART_AdvFeatureConfig+0x160>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	2280      	movs	r2, #128	@ 0x80
 8002c04:	4013      	ands	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c48 <UART_AdvFeatureConfig+0x164>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	ffff7fff 	.word	0xffff7fff
 8002c2c:	fffdffff 	.word	0xfffdffff
 8002c30:	fffeffff 	.word	0xfffeffff
 8002c34:	fffbffff 	.word	0xfffbffff
 8002c38:	ffffefff 	.word	0xffffefff
 8002c3c:	ffffdfff 	.word	0xffffdfff
 8002c40:	ffefffff 	.word	0xffefffff
 8002c44:	ff9fffff 	.word	0xff9fffff
 8002c48:	fff7ffff 	.word	0xfff7ffff

08002c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b092      	sub	sp, #72	@ 0x48
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2284      	movs	r2, #132	@ 0x84
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c5c:	f7fe f85c 	bl	8000d18 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d12c      	bne.n	8002ccc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	0391      	lsls	r1, r2, #14
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4a46      	ldr	r2, [pc, #280]	@ (8002d94 <UART_CheckIdleState+0x148>)
 8002c7c:	9200      	str	r2, [sp, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f000 f88c 	bl	8002d9c <UART_WaitOnFlagUntilTimeout>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d021      	beq.n	8002ccc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c88:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c92:	2301      	movs	r3, #1
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			@ (mov r8, r8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2180      	movs	r1, #128	@ 0x80
 8002caa:	438a      	bics	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb4:	f383 8810 	msr	PRIMASK, r3
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2278      	movs	r2, #120	@ 0x78
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e05f      	b.n	8002d8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d146      	bne.n	8002d68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cdc:	2280      	movs	r2, #128	@ 0x80
 8002cde:	03d1      	lsls	r1, r2, #15
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d94 <UART_CheckIdleState+0x148>)
 8002ce4:	9200      	str	r2, [sp, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f000 f858 	bl	8002d9c <UART_WaitOnFlagUntilTimeout>
 8002cec:	1e03      	subs	r3, r0, #0
 8002cee:	d03b      	beq.n	8002d68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			@ (mov r8, r8)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4921      	ldr	r1, [pc, #132]	@ (8002d98 <UART_CheckIdleState+0x14c>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d22:	f3ef 8310 	mrs	r3, PRIMASK
 8002d26:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f383 8810 	msr	PRIMASK, r3
}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2280      	movs	r2, #128	@ 0x80
 8002d58:	2120      	movs	r1, #32
 8002d5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2278      	movs	r2, #120	@ 0x78
 8002d60:	2100      	movs	r1, #0
 8002d62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e011      	b.n	8002d8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2280      	movs	r2, #128	@ 0x80
 8002d72:	2120      	movs	r1, #32
 8002d74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2278      	movs	r2, #120	@ 0x78
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b010      	add	sp, #64	@ 0x40
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	01ffffff 	.word	0x01ffffff
 8002d98:	fffffedf 	.word	0xfffffedf

08002d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dac:	e051      	b.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3301      	adds	r3, #1
 8002db2:	d04e      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db4:	f7fd ffb0 	bl	8000d18 <HAL_GetTick>
 8002db8:	0002      	movs	r2, r0
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <UART_WaitOnFlagUntilTimeout+0x2e>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e051      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d03b      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b80      	cmp	r3, #128	@ 0x80
 8002dde:	d038      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b40      	cmp	r3, #64	@ 0x40
 8002de4:	d035      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2208      	movs	r2, #8
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d111      	bne.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2208      	movs	r2, #8
 8002dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f900 	bl	8003004 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2284      	movs	r2, #132	@ 0x84
 8002e08:	2108      	movs	r1, #8
 8002e0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2278      	movs	r2, #120	@ 0x78
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e02c      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	401a      	ands	r2, r3
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d112      	bne.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2280      	movs	r2, #128	@ 0x80
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 f8e3 	bl	8003004 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2284      	movs	r2, #132	@ 0x84
 8002e42:	2120      	movs	r1, #32
 8002e44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2278      	movs	r2, #120	@ 0x78
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e00f      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	425a      	negs	r2, r3
 8002e62:	4153      	adcs	r3, r2
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	001a      	movs	r2, r3
 8002e68:	1dfb      	adds	r3, r7, #7
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d09e      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b090      	sub	sp, #64	@ 0x40
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	1dbb      	adds	r3, r7, #6
 8002e88:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1dba      	adds	r2, r7, #6
 8002e94:	2158      	movs	r1, #88	@ 0x58
 8002e96:	8812      	ldrh	r2, [r2, #0]
 8002e98:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2284      	movs	r2, #132	@ 0x84
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2280      	movs	r2, #128	@ 0x80
 8002ea6:	2122      	movs	r1, #34	@ 0x22
 8002ea8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d028      	beq.n	8002f04 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fb0 <UART_Start_Receive_DMA+0x134>)
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb4 <UART_Start_Receive_DMA+0x138>)
 8002ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8002fb8 <UART_Start_Receive_DMA+0x13c>)
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ece:	2200      	movs	r2, #0
 8002ed0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3324      	adds	r3, #36	@ 0x24
 8002edc:	0019      	movs	r1, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	1dbb      	adds	r3, r7, #6
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	f7fe f846 	bl	8000f78 <HAL_DMA_Start_IT>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d009      	beq.n	8002f04 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2284      	movs	r2, #132	@ 0x84
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	2120      	movs	r1, #32
 8002efe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e050      	b.n	8002fa6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d019      	beq.n	8002f40 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f16:	2301      	movs	r3, #1
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1c:	f383 8810 	msr	PRIMASK, r3
}
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2180      	movs	r1, #128	@ 0x80
 8002f2e:	0049      	lsls	r1, r1, #1
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f40:	f3ef 8310 	mrs	r3, PRIMASK
 8002f44:	613b      	str	r3, [r7, #16]
  return(result);
 8002f46:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f72:	f3ef 8310 	mrs	r3, PRIMASK
 8002f76:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f78:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2140      	movs	r1, #64	@ 0x40
 8002f94:	430a      	orrs	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	f383 8810 	msr	PRIMASK, r3
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b010      	add	sp, #64	@ 0x40
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	080030cd 	.word	0x080030cd
 8002fb4:	080031f9 	.word	0x080031f9
 8002fb8:	0800323b 	.word	0x0800323b

08002fbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fca:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	2301      	movs	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f383 8810 	msr	PRIMASK, r3
}
 8002fd8:	46c0      	nop			@ (mov r8, r8)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	21c0      	movs	r1, #192	@ 0xc0
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f383 8810 	msr	PRIMASK, r3
}
 8002ff4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b006      	add	sp, #24
 8003002:	bd80      	pop	{r7, pc}

08003004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08e      	sub	sp, #56	@ 0x38
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300c:	f3ef 8310 	mrs	r3, PRIMASK
 8003010:	617b      	str	r3, [r7, #20]
  return(result);
 8003012:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003014:	637b      	str	r3, [r7, #52]	@ 0x34
 8003016:	2301      	movs	r3, #1
 8003018:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4926      	ldr	r1, [pc, #152]	@ (80030c8 <UART_EndRxTransfer+0xc4>)
 800302e:	400a      	ands	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800303e:	f3ef 8310 	mrs	r3, PRIMASK
 8003042:	623b      	str	r3, [r7, #32]
  return(result);
 8003044:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003046:	633b      	str	r3, [r7, #48]	@ 0x30
 8003048:	2301      	movs	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	f383 8810 	msr	PRIMASK, r3
}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2101      	movs	r1, #1
 8003060:	438a      	bics	r2, r1
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	f383 8810 	msr	PRIMASK, r3
}
 800306e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003074:	2b01      	cmp	r3, #1
 8003076:	d118      	bne.n	80030aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003078:	f3ef 8310 	mrs	r3, PRIMASK
 800307c:	60bb      	str	r3, [r7, #8]
  return(result);
 800307e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003082:	2301      	movs	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2110      	movs	r1, #16
 800309a:	438a      	bics	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f383 8810 	msr	PRIMASK, r3
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2280      	movs	r2, #128	@ 0x80
 80030ae:	2120      	movs	r1, #32
 80030b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b00e      	add	sp, #56	@ 0x38
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	fffffedf 	.word	0xfffffedf

080030cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b094      	sub	sp, #80	@ 0x50
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d06f      	beq.n	80031c2 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80030e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030e4:	225a      	movs	r2, #90	@ 0x5a
 80030e6:	2100      	movs	r1, #0
 80030e8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80030f0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030f4:	2301      	movs	r3, #1
 80030f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	493a      	ldr	r1, [pc, #232]	@ (80031f4 <UART_DMAReceiveCplt+0x128>)
 800310c:	400a      	ands	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003112:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f383 8810 	msr	PRIMASK, r3
}
 800311a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311c:	f3ef 8310 	mrs	r3, PRIMASK
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003124:	647b      	str	r3, [r7, #68]	@ 0x44
 8003126:	2301      	movs	r3, #1
 8003128:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312c:	f383 8810 	msr	PRIMASK, r3
}
 8003130:	46c0      	nop			@ (mov r8, r8)
 8003132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2101      	movs	r1, #1
 800313e:	438a      	bics	r2, r1
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	f383 8810 	msr	PRIMASK, r3
}
 800314c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314e:	f3ef 8310 	mrs	r3, PRIMASK
 8003152:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003156:	643b      	str	r3, [r7, #64]	@ 0x40
 8003158:	2301      	movs	r3, #1
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2140      	movs	r1, #64	@ 0x40
 8003170:	438a      	bics	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003176:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003182:	2280      	movs	r2, #128	@ 0x80
 8003184:	2120      	movs	r1, #32
 8003186:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	2b01      	cmp	r3, #1
 800318e:	d118      	bne.n	80031c2 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	60fb      	str	r3, [r7, #12]
  return(result);
 8003196:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800319a:	2301      	movs	r3, #1
 800319c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			@ (mov r8, r8)
 80031a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2110      	movs	r1, #16
 80031b2:	438a      	bics	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f383 8810 	msr	PRIMASK, r3
}
 80031c0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c4:	2200      	movs	r2, #0
 80031c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031d2:	2258      	movs	r2, #88	@ 0x58
 80031d4:	5a9a      	ldrh	r2, [r3, r2]
 80031d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f7ff fb36 	bl	800284c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031e0:	e003      	b.n	80031ea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80031e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff fb19 	bl	800281c <HAL_UART_RxCpltCallback>
}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b014      	add	sp, #80	@ 0x50
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	fffffeff 	.word	0xfffffeff

080031f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10a      	bne.n	800322a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2258      	movs	r2, #88	@ 0x58
 8003218:	5a9b      	ldrh	r3, [r3, r2]
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0011      	movs	r1, r2
 8003222:	0018      	movs	r0, r3
 8003224:	f7ff fb12 	bl	800284c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003228:	e003      	b.n	8003232 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff fafd 	bl	800282c <HAL_UART_RxHalfCpltCallback>
}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800324c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2280      	movs	r2, #128	@ 0x80
 8003252:	589b      	ldr	r3, [r3, r2]
 8003254:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	4013      	ands	r3, r2
 8003260:	2b80      	cmp	r3, #128	@ 0x80
 8003262:	d10a      	bne.n	800327a <UART_DMAError+0x40>
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b21      	cmp	r3, #33	@ 0x21
 8003268:	d107      	bne.n	800327a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2252      	movs	r2, #82	@ 0x52
 800326e:	2100      	movs	r1, #0
 8003270:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff fea1 	bl	8002fbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2240      	movs	r2, #64	@ 0x40
 8003282:	4013      	ands	r3, r2
 8003284:	2b40      	cmp	r3, #64	@ 0x40
 8003286:	d10a      	bne.n	800329e <UART_DMAError+0x64>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b22      	cmp	r3, #34	@ 0x22
 800328c:	d107      	bne.n	800329e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	225a      	movs	r2, #90	@ 0x5a
 8003292:	2100      	movs	r1, #0
 8003294:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff feb3 	bl	8003004 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2284      	movs	r2, #132	@ 0x84
 80032a2:	589b      	ldr	r3, [r3, r2]
 80032a4:	2210      	movs	r2, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2184      	movs	r1, #132	@ 0x84
 80032ac:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff fac3 	bl	800283c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b006      	add	sp, #24
 80032bc:	bd80      	pop	{r7, pc}

080032be <atoi>:
 80032be:	b510      	push	{r4, lr}
 80032c0:	220a      	movs	r2, #10
 80032c2:	2100      	movs	r1, #0
 80032c4:	f000 f88c 	bl	80033e0 <strtol>
 80032c8:	bd10      	pop	{r4, pc}
	...

080032cc <_strtol_l.constprop.0>:
 80032cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ce:	b085      	sub	sp, #20
 80032d0:	0017      	movs	r7, r2
 80032d2:	001e      	movs	r6, r3
 80032d4:	9003      	str	r0, [sp, #12]
 80032d6:	9101      	str	r1, [sp, #4]
 80032d8:	2b24      	cmp	r3, #36	@ 0x24
 80032da:	d844      	bhi.n	8003366 <_strtol_l.constprop.0+0x9a>
 80032dc:	000c      	movs	r4, r1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d041      	beq.n	8003366 <_strtol_l.constprop.0+0x9a>
 80032e2:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <_strtol_l.constprop.0+0x10c>)
 80032e4:	2208      	movs	r2, #8
 80032e6:	469c      	mov	ip, r3
 80032e8:	0023      	movs	r3, r4
 80032ea:	4661      	mov	r1, ip
 80032ec:	781d      	ldrb	r5, [r3, #0]
 80032ee:	3401      	adds	r4, #1
 80032f0:	5d48      	ldrb	r0, [r1, r5]
 80032f2:	0001      	movs	r1, r0
 80032f4:	4011      	ands	r1, r2
 80032f6:	4210      	tst	r0, r2
 80032f8:	d1f6      	bne.n	80032e8 <_strtol_l.constprop.0+0x1c>
 80032fa:	2d2d      	cmp	r5, #45	@ 0x2d
 80032fc:	d13a      	bne.n	8003374 <_strtol_l.constprop.0+0xa8>
 80032fe:	7825      	ldrb	r5, [r4, #0]
 8003300:	1c9c      	adds	r4, r3, #2
 8003302:	2301      	movs	r3, #1
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2210      	movs	r2, #16
 8003308:	0033      	movs	r3, r6
 800330a:	4393      	bics	r3, r2
 800330c:	d109      	bne.n	8003322 <_strtol_l.constprop.0+0x56>
 800330e:	2d30      	cmp	r5, #48	@ 0x30
 8003310:	d136      	bne.n	8003380 <_strtol_l.constprop.0+0xb4>
 8003312:	2120      	movs	r1, #32
 8003314:	7823      	ldrb	r3, [r4, #0]
 8003316:	438b      	bics	r3, r1
 8003318:	2b58      	cmp	r3, #88	@ 0x58
 800331a:	d131      	bne.n	8003380 <_strtol_l.constprop.0+0xb4>
 800331c:	0016      	movs	r6, r2
 800331e:	7865      	ldrb	r5, [r4, #1]
 8003320:	3402      	adds	r4, #2
 8003322:	4a2e      	ldr	r2, [pc, #184]	@ (80033dc <_strtol_l.constprop.0+0x110>)
 8003324:	9b00      	ldr	r3, [sp, #0]
 8003326:	4694      	mov	ip, r2
 8003328:	4463      	add	r3, ip
 800332a:	0031      	movs	r1, r6
 800332c:	0018      	movs	r0, r3
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	f7fc ff7a 	bl	8000228 <__aeabi_uidivmod>
 8003334:	2200      	movs	r2, #0
 8003336:	4684      	mov	ip, r0
 8003338:	0010      	movs	r0, r2
 800333a:	002b      	movs	r3, r5
 800333c:	3b30      	subs	r3, #48	@ 0x30
 800333e:	2b09      	cmp	r3, #9
 8003340:	d825      	bhi.n	800338e <_strtol_l.constprop.0+0xc2>
 8003342:	001d      	movs	r5, r3
 8003344:	42ae      	cmp	r6, r5
 8003346:	dd31      	ble.n	80033ac <_strtol_l.constprop.0+0xe0>
 8003348:	1c53      	adds	r3, r2, #1
 800334a:	d009      	beq.n	8003360 <_strtol_l.constprop.0+0x94>
 800334c:	2201      	movs	r2, #1
 800334e:	4252      	negs	r2, r2
 8003350:	4584      	cmp	ip, r0
 8003352:	d305      	bcc.n	8003360 <_strtol_l.constprop.0+0x94>
 8003354:	d101      	bne.n	800335a <_strtol_l.constprop.0+0x8e>
 8003356:	42a9      	cmp	r1, r5
 8003358:	db25      	blt.n	80033a6 <_strtol_l.constprop.0+0xda>
 800335a:	2201      	movs	r2, #1
 800335c:	4370      	muls	r0, r6
 800335e:	1828      	adds	r0, r5, r0
 8003360:	7825      	ldrb	r5, [r4, #0]
 8003362:	3401      	adds	r4, #1
 8003364:	e7e9      	b.n	800333a <_strtol_l.constprop.0+0x6e>
 8003366:	f000 fb41 	bl	80039ec <__errno>
 800336a:	2316      	movs	r3, #22
 800336c:	6003      	str	r3, [r0, #0]
 800336e:	2000      	movs	r0, #0
 8003370:	b005      	add	sp, #20
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	9100      	str	r1, [sp, #0]
 8003376:	2d2b      	cmp	r5, #43	@ 0x2b
 8003378:	d1c5      	bne.n	8003306 <_strtol_l.constprop.0+0x3a>
 800337a:	7825      	ldrb	r5, [r4, #0]
 800337c:	1c9c      	adds	r4, r3, #2
 800337e:	e7c2      	b.n	8003306 <_strtol_l.constprop.0+0x3a>
 8003380:	2e00      	cmp	r6, #0
 8003382:	d1ce      	bne.n	8003322 <_strtol_l.constprop.0+0x56>
 8003384:	3608      	adds	r6, #8
 8003386:	2d30      	cmp	r5, #48	@ 0x30
 8003388:	d0cb      	beq.n	8003322 <_strtol_l.constprop.0+0x56>
 800338a:	3602      	adds	r6, #2
 800338c:	e7c9      	b.n	8003322 <_strtol_l.constprop.0+0x56>
 800338e:	002b      	movs	r3, r5
 8003390:	3b41      	subs	r3, #65	@ 0x41
 8003392:	2b19      	cmp	r3, #25
 8003394:	d801      	bhi.n	800339a <_strtol_l.constprop.0+0xce>
 8003396:	3d37      	subs	r5, #55	@ 0x37
 8003398:	e7d4      	b.n	8003344 <_strtol_l.constprop.0+0x78>
 800339a:	002b      	movs	r3, r5
 800339c:	3b61      	subs	r3, #97	@ 0x61
 800339e:	2b19      	cmp	r3, #25
 80033a0:	d804      	bhi.n	80033ac <_strtol_l.constprop.0+0xe0>
 80033a2:	3d57      	subs	r5, #87	@ 0x57
 80033a4:	e7ce      	b.n	8003344 <_strtol_l.constprop.0+0x78>
 80033a6:	2201      	movs	r2, #1
 80033a8:	4252      	negs	r2, r2
 80033aa:	e7d9      	b.n	8003360 <_strtol_l.constprop.0+0x94>
 80033ac:	1c53      	adds	r3, r2, #1
 80033ae:	d108      	bne.n	80033c2 <_strtol_l.constprop.0+0xf6>
 80033b0:	2322      	movs	r3, #34	@ 0x22
 80033b2:	9a03      	ldr	r2, [sp, #12]
 80033b4:	9802      	ldr	r0, [sp, #8]
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	2f00      	cmp	r7, #0
 80033ba:	d0d9      	beq.n	8003370 <_strtol_l.constprop.0+0xa4>
 80033bc:	1e63      	subs	r3, r4, #1
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	e007      	b.n	80033d2 <_strtol_l.constprop.0+0x106>
 80033c2:	9b00      	ldr	r3, [sp, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d000      	beq.n	80033ca <_strtol_l.constprop.0+0xfe>
 80033c8:	4240      	negs	r0, r0
 80033ca:	2f00      	cmp	r7, #0
 80033cc:	d0d0      	beq.n	8003370 <_strtol_l.constprop.0+0xa4>
 80033ce:	2a00      	cmp	r2, #0
 80033d0:	d1f4      	bne.n	80033bc <_strtol_l.constprop.0+0xf0>
 80033d2:	9b01      	ldr	r3, [sp, #4]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	e7cb      	b.n	8003370 <_strtol_l.constprop.0+0xa4>
 80033d8:	080046d9 	.word	0x080046d9
 80033dc:	7fffffff 	.word	0x7fffffff

080033e0 <strtol>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4c04      	ldr	r4, [pc, #16]	@ (80033f4 <strtol+0x14>)
 80033e4:	0013      	movs	r3, r2
 80033e6:	000a      	movs	r2, r1
 80033e8:	0001      	movs	r1, r0
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	f7ff ff6e 	bl	80032cc <_strtol_l.constprop.0>
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	20000018 	.word	0x20000018

080033f8 <std>:
 80033f8:	2300      	movs	r3, #0
 80033fa:	b510      	push	{r4, lr}
 80033fc:	0004      	movs	r4, r0
 80033fe:	6003      	str	r3, [r0, #0]
 8003400:	6043      	str	r3, [r0, #4]
 8003402:	6083      	str	r3, [r0, #8]
 8003404:	8181      	strh	r1, [r0, #12]
 8003406:	6643      	str	r3, [r0, #100]	@ 0x64
 8003408:	81c2      	strh	r2, [r0, #14]
 800340a:	6103      	str	r3, [r0, #16]
 800340c:	6143      	str	r3, [r0, #20]
 800340e:	6183      	str	r3, [r0, #24]
 8003410:	0019      	movs	r1, r3
 8003412:	2208      	movs	r2, #8
 8003414:	305c      	adds	r0, #92	@ 0x5c
 8003416:	f000 fa19 	bl	800384c <memset>
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <std+0x50>)
 800341c:	6224      	str	r4, [r4, #32]
 800341e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003420:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <std+0x54>)
 8003422:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <std+0x58>)
 8003426:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003428:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <std+0x5c>)
 800342a:	6323      	str	r3, [r4, #48]	@ 0x30
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <std+0x60>)
 800342e:	429c      	cmp	r4, r3
 8003430:	d005      	beq.n	800343e <std+0x46>
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <std+0x64>)
 8003434:	429c      	cmp	r4, r3
 8003436:	d002      	beq.n	800343e <std+0x46>
 8003438:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <std+0x68>)
 800343a:	429c      	cmp	r4, r3
 800343c:	d103      	bne.n	8003446 <std+0x4e>
 800343e:	0020      	movs	r0, r4
 8003440:	3058      	adds	r0, #88	@ 0x58
 8003442:	f000 fafd 	bl	8003a40 <__retarget_lock_init_recursive>
 8003446:	bd10      	pop	{r4, pc}
 8003448:	08003675 	.word	0x08003675
 800344c:	0800369d 	.word	0x0800369d
 8003450:	080036d5 	.word	0x080036d5
 8003454:	08003701 	.word	0x08003701
 8003458:	200002f4 	.word	0x200002f4
 800345c:	2000035c 	.word	0x2000035c
 8003460:	200003c4 	.word	0x200003c4

08003464 <stdio_exit_handler>:
 8003464:	b510      	push	{r4, lr}
 8003466:	4a03      	ldr	r2, [pc, #12]	@ (8003474 <stdio_exit_handler+0x10>)
 8003468:	4903      	ldr	r1, [pc, #12]	@ (8003478 <stdio_exit_handler+0x14>)
 800346a:	4804      	ldr	r0, [pc, #16]	@ (800347c <stdio_exit_handler+0x18>)
 800346c:	f000 f86c 	bl	8003548 <_fwalk_sglue>
 8003470:	bd10      	pop	{r4, pc}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	2000000c 	.word	0x2000000c
 8003478:	08004321 	.word	0x08004321
 800347c:	2000001c 	.word	0x2000001c

08003480 <cleanup_stdio>:
 8003480:	6841      	ldr	r1, [r0, #4]
 8003482:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <cleanup_stdio+0x30>)
 8003484:	b510      	push	{r4, lr}
 8003486:	0004      	movs	r4, r0
 8003488:	4299      	cmp	r1, r3
 800348a:	d001      	beq.n	8003490 <cleanup_stdio+0x10>
 800348c:	f000 ff48 	bl	8004320 <_fflush_r>
 8003490:	68a1      	ldr	r1, [r4, #8]
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <cleanup_stdio+0x34>)
 8003494:	4299      	cmp	r1, r3
 8003496:	d002      	beq.n	800349e <cleanup_stdio+0x1e>
 8003498:	0020      	movs	r0, r4
 800349a:	f000 ff41 	bl	8004320 <_fflush_r>
 800349e:	68e1      	ldr	r1, [r4, #12]
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <cleanup_stdio+0x38>)
 80034a2:	4299      	cmp	r1, r3
 80034a4:	d002      	beq.n	80034ac <cleanup_stdio+0x2c>
 80034a6:	0020      	movs	r0, r4
 80034a8:	f000 ff3a 	bl	8004320 <_fflush_r>
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	200002f4 	.word	0x200002f4
 80034b4:	2000035c 	.word	0x2000035c
 80034b8:	200003c4 	.word	0x200003c4

080034bc <global_stdio_init.part.0>:
 80034bc:	b510      	push	{r4, lr}
 80034be:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <global_stdio_init.part.0+0x28>)
 80034c0:	4a09      	ldr	r2, [pc, #36]	@ (80034e8 <global_stdio_init.part.0+0x2c>)
 80034c2:	2104      	movs	r1, #4
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	4809      	ldr	r0, [pc, #36]	@ (80034ec <global_stdio_init.part.0+0x30>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	f7ff ff95 	bl	80033f8 <std>
 80034ce:	2201      	movs	r2, #1
 80034d0:	2109      	movs	r1, #9
 80034d2:	4807      	ldr	r0, [pc, #28]	@ (80034f0 <global_stdio_init.part.0+0x34>)
 80034d4:	f7ff ff90 	bl	80033f8 <std>
 80034d8:	2202      	movs	r2, #2
 80034da:	2112      	movs	r1, #18
 80034dc:	4805      	ldr	r0, [pc, #20]	@ (80034f4 <global_stdio_init.part.0+0x38>)
 80034de:	f7ff ff8b 	bl	80033f8 <std>
 80034e2:	bd10      	pop	{r4, pc}
 80034e4:	2000042c 	.word	0x2000042c
 80034e8:	08003465 	.word	0x08003465
 80034ec:	200002f4 	.word	0x200002f4
 80034f0:	2000035c 	.word	0x2000035c
 80034f4:	200003c4 	.word	0x200003c4

080034f8 <__sfp_lock_acquire>:
 80034f8:	b510      	push	{r4, lr}
 80034fa:	4802      	ldr	r0, [pc, #8]	@ (8003504 <__sfp_lock_acquire+0xc>)
 80034fc:	f000 faa1 	bl	8003a42 <__retarget_lock_acquire_recursive>
 8003500:	bd10      	pop	{r4, pc}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	20000435 	.word	0x20000435

08003508 <__sfp_lock_release>:
 8003508:	b510      	push	{r4, lr}
 800350a:	4802      	ldr	r0, [pc, #8]	@ (8003514 <__sfp_lock_release+0xc>)
 800350c:	f000 fa9a 	bl	8003a44 <__retarget_lock_release_recursive>
 8003510:	bd10      	pop	{r4, pc}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	20000435 	.word	0x20000435

08003518 <__sinit>:
 8003518:	b510      	push	{r4, lr}
 800351a:	0004      	movs	r4, r0
 800351c:	f7ff ffec 	bl	80034f8 <__sfp_lock_acquire>
 8003520:	6a23      	ldr	r3, [r4, #32]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <__sinit+0x14>
 8003526:	f7ff ffef 	bl	8003508 <__sfp_lock_release>
 800352a:	bd10      	pop	{r4, pc}
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <__sinit+0x28>)
 800352e:	6223      	str	r3, [r4, #32]
 8003530:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <__sinit+0x2c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f6      	bne.n	8003526 <__sinit+0xe>
 8003538:	f7ff ffc0 	bl	80034bc <global_stdio_init.part.0>
 800353c:	e7f3      	b.n	8003526 <__sinit+0xe>
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	08003481 	.word	0x08003481
 8003544:	2000042c 	.word	0x2000042c

08003548 <_fwalk_sglue>:
 8003548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800354a:	0014      	movs	r4, r2
 800354c:	2600      	movs	r6, #0
 800354e:	9000      	str	r0, [sp, #0]
 8003550:	9101      	str	r1, [sp, #4]
 8003552:	68a5      	ldr	r5, [r4, #8]
 8003554:	6867      	ldr	r7, [r4, #4]
 8003556:	3f01      	subs	r7, #1
 8003558:	d504      	bpl.n	8003564 <_fwalk_sglue+0x1c>
 800355a:	6824      	ldr	r4, [r4, #0]
 800355c:	2c00      	cmp	r4, #0
 800355e:	d1f8      	bne.n	8003552 <_fwalk_sglue+0xa>
 8003560:	0030      	movs	r0, r6
 8003562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003564:	89ab      	ldrh	r3, [r5, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d908      	bls.n	800357c <_fwalk_sglue+0x34>
 800356a:	220e      	movs	r2, #14
 800356c:	5eab      	ldrsh	r3, [r5, r2]
 800356e:	3301      	adds	r3, #1
 8003570:	d004      	beq.n	800357c <_fwalk_sglue+0x34>
 8003572:	0029      	movs	r1, r5
 8003574:	9800      	ldr	r0, [sp, #0]
 8003576:	9b01      	ldr	r3, [sp, #4]
 8003578:	4798      	blx	r3
 800357a:	4306      	orrs	r6, r0
 800357c:	3568      	adds	r5, #104	@ 0x68
 800357e:	e7ea      	b.n	8003556 <_fwalk_sglue+0xe>

08003580 <iprintf>:
 8003580:	b40f      	push	{r0, r1, r2, r3}
 8003582:	b507      	push	{r0, r1, r2, lr}
 8003584:	4905      	ldr	r1, [pc, #20]	@ (800359c <iprintf+0x1c>)
 8003586:	ab04      	add	r3, sp, #16
 8003588:	6808      	ldr	r0, [r1, #0]
 800358a:	cb04      	ldmia	r3!, {r2}
 800358c:	6881      	ldr	r1, [r0, #8]
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	f000 fba6 	bl	8003ce0 <_vfiprintf_r>
 8003594:	b003      	add	sp, #12
 8003596:	bc08      	pop	{r3}
 8003598:	b004      	add	sp, #16
 800359a:	4718      	bx	r3
 800359c:	20000018 	.word	0x20000018

080035a0 <putchar>:
 80035a0:	b510      	push	{r4, lr}
 80035a2:	4b03      	ldr	r3, [pc, #12]	@ (80035b0 <putchar+0x10>)
 80035a4:	0001      	movs	r1, r0
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	6882      	ldr	r2, [r0, #8]
 80035aa:	f000 ff60 	bl	800446e <_putc_r>
 80035ae:	bd10      	pop	{r4, pc}
 80035b0:	20000018 	.word	0x20000018

080035b4 <_puts_r>:
 80035b4:	6a03      	ldr	r3, [r0, #32]
 80035b6:	b570      	push	{r4, r5, r6, lr}
 80035b8:	0005      	movs	r5, r0
 80035ba:	000e      	movs	r6, r1
 80035bc:	6884      	ldr	r4, [r0, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <_puts_r+0x12>
 80035c2:	f7ff ffa9 	bl	8003518 <__sinit>
 80035c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035c8:	07db      	lsls	r3, r3, #31
 80035ca:	d405      	bmi.n	80035d8 <_puts_r+0x24>
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	059b      	lsls	r3, r3, #22
 80035d0:	d402      	bmi.n	80035d8 <_puts_r+0x24>
 80035d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035d4:	f000 fa35 	bl	8003a42 <__retarget_lock_acquire_recursive>
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	071b      	lsls	r3, r3, #28
 80035dc:	d502      	bpl.n	80035e4 <_puts_r+0x30>
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11f      	bne.n	8003624 <_puts_r+0x70>
 80035e4:	0021      	movs	r1, r4
 80035e6:	0028      	movs	r0, r5
 80035e8:	f000 f8d2 	bl	8003790 <__swsetup_r>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d019      	beq.n	8003624 <_puts_r+0x70>
 80035f0:	2501      	movs	r5, #1
 80035f2:	426d      	negs	r5, r5
 80035f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035f6:	07db      	lsls	r3, r3, #31
 80035f8:	d405      	bmi.n	8003606 <_puts_r+0x52>
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	059b      	lsls	r3, r3, #22
 80035fe:	d402      	bmi.n	8003606 <_puts_r+0x52>
 8003600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003602:	f000 fa1f 	bl	8003a44 <__retarget_lock_release_recursive>
 8003606:	0028      	movs	r0, r5
 8003608:	bd70      	pop	{r4, r5, r6, pc}
 800360a:	3601      	adds	r6, #1
 800360c:	60a3      	str	r3, [r4, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da04      	bge.n	800361c <_puts_r+0x68>
 8003612:	69a2      	ldr	r2, [r4, #24]
 8003614:	429a      	cmp	r2, r3
 8003616:	dc16      	bgt.n	8003646 <_puts_r+0x92>
 8003618:	290a      	cmp	r1, #10
 800361a:	d014      	beq.n	8003646 <_puts_r+0x92>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	6022      	str	r2, [r4, #0]
 8003622:	7019      	strb	r1, [r3, #0]
 8003624:	68a3      	ldr	r3, [r4, #8]
 8003626:	7831      	ldrb	r1, [r6, #0]
 8003628:	3b01      	subs	r3, #1
 800362a:	2900      	cmp	r1, #0
 800362c:	d1ed      	bne.n	800360a <_puts_r+0x56>
 800362e:	60a3      	str	r3, [r4, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	da0f      	bge.n	8003654 <_puts_r+0xa0>
 8003634:	0022      	movs	r2, r4
 8003636:	0028      	movs	r0, r5
 8003638:	310a      	adds	r1, #10
 800363a:	f000 f867 	bl	800370c <__swbuf_r>
 800363e:	3001      	adds	r0, #1
 8003640:	d0d6      	beq.n	80035f0 <_puts_r+0x3c>
 8003642:	250a      	movs	r5, #10
 8003644:	e7d6      	b.n	80035f4 <_puts_r+0x40>
 8003646:	0022      	movs	r2, r4
 8003648:	0028      	movs	r0, r5
 800364a:	f000 f85f 	bl	800370c <__swbuf_r>
 800364e:	3001      	adds	r0, #1
 8003650:	d1e8      	bne.n	8003624 <_puts_r+0x70>
 8003652:	e7cd      	b.n	80035f0 <_puts_r+0x3c>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	6022      	str	r2, [r4, #0]
 800365a:	220a      	movs	r2, #10
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e7f0      	b.n	8003642 <_puts_r+0x8e>

08003660 <puts>:
 8003660:	b510      	push	{r4, lr}
 8003662:	4b03      	ldr	r3, [pc, #12]	@ (8003670 <puts+0x10>)
 8003664:	0001      	movs	r1, r0
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	f7ff ffa4 	bl	80035b4 <_puts_r>
 800366c:	bd10      	pop	{r4, pc}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	20000018 	.word	0x20000018

08003674 <__sread>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	000c      	movs	r4, r1
 8003678:	250e      	movs	r5, #14
 800367a:	5f49      	ldrsh	r1, [r1, r5]
 800367c:	f000 f98e 	bl	800399c <_read_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	db03      	blt.n	800368c <__sread+0x18>
 8003684:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003686:	181b      	adds	r3, r3, r0
 8003688:	6563      	str	r3, [r4, #84]	@ 0x54
 800368a:	bd70      	pop	{r4, r5, r6, pc}
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	4a02      	ldr	r2, [pc, #8]	@ (8003698 <__sread+0x24>)
 8003690:	4013      	ands	r3, r2
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	e7f9      	b.n	800368a <__sread+0x16>
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	ffffefff 	.word	0xffffefff

0800369c <__swrite>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	001f      	movs	r7, r3
 80036a0:	898b      	ldrh	r3, [r1, #12]
 80036a2:	0005      	movs	r5, r0
 80036a4:	000c      	movs	r4, r1
 80036a6:	0016      	movs	r6, r2
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	d505      	bpl.n	80036b8 <__swrite+0x1c>
 80036ac:	230e      	movs	r3, #14
 80036ae:	5ec9      	ldrsh	r1, [r1, r3]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2302      	movs	r3, #2
 80036b4:	f000 f95e 	bl	8003974 <_lseek_r>
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <__swrite+0x34>)
 80036bc:	0028      	movs	r0, r5
 80036be:	4013      	ands	r3, r2
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	0032      	movs	r2, r6
 80036c4:	230e      	movs	r3, #14
 80036c6:	5ee1      	ldrsh	r1, [r4, r3]
 80036c8:	003b      	movs	r3, r7
 80036ca:	f000 f97b 	bl	80039c4 <_write_r>
 80036ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d0:	ffffefff 	.word	0xffffefff

080036d4 <__sseek>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	000c      	movs	r4, r1
 80036d8:	250e      	movs	r5, #14
 80036da:	5f49      	ldrsh	r1, [r1, r5]
 80036dc:	f000 f94a 	bl	8003974 <_lseek_r>
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	1c42      	adds	r2, r0, #1
 80036e4:	d103      	bne.n	80036ee <__sseek+0x1a>
 80036e6:	4a05      	ldr	r2, [pc, #20]	@ (80036fc <__sseek+0x28>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	bd70      	pop	{r4, r5, r6, pc}
 80036ee:	2280      	movs	r2, #128	@ 0x80
 80036f0:	0152      	lsls	r2, r2, #5
 80036f2:	4313      	orrs	r3, r2
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80036f8:	e7f8      	b.n	80036ec <__sseek+0x18>
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	ffffefff 	.word	0xffffefff

08003700 <__sclose>:
 8003700:	b510      	push	{r4, lr}
 8003702:	230e      	movs	r3, #14
 8003704:	5ec9      	ldrsh	r1, [r1, r3]
 8003706:	f000 f923 	bl	8003950 <_close_r>
 800370a:	bd10      	pop	{r4, pc}

0800370c <__swbuf_r>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	0006      	movs	r6, r0
 8003710:	000d      	movs	r5, r1
 8003712:	0014      	movs	r4, r2
 8003714:	2800      	cmp	r0, #0
 8003716:	d004      	beq.n	8003722 <__swbuf_r+0x16>
 8003718:	6a03      	ldr	r3, [r0, #32]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <__swbuf_r+0x16>
 800371e:	f7ff fefb 	bl	8003518 <__sinit>
 8003722:	69a3      	ldr	r3, [r4, #24]
 8003724:	60a3      	str	r3, [r4, #8]
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	071b      	lsls	r3, r3, #28
 800372a:	d502      	bpl.n	8003732 <__swbuf_r+0x26>
 800372c:	6923      	ldr	r3, [r4, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <__swbuf_r+0x3a>
 8003732:	0021      	movs	r1, r4
 8003734:	0030      	movs	r0, r6
 8003736:	f000 f82b 	bl	8003790 <__swsetup_r>
 800373a:	2800      	cmp	r0, #0
 800373c:	d003      	beq.n	8003746 <__swbuf_r+0x3a>
 800373e:	2501      	movs	r5, #1
 8003740:	426d      	negs	r5, r5
 8003742:	0028      	movs	r0, r5
 8003744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	6820      	ldr	r0, [r4, #0]
 800374a:	b2ef      	uxtb	r7, r5
 800374c:	1ac0      	subs	r0, r0, r3
 800374e:	6963      	ldr	r3, [r4, #20]
 8003750:	b2ed      	uxtb	r5, r5
 8003752:	4283      	cmp	r3, r0
 8003754:	dc05      	bgt.n	8003762 <__swbuf_r+0x56>
 8003756:	0021      	movs	r1, r4
 8003758:	0030      	movs	r0, r6
 800375a:	f000 fde1 	bl	8004320 <_fflush_r>
 800375e:	2800      	cmp	r0, #0
 8003760:	d1ed      	bne.n	800373e <__swbuf_r+0x32>
 8003762:	68a3      	ldr	r3, [r4, #8]
 8003764:	3001      	adds	r0, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	60a3      	str	r3, [r4, #8]
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	6022      	str	r2, [r4, #0]
 8003770:	701f      	strb	r7, [r3, #0]
 8003772:	6963      	ldr	r3, [r4, #20]
 8003774:	4283      	cmp	r3, r0
 8003776:	d004      	beq.n	8003782 <__swbuf_r+0x76>
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	07db      	lsls	r3, r3, #31
 800377c:	d5e1      	bpl.n	8003742 <__swbuf_r+0x36>
 800377e:	2d0a      	cmp	r5, #10
 8003780:	d1df      	bne.n	8003742 <__swbuf_r+0x36>
 8003782:	0021      	movs	r1, r4
 8003784:	0030      	movs	r0, r6
 8003786:	f000 fdcb 	bl	8004320 <_fflush_r>
 800378a:	2800      	cmp	r0, #0
 800378c:	d0d9      	beq.n	8003742 <__swbuf_r+0x36>
 800378e:	e7d6      	b.n	800373e <__swbuf_r+0x32>

08003790 <__swsetup_r>:
 8003790:	4b2d      	ldr	r3, [pc, #180]	@ (8003848 <__swsetup_r+0xb8>)
 8003792:	b570      	push	{r4, r5, r6, lr}
 8003794:	0005      	movs	r5, r0
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	000c      	movs	r4, r1
 800379a:	2800      	cmp	r0, #0
 800379c:	d004      	beq.n	80037a8 <__swsetup_r+0x18>
 800379e:	6a03      	ldr	r3, [r0, #32]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <__swsetup_r+0x18>
 80037a4:	f7ff feb8 	bl	8003518 <__sinit>
 80037a8:	230c      	movs	r3, #12
 80037aa:	5ee2      	ldrsh	r2, [r4, r3]
 80037ac:	0713      	lsls	r3, r2, #28
 80037ae:	d423      	bmi.n	80037f8 <__swsetup_r+0x68>
 80037b0:	06d3      	lsls	r3, r2, #27
 80037b2:	d407      	bmi.n	80037c4 <__swsetup_r+0x34>
 80037b4:	2309      	movs	r3, #9
 80037b6:	602b      	str	r3, [r5, #0]
 80037b8:	2340      	movs	r3, #64	@ 0x40
 80037ba:	2001      	movs	r0, #1
 80037bc:	4313      	orrs	r3, r2
 80037be:	81a3      	strh	r3, [r4, #12]
 80037c0:	4240      	negs	r0, r0
 80037c2:	e03a      	b.n	800383a <__swsetup_r+0xaa>
 80037c4:	0752      	lsls	r2, r2, #29
 80037c6:	d513      	bpl.n	80037f0 <__swsetup_r+0x60>
 80037c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037ca:	2900      	cmp	r1, #0
 80037cc:	d008      	beq.n	80037e0 <__swsetup_r+0x50>
 80037ce:	0023      	movs	r3, r4
 80037d0:	3344      	adds	r3, #68	@ 0x44
 80037d2:	4299      	cmp	r1, r3
 80037d4:	d002      	beq.n	80037dc <__swsetup_r+0x4c>
 80037d6:	0028      	movs	r0, r5
 80037d8:	f000 f954 	bl	8003a84 <_free_r>
 80037dc:	2300      	movs	r3, #0
 80037de:	6363      	str	r3, [r4, #52]	@ 0x34
 80037e0:	2224      	movs	r2, #36	@ 0x24
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	4393      	bics	r3, r2
 80037e6:	81a3      	strh	r3, [r4, #12]
 80037e8:	2300      	movs	r3, #0
 80037ea:	6063      	str	r3, [r4, #4]
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	2308      	movs	r3, #8
 80037f2:	89a2      	ldrh	r2, [r4, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	81a3      	strh	r3, [r4, #12]
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <__swsetup_r+0x86>
 80037fe:	21a0      	movs	r1, #160	@ 0xa0
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	0089      	lsls	r1, r1, #2
 8003806:	0092      	lsls	r2, r2, #2
 8003808:	400b      	ands	r3, r1
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <__swsetup_r+0x86>
 800380e:	0021      	movs	r1, r4
 8003810:	0028      	movs	r0, r5
 8003812:	f000 fdeb 	bl	80043ec <__smakebuf_r>
 8003816:	230c      	movs	r3, #12
 8003818:	5ee2      	ldrsh	r2, [r4, r3]
 800381a:	2101      	movs	r1, #1
 800381c:	0013      	movs	r3, r2
 800381e:	400b      	ands	r3, r1
 8003820:	420a      	tst	r2, r1
 8003822:	d00b      	beq.n	800383c <__swsetup_r+0xac>
 8003824:	2300      	movs	r3, #0
 8003826:	60a3      	str	r3, [r4, #8]
 8003828:	6963      	ldr	r3, [r4, #20]
 800382a:	425b      	negs	r3, r3
 800382c:	61a3      	str	r3, [r4, #24]
 800382e:	2000      	movs	r0, #0
 8003830:	6923      	ldr	r3, [r4, #16]
 8003832:	4283      	cmp	r3, r0
 8003834:	d101      	bne.n	800383a <__swsetup_r+0xaa>
 8003836:	0613      	lsls	r3, r2, #24
 8003838:	d4be      	bmi.n	80037b8 <__swsetup_r+0x28>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	0791      	lsls	r1, r2, #30
 800383e:	d400      	bmi.n	8003842 <__swsetup_r+0xb2>
 8003840:	6963      	ldr	r3, [r4, #20]
 8003842:	60a3      	str	r3, [r4, #8]
 8003844:	e7f3      	b.n	800382e <__swsetup_r+0x9e>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	20000018 	.word	0x20000018

0800384c <memset>:
 800384c:	0003      	movs	r3, r0
 800384e:	1882      	adds	r2, r0, r2
 8003850:	4293      	cmp	r3, r2
 8003852:	d100      	bne.n	8003856 <memset+0xa>
 8003854:	4770      	bx	lr
 8003856:	7019      	strb	r1, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	e7f9      	b.n	8003850 <memset+0x4>

0800385c <strcasecmp>:
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	0005      	movs	r5, r0
 8003860:	2400      	movs	r4, #0
 8003862:	2703      	movs	r7, #3
 8003864:	4e09      	ldr	r6, [pc, #36]	@ (800388c <strcasecmp+0x30>)
 8003866:	5d2a      	ldrb	r2, [r5, r4]
 8003868:	5cb3      	ldrb	r3, [r6, r2]
 800386a:	403b      	ands	r3, r7
 800386c:	2b01      	cmp	r3, #1
 800386e:	d100      	bne.n	8003872 <strcasecmp+0x16>
 8003870:	3220      	adds	r2, #32
 8003872:	5d0b      	ldrb	r3, [r1, r4]
 8003874:	5cf0      	ldrb	r0, [r6, r3]
 8003876:	4038      	ands	r0, r7
 8003878:	2801      	cmp	r0, #1
 800387a:	d100      	bne.n	800387e <strcasecmp+0x22>
 800387c:	3320      	adds	r3, #32
 800387e:	1ad0      	subs	r0, r2, r3
 8003880:	429a      	cmp	r2, r3
 8003882:	d102      	bne.n	800388a <strcasecmp+0x2e>
 8003884:	3401      	adds	r4, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ed      	bne.n	8003866 <strcasecmp+0xa>
 800388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388c:	080046d9 	.word	0x080046d9

08003890 <strtok>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	4b16      	ldr	r3, [pc, #88]	@ (80038ec <strtok+0x5c>)
 8003894:	0005      	movs	r5, r0
 8003896:	681f      	ldr	r7, [r3, #0]
 8003898:	000e      	movs	r6, r1
 800389a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800389c:	2c00      	cmp	r4, #0
 800389e:	d11d      	bne.n	80038dc <strtok+0x4c>
 80038a0:	2050      	movs	r0, #80	@ 0x50
 80038a2:	f000 f939 	bl	8003b18 <malloc>
 80038a6:	1e02      	subs	r2, r0, #0
 80038a8:	6478      	str	r0, [r7, #68]	@ 0x44
 80038aa:	d104      	bne.n	80038b6 <strtok+0x26>
 80038ac:	215b      	movs	r1, #91	@ 0x5b
 80038ae:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <strtok+0x60>)
 80038b0:	4810      	ldr	r0, [pc, #64]	@ (80038f4 <strtok+0x64>)
 80038b2:	f000 f8c9 	bl	8003a48 <__assert_func>
 80038b6:	6004      	str	r4, [r0, #0]
 80038b8:	6044      	str	r4, [r0, #4]
 80038ba:	6084      	str	r4, [r0, #8]
 80038bc:	60c4      	str	r4, [r0, #12]
 80038be:	6104      	str	r4, [r0, #16]
 80038c0:	6144      	str	r4, [r0, #20]
 80038c2:	6184      	str	r4, [r0, #24]
 80038c4:	6284      	str	r4, [r0, #40]	@ 0x28
 80038c6:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80038c8:	6304      	str	r4, [r0, #48]	@ 0x30
 80038ca:	6344      	str	r4, [r0, #52]	@ 0x34
 80038cc:	6384      	str	r4, [r0, #56]	@ 0x38
 80038ce:	63c4      	str	r4, [r0, #60]	@ 0x3c
 80038d0:	6404      	str	r4, [r0, #64]	@ 0x40
 80038d2:	6444      	str	r4, [r0, #68]	@ 0x44
 80038d4:	6484      	str	r4, [r0, #72]	@ 0x48
 80038d6:	64c4      	str	r4, [r0, #76]	@ 0x4c
 80038d8:	7704      	strb	r4, [r0, #28]
 80038da:	6244      	str	r4, [r0, #36]	@ 0x24
 80038dc:	0031      	movs	r1, r6
 80038de:	0028      	movs	r0, r5
 80038e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038e2:	2301      	movs	r3, #1
 80038e4:	f000 f808 	bl	80038f8 <__strtok_r>
 80038e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	20000018 	.word	0x20000018
 80038f0:	080047d9 	.word	0x080047d9
 80038f4:	080047f0 	.word	0x080047f0

080038f8 <__strtok_r>:
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	1e04      	subs	r4, r0, #0
 80038fc:	d102      	bne.n	8003904 <__strtok_r+0xc>
 80038fe:	6814      	ldr	r4, [r2, #0]
 8003900:	2c00      	cmp	r4, #0
 8003902:	d009      	beq.n	8003918 <__strtok_r+0x20>
 8003904:	0020      	movs	r0, r4
 8003906:	000e      	movs	r6, r1
 8003908:	7805      	ldrb	r5, [r0, #0]
 800390a:	3401      	adds	r4, #1
 800390c:	7837      	ldrb	r7, [r6, #0]
 800390e:	2f00      	cmp	r7, #0
 8003910:	d104      	bne.n	800391c <__strtok_r+0x24>
 8003912:	2d00      	cmp	r5, #0
 8003914:	d10d      	bne.n	8003932 <__strtok_r+0x3a>
 8003916:	6015      	str	r5, [r2, #0]
 8003918:	2000      	movs	r0, #0
 800391a:	e006      	b.n	800392a <__strtok_r+0x32>
 800391c:	3601      	adds	r6, #1
 800391e:	42bd      	cmp	r5, r7
 8003920:	d1f4      	bne.n	800390c <__strtok_r+0x14>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1ee      	bne.n	8003904 <__strtok_r+0xc>
 8003926:	6014      	str	r4, [r2, #0]
 8003928:	7003      	strb	r3, [r0, #0]
 800392a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800392c:	3301      	adds	r3, #1
 800392e:	2d00      	cmp	r5, #0
 8003930:	d102      	bne.n	8003938 <__strtok_r+0x40>
 8003932:	000b      	movs	r3, r1
 8003934:	7826      	ldrb	r6, [r4, #0]
 8003936:	3401      	adds	r4, #1
 8003938:	781d      	ldrb	r5, [r3, #0]
 800393a:	42ae      	cmp	r6, r5
 800393c:	d1f6      	bne.n	800392c <__strtok_r+0x34>
 800393e:	2300      	movs	r3, #0
 8003940:	001d      	movs	r5, r3
 8003942:	429e      	cmp	r6, r3
 8003944:	d002      	beq.n	800394c <__strtok_r+0x54>
 8003946:	0023      	movs	r3, r4
 8003948:	1e61      	subs	r1, r4, #1
 800394a:	700d      	strb	r5, [r1, #0]
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e7ec      	b.n	800392a <__strtok_r+0x32>

08003950 <_close_r>:
 8003950:	2300      	movs	r3, #0
 8003952:	b570      	push	{r4, r5, r6, lr}
 8003954:	4d06      	ldr	r5, [pc, #24]	@ (8003970 <_close_r+0x20>)
 8003956:	0004      	movs	r4, r0
 8003958:	0008      	movs	r0, r1
 800395a:	602b      	str	r3, [r5, #0]
 800395c:	f7fd f8f0 	bl	8000b40 <_close>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d103      	bne.n	800396c <_close_r+0x1c>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d000      	beq.n	800396c <_close_r+0x1c>
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	bd70      	pop	{r4, r5, r6, pc}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	20000430 	.word	0x20000430

08003974 <_lseek_r>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	0004      	movs	r4, r0
 8003978:	0008      	movs	r0, r1
 800397a:	0011      	movs	r1, r2
 800397c:	001a      	movs	r2, r3
 800397e:	2300      	movs	r3, #0
 8003980:	4d05      	ldr	r5, [pc, #20]	@ (8003998 <_lseek_r+0x24>)
 8003982:	602b      	str	r3, [r5, #0]
 8003984:	f7fd f8fd 	bl	8000b82 <_lseek>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d103      	bne.n	8003994 <_lseek_r+0x20>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d000      	beq.n	8003994 <_lseek_r+0x20>
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	bd70      	pop	{r4, r5, r6, pc}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	20000430 	.word	0x20000430

0800399c <_read_r>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	0004      	movs	r4, r0
 80039a0:	0008      	movs	r0, r1
 80039a2:	0011      	movs	r1, r2
 80039a4:	001a      	movs	r2, r3
 80039a6:	2300      	movs	r3, #0
 80039a8:	4d05      	ldr	r5, [pc, #20]	@ (80039c0 <_read_r+0x24>)
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	f7fd f8ab 	bl	8000b06 <_read>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d103      	bne.n	80039bc <_read_r+0x20>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d000      	beq.n	80039bc <_read_r+0x20>
 80039ba:	6023      	str	r3, [r4, #0]
 80039bc:	bd70      	pop	{r4, r5, r6, pc}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	20000430 	.word	0x20000430

080039c4 <_write_r>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	0004      	movs	r4, r0
 80039c8:	0008      	movs	r0, r1
 80039ca:	0011      	movs	r1, r2
 80039cc:	001a      	movs	r2, r3
 80039ce:	2300      	movs	r3, #0
 80039d0:	4d05      	ldr	r5, [pc, #20]	@ (80039e8 <_write_r+0x24>)
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	f7fc fc2e 	bl	8000234 <_write>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d103      	bne.n	80039e4 <_write_r+0x20>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d000      	beq.n	80039e4 <_write_r+0x20>
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	bd70      	pop	{r4, r5, r6, pc}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	20000430 	.word	0x20000430

080039ec <__errno>:
 80039ec:	4b01      	ldr	r3, [pc, #4]	@ (80039f4 <__errno+0x8>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	4770      	bx	lr
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	20000018 	.word	0x20000018

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	2600      	movs	r6, #0
 80039fc:	4c0c      	ldr	r4, [pc, #48]	@ (8003a30 <__libc_init_array+0x38>)
 80039fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003a34 <__libc_init_array+0x3c>)
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	2600      	movs	r6, #0
 8003a0a:	f000 fdf9 	bl	8004600 <_init>
 8003a0e:	4c0a      	ldr	r4, [pc, #40]	@ (8003a38 <__libc_init_array+0x40>)
 8003a10:	4d0a      	ldr	r5, [pc, #40]	@ (8003a3c <__libc_init_array+0x44>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	00b3      	lsls	r3, r6, #2
 8003a1e:	58eb      	ldr	r3, [r5, r3]
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	00b3      	lsls	r3, r6, #2
 8003a28:	58eb      	ldr	r3, [r5, r3]
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	080048bc 	.word	0x080048bc
 8003a34:	080048bc 	.word	0x080048bc
 8003a38:	080048c0 	.word	0x080048c0
 8003a3c:	080048bc 	.word	0x080048bc

08003a40 <__retarget_lock_init_recursive>:
 8003a40:	4770      	bx	lr

08003a42 <__retarget_lock_acquire_recursive>:
 8003a42:	4770      	bx	lr

08003a44 <__retarget_lock_release_recursive>:
 8003a44:	4770      	bx	lr
	...

08003a48 <__assert_func>:
 8003a48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003a4a:	0014      	movs	r4, r2
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <__assert_func+0x2c>)
 8003a50:	0005      	movs	r5, r0
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	000e      	movs	r6, r1
 8003a56:	68d8      	ldr	r0, [r3, #12]
 8003a58:	4b07      	ldr	r3, [pc, #28]	@ (8003a78 <__assert_func+0x30>)
 8003a5a:	2c00      	cmp	r4, #0
 8003a5c:	d101      	bne.n	8003a62 <__assert_func+0x1a>
 8003a5e:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <__assert_func+0x34>)
 8003a60:	001c      	movs	r4, r3
 8003a62:	4907      	ldr	r1, [pc, #28]	@ (8003a80 <__assert_func+0x38>)
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	9402      	str	r4, [sp, #8]
 8003a68:	002b      	movs	r3, r5
 8003a6a:	9600      	str	r6, [sp, #0]
 8003a6c:	f000 fc84 	bl	8004378 <fiprintf>
 8003a70:	f000 fd75 	bl	800455e <abort>
 8003a74:	20000018 	.word	0x20000018
 8003a78:	0800484a 	.word	0x0800484a
 8003a7c:	08004885 	.word	0x08004885
 8003a80:	08004857 	.word	0x08004857

08003a84 <_free_r>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	0005      	movs	r5, r0
 8003a88:	1e0c      	subs	r4, r1, #0
 8003a8a:	d010      	beq.n	8003aae <_free_r+0x2a>
 8003a8c:	3c04      	subs	r4, #4
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	da00      	bge.n	8003a96 <_free_r+0x12>
 8003a94:	18e4      	adds	r4, r4, r3
 8003a96:	0028      	movs	r0, r5
 8003a98:	f000 f8ea 	bl	8003c70 <__malloc_lock>
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <_free_r+0x90>)
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d105      	bne.n	8003ab0 <_free_r+0x2c>
 8003aa4:	6063      	str	r3, [r4, #4]
 8003aa6:	6014      	str	r4, [r2, #0]
 8003aa8:	0028      	movs	r0, r5
 8003aaa:	f000 f8e9 	bl	8003c80 <__malloc_unlock>
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	d908      	bls.n	8003ac6 <_free_r+0x42>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	1821      	adds	r1, r4, r0
 8003ab8:	428b      	cmp	r3, r1
 8003aba:	d1f3      	bne.n	8003aa4 <_free_r+0x20>
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	1809      	adds	r1, r1, r0
 8003ac2:	6021      	str	r1, [r4, #0]
 8003ac4:	e7ee      	b.n	8003aa4 <_free_r+0x20>
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <_free_r+0x4e>
 8003ace:	42a3      	cmp	r3, r4
 8003ad0:	d9f9      	bls.n	8003ac6 <_free_r+0x42>
 8003ad2:	6811      	ldr	r1, [r2, #0]
 8003ad4:	1850      	adds	r0, r2, r1
 8003ad6:	42a0      	cmp	r0, r4
 8003ad8:	d10b      	bne.n	8003af2 <_free_r+0x6e>
 8003ada:	6820      	ldr	r0, [r4, #0]
 8003adc:	1809      	adds	r1, r1, r0
 8003ade:	1850      	adds	r0, r2, r1
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	4283      	cmp	r3, r0
 8003ae4:	d1e0      	bne.n	8003aa8 <_free_r+0x24>
 8003ae6:	6818      	ldr	r0, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	1841      	adds	r1, r0, r1
 8003aec:	6011      	str	r1, [r2, #0]
 8003aee:	6053      	str	r3, [r2, #4]
 8003af0:	e7da      	b.n	8003aa8 <_free_r+0x24>
 8003af2:	42a0      	cmp	r0, r4
 8003af4:	d902      	bls.n	8003afc <_free_r+0x78>
 8003af6:	230c      	movs	r3, #12
 8003af8:	602b      	str	r3, [r5, #0]
 8003afa:	e7d5      	b.n	8003aa8 <_free_r+0x24>
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	1821      	adds	r1, r4, r0
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d103      	bne.n	8003b0c <_free_r+0x88>
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	1809      	adds	r1, r1, r0
 8003b0a:	6021      	str	r1, [r4, #0]
 8003b0c:	6063      	str	r3, [r4, #4]
 8003b0e:	6054      	str	r4, [r2, #4]
 8003b10:	e7ca      	b.n	8003aa8 <_free_r+0x24>
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	2000043c 	.word	0x2000043c

08003b18 <malloc>:
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	4b03      	ldr	r3, [pc, #12]	@ (8003b28 <malloc+0x10>)
 8003b1c:	0001      	movs	r1, r0
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	f000 f826 	bl	8003b70 <_malloc_r>
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	20000018 	.word	0x20000018

08003b2c <sbrk_aligned>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8003b6c <sbrk_aligned+0x40>)
 8003b30:	000d      	movs	r5, r1
 8003b32:	6831      	ldr	r1, [r6, #0]
 8003b34:	0004      	movs	r4, r0
 8003b36:	2900      	cmp	r1, #0
 8003b38:	d102      	bne.n	8003b40 <sbrk_aligned+0x14>
 8003b3a:	f000 fcf3 	bl	8004524 <_sbrk_r>
 8003b3e:	6030      	str	r0, [r6, #0]
 8003b40:	0029      	movs	r1, r5
 8003b42:	0020      	movs	r0, r4
 8003b44:	f000 fcee 	bl	8004524 <_sbrk_r>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d103      	bne.n	8003b54 <sbrk_aligned+0x28>
 8003b4c:	2501      	movs	r5, #1
 8003b4e:	426d      	negs	r5, r5
 8003b50:	0028      	movs	r0, r5
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	2303      	movs	r3, #3
 8003b56:	1cc5      	adds	r5, r0, #3
 8003b58:	439d      	bics	r5, r3
 8003b5a:	42a8      	cmp	r0, r5
 8003b5c:	d0f8      	beq.n	8003b50 <sbrk_aligned+0x24>
 8003b5e:	1a29      	subs	r1, r5, r0
 8003b60:	0020      	movs	r0, r4
 8003b62:	f000 fcdf 	bl	8004524 <_sbrk_r>
 8003b66:	3001      	adds	r0, #1
 8003b68:	d1f2      	bne.n	8003b50 <sbrk_aligned+0x24>
 8003b6a:	e7ef      	b.n	8003b4c <sbrk_aligned+0x20>
 8003b6c:	20000438 	.word	0x20000438

08003b70 <_malloc_r>:
 8003b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b72:	2203      	movs	r2, #3
 8003b74:	1ccb      	adds	r3, r1, #3
 8003b76:	4393      	bics	r3, r2
 8003b78:	3308      	adds	r3, #8
 8003b7a:	0005      	movs	r5, r0
 8003b7c:	001f      	movs	r7, r3
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	d234      	bcs.n	8003bec <_malloc_r+0x7c>
 8003b82:	270c      	movs	r7, #12
 8003b84:	42b9      	cmp	r1, r7
 8003b86:	d833      	bhi.n	8003bf0 <_malloc_r+0x80>
 8003b88:	0028      	movs	r0, r5
 8003b8a:	f000 f871 	bl	8003c70 <__malloc_lock>
 8003b8e:	4e37      	ldr	r6, [pc, #220]	@ (8003c6c <_malloc_r+0xfc>)
 8003b90:	6833      	ldr	r3, [r6, #0]
 8003b92:	001c      	movs	r4, r3
 8003b94:	2c00      	cmp	r4, #0
 8003b96:	d12f      	bne.n	8003bf8 <_malloc_r+0x88>
 8003b98:	0039      	movs	r1, r7
 8003b9a:	0028      	movs	r0, r5
 8003b9c:	f7ff ffc6 	bl	8003b2c <sbrk_aligned>
 8003ba0:	0004      	movs	r4, r0
 8003ba2:	1c43      	adds	r3, r0, #1
 8003ba4:	d15f      	bne.n	8003c66 <_malloc_r+0xf6>
 8003ba6:	6834      	ldr	r4, [r6, #0]
 8003ba8:	9400      	str	r4, [sp, #0]
 8003baa:	9b00      	ldr	r3, [sp, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d14a      	bne.n	8003c46 <_malloc_r+0xd6>
 8003bb0:	2c00      	cmp	r4, #0
 8003bb2:	d052      	beq.n	8003c5a <_malloc_r+0xea>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	0028      	movs	r0, r5
 8003bb8:	18e3      	adds	r3, r4, r3
 8003bba:	9900      	ldr	r1, [sp, #0]
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	f000 fcb1 	bl	8004524 <_sbrk_r>
 8003bc2:	9b01      	ldr	r3, [sp, #4]
 8003bc4:	4283      	cmp	r3, r0
 8003bc6:	d148      	bne.n	8003c5a <_malloc_r+0xea>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	0028      	movs	r0, r5
 8003bcc:	1aff      	subs	r7, r7, r3
 8003bce:	0039      	movs	r1, r7
 8003bd0:	f7ff ffac 	bl	8003b2c <sbrk_aligned>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d040      	beq.n	8003c5a <_malloc_r+0xea>
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	19db      	adds	r3, r3, r7
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	6833      	ldr	r3, [r6, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	2a00      	cmp	r2, #0
 8003be4:	d133      	bne.n	8003c4e <_malloc_r+0xde>
 8003be6:	9b00      	ldr	r3, [sp, #0]
 8003be8:	6033      	str	r3, [r6, #0]
 8003bea:	e019      	b.n	8003c20 <_malloc_r+0xb0>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	dac9      	bge.n	8003b84 <_malloc_r+0x14>
 8003bf0:	230c      	movs	r3, #12
 8003bf2:	602b      	str	r3, [r5, #0]
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bf8:	6821      	ldr	r1, [r4, #0]
 8003bfa:	1bc9      	subs	r1, r1, r7
 8003bfc:	d420      	bmi.n	8003c40 <_malloc_r+0xd0>
 8003bfe:	290b      	cmp	r1, #11
 8003c00:	d90a      	bls.n	8003c18 <_malloc_r+0xa8>
 8003c02:	19e2      	adds	r2, r4, r7
 8003c04:	6027      	str	r7, [r4, #0]
 8003c06:	42a3      	cmp	r3, r4
 8003c08:	d104      	bne.n	8003c14 <_malloc_r+0xa4>
 8003c0a:	6032      	str	r2, [r6, #0]
 8003c0c:	6863      	ldr	r3, [r4, #4]
 8003c0e:	6011      	str	r1, [r2, #0]
 8003c10:	6053      	str	r3, [r2, #4]
 8003c12:	e005      	b.n	8003c20 <_malloc_r+0xb0>
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	e7f9      	b.n	8003c0c <_malloc_r+0x9c>
 8003c18:	6862      	ldr	r2, [r4, #4]
 8003c1a:	42a3      	cmp	r3, r4
 8003c1c:	d10e      	bne.n	8003c3c <_malloc_r+0xcc>
 8003c1e:	6032      	str	r2, [r6, #0]
 8003c20:	0028      	movs	r0, r5
 8003c22:	f000 f82d 	bl	8003c80 <__malloc_unlock>
 8003c26:	0020      	movs	r0, r4
 8003c28:	2207      	movs	r2, #7
 8003c2a:	300b      	adds	r0, #11
 8003c2c:	1d23      	adds	r3, r4, #4
 8003c2e:	4390      	bics	r0, r2
 8003c30:	1ac2      	subs	r2, r0, r3
 8003c32:	4298      	cmp	r0, r3
 8003c34:	d0df      	beq.n	8003bf6 <_malloc_r+0x86>
 8003c36:	1a1b      	subs	r3, r3, r0
 8003c38:	50a3      	str	r3, [r4, r2]
 8003c3a:	e7dc      	b.n	8003bf6 <_malloc_r+0x86>
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	e7ef      	b.n	8003c20 <_malloc_r+0xb0>
 8003c40:	0023      	movs	r3, r4
 8003c42:	6864      	ldr	r4, [r4, #4]
 8003c44:	e7a6      	b.n	8003b94 <_malloc_r+0x24>
 8003c46:	9c00      	ldr	r4, [sp, #0]
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	e7ad      	b.n	8003baa <_malloc_r+0x3a>
 8003c4e:	001a      	movs	r2, r3
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	42a3      	cmp	r3, r4
 8003c54:	d1fb      	bne.n	8003c4e <_malloc_r+0xde>
 8003c56:	2300      	movs	r3, #0
 8003c58:	e7da      	b.n	8003c10 <_malloc_r+0xa0>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	0028      	movs	r0, r5
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	f000 f80e 	bl	8003c80 <__malloc_unlock>
 8003c64:	e7c6      	b.n	8003bf4 <_malloc_r+0x84>
 8003c66:	6007      	str	r7, [r0, #0]
 8003c68:	e7da      	b.n	8003c20 <_malloc_r+0xb0>
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	2000043c 	.word	0x2000043c

08003c70 <__malloc_lock>:
 8003c70:	b510      	push	{r4, lr}
 8003c72:	4802      	ldr	r0, [pc, #8]	@ (8003c7c <__malloc_lock+0xc>)
 8003c74:	f7ff fee5 	bl	8003a42 <__retarget_lock_acquire_recursive>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	20000434 	.word	0x20000434

08003c80 <__malloc_unlock>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	4802      	ldr	r0, [pc, #8]	@ (8003c8c <__malloc_unlock+0xc>)
 8003c84:	f7ff fede 	bl	8003a44 <__retarget_lock_release_recursive>
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	20000434 	.word	0x20000434

08003c90 <__sfputc_r>:
 8003c90:	6893      	ldr	r3, [r2, #8]
 8003c92:	b510      	push	{r4, lr}
 8003c94:	3b01      	subs	r3, #1
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da04      	bge.n	8003ca6 <__sfputc_r+0x16>
 8003c9c:	6994      	ldr	r4, [r2, #24]
 8003c9e:	42a3      	cmp	r3, r4
 8003ca0:	db07      	blt.n	8003cb2 <__sfputc_r+0x22>
 8003ca2:	290a      	cmp	r1, #10
 8003ca4:	d005      	beq.n	8003cb2 <__sfputc_r+0x22>
 8003ca6:	6813      	ldr	r3, [r2, #0]
 8003ca8:	1c58      	adds	r0, r3, #1
 8003caa:	6010      	str	r0, [r2, #0]
 8003cac:	7019      	strb	r1, [r3, #0]
 8003cae:	0008      	movs	r0, r1
 8003cb0:	bd10      	pop	{r4, pc}
 8003cb2:	f7ff fd2b 	bl	800370c <__swbuf_r>
 8003cb6:	0001      	movs	r1, r0
 8003cb8:	e7f9      	b.n	8003cae <__sfputc_r+0x1e>

08003cba <__sfputs_r>:
 8003cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbc:	0006      	movs	r6, r0
 8003cbe:	000f      	movs	r7, r1
 8003cc0:	0014      	movs	r4, r2
 8003cc2:	18d5      	adds	r5, r2, r3
 8003cc4:	42ac      	cmp	r4, r5
 8003cc6:	d101      	bne.n	8003ccc <__sfputs_r+0x12>
 8003cc8:	2000      	movs	r0, #0
 8003cca:	e007      	b.n	8003cdc <__sfputs_r+0x22>
 8003ccc:	7821      	ldrb	r1, [r4, #0]
 8003cce:	003a      	movs	r2, r7
 8003cd0:	0030      	movs	r0, r6
 8003cd2:	f7ff ffdd 	bl	8003c90 <__sfputc_r>
 8003cd6:	3401      	adds	r4, #1
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d1f3      	bne.n	8003cc4 <__sfputs_r+0xa>
 8003cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ce0 <_vfiprintf_r>:
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	b0a1      	sub	sp, #132	@ 0x84
 8003ce4:	000f      	movs	r7, r1
 8003ce6:	0015      	movs	r5, r2
 8003ce8:	001e      	movs	r6, r3
 8003cea:	9003      	str	r0, [sp, #12]
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d004      	beq.n	8003cfa <_vfiprintf_r+0x1a>
 8003cf0:	6a03      	ldr	r3, [r0, #32]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <_vfiprintf_r+0x1a>
 8003cf6:	f7ff fc0f 	bl	8003518 <__sinit>
 8003cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cfc:	07db      	lsls	r3, r3, #31
 8003cfe:	d405      	bmi.n	8003d0c <_vfiprintf_r+0x2c>
 8003d00:	89bb      	ldrh	r3, [r7, #12]
 8003d02:	059b      	lsls	r3, r3, #22
 8003d04:	d402      	bmi.n	8003d0c <_vfiprintf_r+0x2c>
 8003d06:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003d08:	f7ff fe9b 	bl	8003a42 <__retarget_lock_acquire_recursive>
 8003d0c:	89bb      	ldrh	r3, [r7, #12]
 8003d0e:	071b      	lsls	r3, r3, #28
 8003d10:	d502      	bpl.n	8003d18 <_vfiprintf_r+0x38>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d113      	bne.n	8003d40 <_vfiprintf_r+0x60>
 8003d18:	0039      	movs	r1, r7
 8003d1a:	9803      	ldr	r0, [sp, #12]
 8003d1c:	f7ff fd38 	bl	8003790 <__swsetup_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d00d      	beq.n	8003d40 <_vfiprintf_r+0x60>
 8003d24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d26:	07db      	lsls	r3, r3, #31
 8003d28:	d503      	bpl.n	8003d32 <_vfiprintf_r+0x52>
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	4240      	negs	r0, r0
 8003d2e:	b021      	add	sp, #132	@ 0x84
 8003d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d32:	89bb      	ldrh	r3, [r7, #12]
 8003d34:	059b      	lsls	r3, r3, #22
 8003d36:	d4f8      	bmi.n	8003d2a <_vfiprintf_r+0x4a>
 8003d38:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003d3a:	f7ff fe83 	bl	8003a44 <__retarget_lock_release_recursive>
 8003d3e:	e7f4      	b.n	8003d2a <_vfiprintf_r+0x4a>
 8003d40:	2300      	movs	r3, #0
 8003d42:	ac08      	add	r4, sp, #32
 8003d44:	6163      	str	r3, [r4, #20]
 8003d46:	3320      	adds	r3, #32
 8003d48:	7663      	strb	r3, [r4, #25]
 8003d4a:	3310      	adds	r3, #16
 8003d4c:	76a3      	strb	r3, [r4, #26]
 8003d4e:	9607      	str	r6, [sp, #28]
 8003d50:	002e      	movs	r6, r5
 8003d52:	7833      	ldrb	r3, [r6, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <_vfiprintf_r+0x7c>
 8003d58:	2b25      	cmp	r3, #37	@ 0x25
 8003d5a:	d148      	bne.n	8003dee <_vfiprintf_r+0x10e>
 8003d5c:	1b73      	subs	r3, r6, r5
 8003d5e:	9305      	str	r3, [sp, #20]
 8003d60:	42ae      	cmp	r6, r5
 8003d62:	d00b      	beq.n	8003d7c <_vfiprintf_r+0x9c>
 8003d64:	002a      	movs	r2, r5
 8003d66:	0039      	movs	r1, r7
 8003d68:	9803      	ldr	r0, [sp, #12]
 8003d6a:	f7ff ffa6 	bl	8003cba <__sfputs_r>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d100      	bne.n	8003d74 <_vfiprintf_r+0x94>
 8003d72:	e0ae      	b.n	8003ed2 <_vfiprintf_r+0x1f2>
 8003d74:	6963      	ldr	r3, [r4, #20]
 8003d76:	9a05      	ldr	r2, [sp, #20]
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	6163      	str	r3, [r4, #20]
 8003d7c:	7833      	ldrb	r3, [r6, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d100      	bne.n	8003d84 <_vfiprintf_r+0xa4>
 8003d82:	e0a6      	b.n	8003ed2 <_vfiprintf_r+0x1f2>
 8003d84:	2201      	movs	r2, #1
 8003d86:	2300      	movs	r3, #0
 8003d88:	4252      	negs	r2, r2
 8003d8a:	6062      	str	r2, [r4, #4]
 8003d8c:	a904      	add	r1, sp, #16
 8003d8e:	3254      	adds	r2, #84	@ 0x54
 8003d90:	1852      	adds	r2, r2, r1
 8003d92:	1c75      	adds	r5, r6, #1
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	60e3      	str	r3, [r4, #12]
 8003d98:	60a3      	str	r3, [r4, #8]
 8003d9a:	7013      	strb	r3, [r2, #0]
 8003d9c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003d9e:	4b59      	ldr	r3, [pc, #356]	@ (8003f04 <_vfiprintf_r+0x224>)
 8003da0:	2205      	movs	r2, #5
 8003da2:	0018      	movs	r0, r3
 8003da4:	7829      	ldrb	r1, [r5, #0]
 8003da6:	9305      	str	r3, [sp, #20]
 8003da8:	f000 fbce 	bl	8004548 <memchr>
 8003dac:	1c6e      	adds	r6, r5, #1
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d11f      	bne.n	8003df2 <_vfiprintf_r+0x112>
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	06d3      	lsls	r3, r2, #27
 8003db6:	d504      	bpl.n	8003dc2 <_vfiprintf_r+0xe2>
 8003db8:	2353      	movs	r3, #83	@ 0x53
 8003dba:	a904      	add	r1, sp, #16
 8003dbc:	185b      	adds	r3, r3, r1
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	7019      	strb	r1, [r3, #0]
 8003dc2:	0713      	lsls	r3, r2, #28
 8003dc4:	d504      	bpl.n	8003dd0 <_vfiprintf_r+0xf0>
 8003dc6:	2353      	movs	r3, #83	@ 0x53
 8003dc8:	a904      	add	r1, sp, #16
 8003dca:	185b      	adds	r3, r3, r1
 8003dcc:	212b      	movs	r1, #43	@ 0x2b
 8003dce:	7019      	strb	r1, [r3, #0]
 8003dd0:	782b      	ldrb	r3, [r5, #0]
 8003dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dd4:	d016      	beq.n	8003e04 <_vfiprintf_r+0x124>
 8003dd6:	002e      	movs	r6, r5
 8003dd8:	2100      	movs	r1, #0
 8003dda:	200a      	movs	r0, #10
 8003ddc:	68e3      	ldr	r3, [r4, #12]
 8003dde:	7832      	ldrb	r2, [r6, #0]
 8003de0:	1c75      	adds	r5, r6, #1
 8003de2:	3a30      	subs	r2, #48	@ 0x30
 8003de4:	2a09      	cmp	r2, #9
 8003de6:	d950      	bls.n	8003e8a <_vfiprintf_r+0x1aa>
 8003de8:	2900      	cmp	r1, #0
 8003dea:	d111      	bne.n	8003e10 <_vfiprintf_r+0x130>
 8003dec:	e017      	b.n	8003e1e <_vfiprintf_r+0x13e>
 8003dee:	3601      	adds	r6, #1
 8003df0:	e7af      	b.n	8003d52 <_vfiprintf_r+0x72>
 8003df2:	9b05      	ldr	r3, [sp, #20]
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	1ac0      	subs	r0, r0, r3
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4083      	lsls	r3, r0
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	0035      	movs	r5, r6
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	e7cc      	b.n	8003d9e <_vfiprintf_r+0xbe>
 8003e04:	9b07      	ldr	r3, [sp, #28]
 8003e06:	1d19      	adds	r1, r3, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	9107      	str	r1, [sp, #28]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	db01      	blt.n	8003e14 <_vfiprintf_r+0x134>
 8003e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e12:	e004      	b.n	8003e1e <_vfiprintf_r+0x13e>
 8003e14:	425b      	negs	r3, r3
 8003e16:	60e3      	str	r3, [r4, #12]
 8003e18:	2302      	movs	r3, #2
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	7833      	ldrb	r3, [r6, #0]
 8003e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e22:	d10c      	bne.n	8003e3e <_vfiprintf_r+0x15e>
 8003e24:	7873      	ldrb	r3, [r6, #1]
 8003e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e28:	d134      	bne.n	8003e94 <_vfiprintf_r+0x1b4>
 8003e2a:	9b07      	ldr	r3, [sp, #28]
 8003e2c:	3602      	adds	r6, #2
 8003e2e:	1d1a      	adds	r2, r3, #4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	9207      	str	r2, [sp, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	da01      	bge.n	8003e3c <_vfiprintf_r+0x15c>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	425b      	negs	r3, r3
 8003e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e3e:	4d32      	ldr	r5, [pc, #200]	@ (8003f08 <_vfiprintf_r+0x228>)
 8003e40:	2203      	movs	r2, #3
 8003e42:	0028      	movs	r0, r5
 8003e44:	7831      	ldrb	r1, [r6, #0]
 8003e46:	f000 fb7f 	bl	8004548 <memchr>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d006      	beq.n	8003e5c <_vfiprintf_r+0x17c>
 8003e4e:	2340      	movs	r3, #64	@ 0x40
 8003e50:	1b40      	subs	r0, r0, r5
 8003e52:	4083      	lsls	r3, r0
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	3601      	adds	r6, #1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	6023      	str	r3, [r4, #0]
 8003e5c:	7831      	ldrb	r1, [r6, #0]
 8003e5e:	2206      	movs	r2, #6
 8003e60:	482a      	ldr	r0, [pc, #168]	@ (8003f0c <_vfiprintf_r+0x22c>)
 8003e62:	1c75      	adds	r5, r6, #1
 8003e64:	7621      	strb	r1, [r4, #24]
 8003e66:	f000 fb6f 	bl	8004548 <memchr>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d040      	beq.n	8003ef0 <_vfiprintf_r+0x210>
 8003e6e:	4b28      	ldr	r3, [pc, #160]	@ (8003f10 <_vfiprintf_r+0x230>)
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d122      	bne.n	8003eba <_vfiprintf_r+0x1da>
 8003e74:	2207      	movs	r2, #7
 8003e76:	9b07      	ldr	r3, [sp, #28]
 8003e78:	3307      	adds	r3, #7
 8003e7a:	4393      	bics	r3, r2
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	9307      	str	r3, [sp, #28]
 8003e80:	6963      	ldr	r3, [r4, #20]
 8003e82:	9a04      	ldr	r2, [sp, #16]
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	6163      	str	r3, [r4, #20]
 8003e88:	e762      	b.n	8003d50 <_vfiprintf_r+0x70>
 8003e8a:	4343      	muls	r3, r0
 8003e8c:	002e      	movs	r6, r5
 8003e8e:	2101      	movs	r1, #1
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	e7a4      	b.n	8003dde <_vfiprintf_r+0xfe>
 8003e94:	2300      	movs	r3, #0
 8003e96:	200a      	movs	r0, #10
 8003e98:	0019      	movs	r1, r3
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	6063      	str	r3, [r4, #4]
 8003e9e:	7832      	ldrb	r2, [r6, #0]
 8003ea0:	1c75      	adds	r5, r6, #1
 8003ea2:	3a30      	subs	r2, #48	@ 0x30
 8003ea4:	2a09      	cmp	r2, #9
 8003ea6:	d903      	bls.n	8003eb0 <_vfiprintf_r+0x1d0>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0c8      	beq.n	8003e3e <_vfiprintf_r+0x15e>
 8003eac:	9109      	str	r1, [sp, #36]	@ 0x24
 8003eae:	e7c6      	b.n	8003e3e <_vfiprintf_r+0x15e>
 8003eb0:	4341      	muls	r1, r0
 8003eb2:	002e      	movs	r6, r5
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	1889      	adds	r1, r1, r2
 8003eb8:	e7f1      	b.n	8003e9e <_vfiprintf_r+0x1be>
 8003eba:	aa07      	add	r2, sp, #28
 8003ebc:	9200      	str	r2, [sp, #0]
 8003ebe:	0021      	movs	r1, r4
 8003ec0:	003a      	movs	r2, r7
 8003ec2:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <_vfiprintf_r+0x234>)
 8003ec4:	9803      	ldr	r0, [sp, #12]
 8003ec6:	e000      	b.n	8003eca <_vfiprintf_r+0x1ea>
 8003ec8:	bf00      	nop
 8003eca:	9004      	str	r0, [sp, #16]
 8003ecc:	9b04      	ldr	r3, [sp, #16]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	d1d6      	bne.n	8003e80 <_vfiprintf_r+0x1a0>
 8003ed2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ed4:	07db      	lsls	r3, r3, #31
 8003ed6:	d405      	bmi.n	8003ee4 <_vfiprintf_r+0x204>
 8003ed8:	89bb      	ldrh	r3, [r7, #12]
 8003eda:	059b      	lsls	r3, r3, #22
 8003edc:	d402      	bmi.n	8003ee4 <_vfiprintf_r+0x204>
 8003ede:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003ee0:	f7ff fdb0 	bl	8003a44 <__retarget_lock_release_recursive>
 8003ee4:	89bb      	ldrh	r3, [r7, #12]
 8003ee6:	065b      	lsls	r3, r3, #25
 8003ee8:	d500      	bpl.n	8003eec <_vfiprintf_r+0x20c>
 8003eea:	e71e      	b.n	8003d2a <_vfiprintf_r+0x4a>
 8003eec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003eee:	e71e      	b.n	8003d2e <_vfiprintf_r+0x4e>
 8003ef0:	aa07      	add	r2, sp, #28
 8003ef2:	9200      	str	r2, [sp, #0]
 8003ef4:	0021      	movs	r1, r4
 8003ef6:	003a      	movs	r2, r7
 8003ef8:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <_vfiprintf_r+0x234>)
 8003efa:	9803      	ldr	r0, [sp, #12]
 8003efc:	f000 f87c 	bl	8003ff8 <_printf_i>
 8003f00:	e7e3      	b.n	8003eca <_vfiprintf_r+0x1ea>
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	08004886 	.word	0x08004886
 8003f08:	0800488c 	.word	0x0800488c
 8003f0c:	08004890 	.word	0x08004890
 8003f10:	00000000 	.word	0x00000000
 8003f14:	08003cbb 	.word	0x08003cbb

08003f18 <_printf_common>:
 8003f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1a:	0016      	movs	r6, r2
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	688a      	ldr	r2, [r1, #8]
 8003f20:	690b      	ldr	r3, [r1, #16]
 8003f22:	000c      	movs	r4, r1
 8003f24:	9000      	str	r0, [sp, #0]
 8003f26:	4293      	cmp	r3, r2
 8003f28:	da00      	bge.n	8003f2c <_printf_common+0x14>
 8003f2a:	0013      	movs	r3, r2
 8003f2c:	0022      	movs	r2, r4
 8003f2e:	6033      	str	r3, [r6, #0]
 8003f30:	3243      	adds	r2, #67	@ 0x43
 8003f32:	7812      	ldrb	r2, [r2, #0]
 8003f34:	2a00      	cmp	r2, #0
 8003f36:	d001      	beq.n	8003f3c <_printf_common+0x24>
 8003f38:	3301      	adds	r3, #1
 8003f3a:	6033      	str	r3, [r6, #0]
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	069b      	lsls	r3, r3, #26
 8003f40:	d502      	bpl.n	8003f48 <_printf_common+0x30>
 8003f42:	6833      	ldr	r3, [r6, #0]
 8003f44:	3302      	adds	r3, #2
 8003f46:	6033      	str	r3, [r6, #0]
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	2306      	movs	r3, #6
 8003f4c:	0015      	movs	r5, r2
 8003f4e:	401d      	ands	r5, r3
 8003f50:	421a      	tst	r2, r3
 8003f52:	d027      	beq.n	8003fa4 <_printf_common+0x8c>
 8003f54:	0023      	movs	r3, r4
 8003f56:	3343      	adds	r3, #67	@ 0x43
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	1e5a      	subs	r2, r3, #1
 8003f5c:	4193      	sbcs	r3, r2
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	0692      	lsls	r2, r2, #26
 8003f62:	d430      	bmi.n	8003fc6 <_printf_common+0xae>
 8003f64:	0022      	movs	r2, r4
 8003f66:	9901      	ldr	r1, [sp, #4]
 8003f68:	9800      	ldr	r0, [sp, #0]
 8003f6a:	9d08      	ldr	r5, [sp, #32]
 8003f6c:	3243      	adds	r2, #67	@ 0x43
 8003f6e:	47a8      	blx	r5
 8003f70:	3001      	adds	r0, #1
 8003f72:	d025      	beq.n	8003fc0 <_printf_common+0xa8>
 8003f74:	2206      	movs	r2, #6
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	2500      	movs	r5, #0
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d105      	bne.n	8003f8c <_printf_common+0x74>
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	68e5      	ldr	r5, [r4, #12]
 8003f84:	1aed      	subs	r5, r5, r3
 8003f86:	43eb      	mvns	r3, r5
 8003f88:	17db      	asrs	r3, r3, #31
 8003f8a:	401d      	ands	r5, r3
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	6922      	ldr	r2, [r4, #16]
 8003f90:	4293      	cmp	r3, r2
 8003f92:	dd01      	ble.n	8003f98 <_printf_common+0x80>
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	18ed      	adds	r5, r5, r3
 8003f98:	2600      	movs	r6, #0
 8003f9a:	42b5      	cmp	r5, r6
 8003f9c:	d120      	bne.n	8003fe0 <_printf_common+0xc8>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e010      	b.n	8003fc4 <_printf_common+0xac>
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	68e3      	ldr	r3, [r4, #12]
 8003fa6:	6832      	ldr	r2, [r6, #0]
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	42ab      	cmp	r3, r5
 8003fac:	ddd2      	ble.n	8003f54 <_printf_common+0x3c>
 8003fae:	0022      	movs	r2, r4
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	9901      	ldr	r1, [sp, #4]
 8003fb4:	9800      	ldr	r0, [sp, #0]
 8003fb6:	9f08      	ldr	r7, [sp, #32]
 8003fb8:	3219      	adds	r2, #25
 8003fba:	47b8      	blx	r7
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d1f0      	bne.n	8003fa2 <_printf_common+0x8a>
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	4240      	negs	r0, r0
 8003fc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fc6:	2030      	movs	r0, #48	@ 0x30
 8003fc8:	18e1      	adds	r1, r4, r3
 8003fca:	3143      	adds	r1, #67	@ 0x43
 8003fcc:	7008      	strb	r0, [r1, #0]
 8003fce:	0021      	movs	r1, r4
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	3145      	adds	r1, #69	@ 0x45
 8003fd4:	7809      	ldrb	r1, [r1, #0]
 8003fd6:	18a2      	adds	r2, r4, r2
 8003fd8:	3243      	adds	r2, #67	@ 0x43
 8003fda:	3302      	adds	r3, #2
 8003fdc:	7011      	strb	r1, [r2, #0]
 8003fde:	e7c1      	b.n	8003f64 <_printf_common+0x4c>
 8003fe0:	0022      	movs	r2, r4
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	9901      	ldr	r1, [sp, #4]
 8003fe6:	9800      	ldr	r0, [sp, #0]
 8003fe8:	9f08      	ldr	r7, [sp, #32]
 8003fea:	321a      	adds	r2, #26
 8003fec:	47b8      	blx	r7
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d0e6      	beq.n	8003fc0 <_printf_common+0xa8>
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	e7d1      	b.n	8003f9a <_printf_common+0x82>
	...

08003ff8 <_printf_i>:
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	b08b      	sub	sp, #44	@ 0x2c
 8003ffc:	9206      	str	r2, [sp, #24]
 8003ffe:	000a      	movs	r2, r1
 8004000:	3243      	adds	r2, #67	@ 0x43
 8004002:	9307      	str	r3, [sp, #28]
 8004004:	9005      	str	r0, [sp, #20]
 8004006:	9203      	str	r2, [sp, #12]
 8004008:	7e0a      	ldrb	r2, [r1, #24]
 800400a:	000c      	movs	r4, r1
 800400c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800400e:	2a78      	cmp	r2, #120	@ 0x78
 8004010:	d809      	bhi.n	8004026 <_printf_i+0x2e>
 8004012:	2a62      	cmp	r2, #98	@ 0x62
 8004014:	d80b      	bhi.n	800402e <_printf_i+0x36>
 8004016:	2a00      	cmp	r2, #0
 8004018:	d100      	bne.n	800401c <_printf_i+0x24>
 800401a:	e0bc      	b.n	8004196 <_printf_i+0x19e>
 800401c:	497b      	ldr	r1, [pc, #492]	@ (800420c <_printf_i+0x214>)
 800401e:	9104      	str	r1, [sp, #16]
 8004020:	2a58      	cmp	r2, #88	@ 0x58
 8004022:	d100      	bne.n	8004026 <_printf_i+0x2e>
 8004024:	e090      	b.n	8004148 <_printf_i+0x150>
 8004026:	0025      	movs	r5, r4
 8004028:	3542      	adds	r5, #66	@ 0x42
 800402a:	702a      	strb	r2, [r5, #0]
 800402c:	e022      	b.n	8004074 <_printf_i+0x7c>
 800402e:	0010      	movs	r0, r2
 8004030:	3863      	subs	r0, #99	@ 0x63
 8004032:	2815      	cmp	r0, #21
 8004034:	d8f7      	bhi.n	8004026 <_printf_i+0x2e>
 8004036:	f7fc f867 	bl	8000108 <__gnu_thumb1_case_shi>
 800403a:	0016      	.short	0x0016
 800403c:	fff6001f 	.word	0xfff6001f
 8004040:	fff6fff6 	.word	0xfff6fff6
 8004044:	001ffff6 	.word	0x001ffff6
 8004048:	fff6fff6 	.word	0xfff6fff6
 800404c:	fff6fff6 	.word	0xfff6fff6
 8004050:	003600a1 	.word	0x003600a1
 8004054:	fff60080 	.word	0xfff60080
 8004058:	00b2fff6 	.word	0x00b2fff6
 800405c:	0036fff6 	.word	0x0036fff6
 8004060:	fff6fff6 	.word	0xfff6fff6
 8004064:	0084      	.short	0x0084
 8004066:	0025      	movs	r5, r4
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	3542      	adds	r5, #66	@ 0x42
 800406c:	1d11      	adds	r1, r2, #4
 800406e:	6019      	str	r1, [r3, #0]
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	702b      	strb	r3, [r5, #0]
 8004074:	2301      	movs	r3, #1
 8004076:	e0a0      	b.n	80041ba <_printf_i+0x1c2>
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	6809      	ldr	r1, [r1, #0]
 800407c:	1d02      	adds	r2, r0, #4
 800407e:	060d      	lsls	r5, r1, #24
 8004080:	d50b      	bpl.n	800409a <_printf_i+0xa2>
 8004082:	6806      	ldr	r6, [r0, #0]
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	2e00      	cmp	r6, #0
 8004088:	da03      	bge.n	8004092 <_printf_i+0x9a>
 800408a:	232d      	movs	r3, #45	@ 0x2d
 800408c:	9a03      	ldr	r2, [sp, #12]
 800408e:	4276      	negs	r6, r6
 8004090:	7013      	strb	r3, [r2, #0]
 8004092:	4b5e      	ldr	r3, [pc, #376]	@ (800420c <_printf_i+0x214>)
 8004094:	270a      	movs	r7, #10
 8004096:	9304      	str	r3, [sp, #16]
 8004098:	e018      	b.n	80040cc <_printf_i+0xd4>
 800409a:	6806      	ldr	r6, [r0, #0]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	0649      	lsls	r1, r1, #25
 80040a0:	d5f1      	bpl.n	8004086 <_printf_i+0x8e>
 80040a2:	b236      	sxth	r6, r6
 80040a4:	e7ef      	b.n	8004086 <_printf_i+0x8e>
 80040a6:	6808      	ldr	r0, [r1, #0]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	c940      	ldmia	r1!, {r6}
 80040ac:	0605      	lsls	r5, r0, #24
 80040ae:	d402      	bmi.n	80040b6 <_printf_i+0xbe>
 80040b0:	0640      	lsls	r0, r0, #25
 80040b2:	d500      	bpl.n	80040b6 <_printf_i+0xbe>
 80040b4:	b2b6      	uxth	r6, r6
 80040b6:	6019      	str	r1, [r3, #0]
 80040b8:	4b54      	ldr	r3, [pc, #336]	@ (800420c <_printf_i+0x214>)
 80040ba:	270a      	movs	r7, #10
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	2a6f      	cmp	r2, #111	@ 0x6f
 80040c0:	d100      	bne.n	80040c4 <_printf_i+0xcc>
 80040c2:	3f02      	subs	r7, #2
 80040c4:	0023      	movs	r3, r4
 80040c6:	2200      	movs	r2, #0
 80040c8:	3343      	adds	r3, #67	@ 0x43
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	60a3      	str	r3, [r4, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db03      	blt.n	80040dc <_printf_i+0xe4>
 80040d4:	2104      	movs	r1, #4
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	438a      	bics	r2, r1
 80040da:	6022      	str	r2, [r4, #0]
 80040dc:	2e00      	cmp	r6, #0
 80040de:	d102      	bne.n	80040e6 <_printf_i+0xee>
 80040e0:	9d03      	ldr	r5, [sp, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <_printf_i+0x108>
 80040e6:	9d03      	ldr	r5, [sp, #12]
 80040e8:	0030      	movs	r0, r6
 80040ea:	0039      	movs	r1, r7
 80040ec:	f7fc f89c 	bl	8000228 <__aeabi_uidivmod>
 80040f0:	9b04      	ldr	r3, [sp, #16]
 80040f2:	3d01      	subs	r5, #1
 80040f4:	5c5b      	ldrb	r3, [r3, r1]
 80040f6:	702b      	strb	r3, [r5, #0]
 80040f8:	0033      	movs	r3, r6
 80040fa:	0006      	movs	r6, r0
 80040fc:	429f      	cmp	r7, r3
 80040fe:	d9f3      	bls.n	80040e8 <_printf_i+0xf0>
 8004100:	2f08      	cmp	r7, #8
 8004102:	d109      	bne.n	8004118 <_printf_i+0x120>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	07db      	lsls	r3, r3, #31
 8004108:	d506      	bpl.n	8004118 <_printf_i+0x120>
 800410a:	6862      	ldr	r2, [r4, #4]
 800410c:	6923      	ldr	r3, [r4, #16]
 800410e:	429a      	cmp	r2, r3
 8004110:	dc02      	bgt.n	8004118 <_printf_i+0x120>
 8004112:	2330      	movs	r3, #48	@ 0x30
 8004114:	3d01      	subs	r5, #1
 8004116:	702b      	strb	r3, [r5, #0]
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	1b5b      	subs	r3, r3, r5
 800411c:	6123      	str	r3, [r4, #16]
 800411e:	9b07      	ldr	r3, [sp, #28]
 8004120:	0021      	movs	r1, r4
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	9805      	ldr	r0, [sp, #20]
 8004126:	9b06      	ldr	r3, [sp, #24]
 8004128:	aa09      	add	r2, sp, #36	@ 0x24
 800412a:	f7ff fef5 	bl	8003f18 <_printf_common>
 800412e:	3001      	adds	r0, #1
 8004130:	d148      	bne.n	80041c4 <_printf_i+0x1cc>
 8004132:	2001      	movs	r0, #1
 8004134:	4240      	negs	r0, r0
 8004136:	b00b      	add	sp, #44	@ 0x2c
 8004138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413a:	2220      	movs	r2, #32
 800413c:	6809      	ldr	r1, [r1, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	6022      	str	r2, [r4, #0]
 8004142:	2278      	movs	r2, #120	@ 0x78
 8004144:	4932      	ldr	r1, [pc, #200]	@ (8004210 <_printf_i+0x218>)
 8004146:	9104      	str	r1, [sp, #16]
 8004148:	0021      	movs	r1, r4
 800414a:	3145      	adds	r1, #69	@ 0x45
 800414c:	700a      	strb	r2, [r1, #0]
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	c940      	ldmia	r1!, {r6}
 8004154:	0610      	lsls	r0, r2, #24
 8004156:	d402      	bmi.n	800415e <_printf_i+0x166>
 8004158:	0650      	lsls	r0, r2, #25
 800415a:	d500      	bpl.n	800415e <_printf_i+0x166>
 800415c:	b2b6      	uxth	r6, r6
 800415e:	6019      	str	r1, [r3, #0]
 8004160:	07d3      	lsls	r3, r2, #31
 8004162:	d502      	bpl.n	800416a <_printf_i+0x172>
 8004164:	2320      	movs	r3, #32
 8004166:	4313      	orrs	r3, r2
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	2e00      	cmp	r6, #0
 800416c:	d001      	beq.n	8004172 <_printf_i+0x17a>
 800416e:	2710      	movs	r7, #16
 8004170:	e7a8      	b.n	80040c4 <_printf_i+0xcc>
 8004172:	2220      	movs	r2, #32
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	4393      	bics	r3, r2
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	e7f8      	b.n	800416e <_printf_i+0x176>
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	680d      	ldr	r5, [r1, #0]
 8004180:	1d10      	adds	r0, r2, #4
 8004182:	6949      	ldr	r1, [r1, #20]
 8004184:	6018      	str	r0, [r3, #0]
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	062e      	lsls	r6, r5, #24
 800418a:	d501      	bpl.n	8004190 <_printf_i+0x198>
 800418c:	6019      	str	r1, [r3, #0]
 800418e:	e002      	b.n	8004196 <_printf_i+0x19e>
 8004190:	066d      	lsls	r5, r5, #25
 8004192:	d5fb      	bpl.n	800418c <_printf_i+0x194>
 8004194:	8019      	strh	r1, [r3, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	9d03      	ldr	r5, [sp, #12]
 800419a:	6123      	str	r3, [r4, #16]
 800419c:	e7bf      	b.n	800411e <_printf_i+0x126>
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	1d11      	adds	r1, r2, #4
 80041a2:	6019      	str	r1, [r3, #0]
 80041a4:	6815      	ldr	r5, [r2, #0]
 80041a6:	2100      	movs	r1, #0
 80041a8:	0028      	movs	r0, r5
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	f000 f9cc 	bl	8004548 <memchr>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d001      	beq.n	80041b8 <_printf_i+0x1c0>
 80041b4:	1b40      	subs	r0, r0, r5
 80041b6:	6060      	str	r0, [r4, #4]
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	2300      	movs	r3, #0
 80041be:	9a03      	ldr	r2, [sp, #12]
 80041c0:	7013      	strb	r3, [r2, #0]
 80041c2:	e7ac      	b.n	800411e <_printf_i+0x126>
 80041c4:	002a      	movs	r2, r5
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	9906      	ldr	r1, [sp, #24]
 80041ca:	9805      	ldr	r0, [sp, #20]
 80041cc:	9d07      	ldr	r5, [sp, #28]
 80041ce:	47a8      	blx	r5
 80041d0:	3001      	adds	r0, #1
 80041d2:	d0ae      	beq.n	8004132 <_printf_i+0x13a>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	079b      	lsls	r3, r3, #30
 80041d8:	d415      	bmi.n	8004206 <_printf_i+0x20e>
 80041da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041dc:	68e0      	ldr	r0, [r4, #12]
 80041de:	4298      	cmp	r0, r3
 80041e0:	daa9      	bge.n	8004136 <_printf_i+0x13e>
 80041e2:	0018      	movs	r0, r3
 80041e4:	e7a7      	b.n	8004136 <_printf_i+0x13e>
 80041e6:	0022      	movs	r2, r4
 80041e8:	2301      	movs	r3, #1
 80041ea:	9906      	ldr	r1, [sp, #24]
 80041ec:	9805      	ldr	r0, [sp, #20]
 80041ee:	9e07      	ldr	r6, [sp, #28]
 80041f0:	3219      	adds	r2, #25
 80041f2:	47b0      	blx	r6
 80041f4:	3001      	adds	r0, #1
 80041f6:	d09c      	beq.n	8004132 <_printf_i+0x13a>
 80041f8:	3501      	adds	r5, #1
 80041fa:	68e3      	ldr	r3, [r4, #12]
 80041fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	42ab      	cmp	r3, r5
 8004202:	dcf0      	bgt.n	80041e6 <_printf_i+0x1ee>
 8004204:	e7e9      	b.n	80041da <_printf_i+0x1e2>
 8004206:	2500      	movs	r5, #0
 8004208:	e7f7      	b.n	80041fa <_printf_i+0x202>
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	08004897 	.word	0x08004897
 8004210:	080048a8 	.word	0x080048a8

08004214 <__sflush_r>:
 8004214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004216:	220c      	movs	r2, #12
 8004218:	5e8b      	ldrsh	r3, [r1, r2]
 800421a:	0005      	movs	r5, r0
 800421c:	000c      	movs	r4, r1
 800421e:	071a      	lsls	r2, r3, #28
 8004220:	d456      	bmi.n	80042d0 <__sflush_r+0xbc>
 8004222:	684a      	ldr	r2, [r1, #4]
 8004224:	2a00      	cmp	r2, #0
 8004226:	dc02      	bgt.n	800422e <__sflush_r+0x1a>
 8004228:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800422a:	2a00      	cmp	r2, #0
 800422c:	dd4e      	ble.n	80042cc <__sflush_r+0xb8>
 800422e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004230:	2f00      	cmp	r7, #0
 8004232:	d04b      	beq.n	80042cc <__sflush_r+0xb8>
 8004234:	2200      	movs	r2, #0
 8004236:	2080      	movs	r0, #128	@ 0x80
 8004238:	682e      	ldr	r6, [r5, #0]
 800423a:	602a      	str	r2, [r5, #0]
 800423c:	001a      	movs	r2, r3
 800423e:	0140      	lsls	r0, r0, #5
 8004240:	6a21      	ldr	r1, [r4, #32]
 8004242:	4002      	ands	r2, r0
 8004244:	4203      	tst	r3, r0
 8004246:	d033      	beq.n	80042b0 <__sflush_r+0x9c>
 8004248:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800424a:	89a3      	ldrh	r3, [r4, #12]
 800424c:	075b      	lsls	r3, r3, #29
 800424e:	d506      	bpl.n	800425e <__sflush_r+0x4a>
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	1ad2      	subs	r2, r2, r3
 8004254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <__sflush_r+0x4a>
 800425a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800425c:	1ad2      	subs	r2, r2, r3
 800425e:	2300      	movs	r3, #0
 8004260:	0028      	movs	r0, r5
 8004262:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004264:	6a21      	ldr	r1, [r4, #32]
 8004266:	47b8      	blx	r7
 8004268:	89a2      	ldrh	r2, [r4, #12]
 800426a:	1c43      	adds	r3, r0, #1
 800426c:	d106      	bne.n	800427c <__sflush_r+0x68>
 800426e:	6829      	ldr	r1, [r5, #0]
 8004270:	291d      	cmp	r1, #29
 8004272:	d846      	bhi.n	8004302 <__sflush_r+0xee>
 8004274:	4b29      	ldr	r3, [pc, #164]	@ (800431c <__sflush_r+0x108>)
 8004276:	410b      	asrs	r3, r1
 8004278:	07db      	lsls	r3, r3, #31
 800427a:	d442      	bmi.n	8004302 <__sflush_r+0xee>
 800427c:	2300      	movs	r3, #0
 800427e:	6063      	str	r3, [r4, #4]
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	04d2      	lsls	r2, r2, #19
 8004286:	d505      	bpl.n	8004294 <__sflush_r+0x80>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <__sflush_r+0x7e>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d100      	bne.n	8004294 <__sflush_r+0x80>
 8004292:	6560      	str	r0, [r4, #84]	@ 0x54
 8004294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004296:	602e      	str	r6, [r5, #0]
 8004298:	2900      	cmp	r1, #0
 800429a:	d017      	beq.n	80042cc <__sflush_r+0xb8>
 800429c:	0023      	movs	r3, r4
 800429e:	3344      	adds	r3, #68	@ 0x44
 80042a0:	4299      	cmp	r1, r3
 80042a2:	d002      	beq.n	80042aa <__sflush_r+0x96>
 80042a4:	0028      	movs	r0, r5
 80042a6:	f7ff fbed 	bl	8003a84 <_free_r>
 80042aa:	2300      	movs	r3, #0
 80042ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80042ae:	e00d      	b.n	80042cc <__sflush_r+0xb8>
 80042b0:	2301      	movs	r3, #1
 80042b2:	0028      	movs	r0, r5
 80042b4:	47b8      	blx	r7
 80042b6:	0002      	movs	r2, r0
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d1c6      	bne.n	800424a <__sflush_r+0x36>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0c3      	beq.n	800424a <__sflush_r+0x36>
 80042c2:	2b1d      	cmp	r3, #29
 80042c4:	d001      	beq.n	80042ca <__sflush_r+0xb6>
 80042c6:	2b16      	cmp	r3, #22
 80042c8:	d11a      	bne.n	8004300 <__sflush_r+0xec>
 80042ca:	602e      	str	r6, [r5, #0]
 80042cc:	2000      	movs	r0, #0
 80042ce:	e01e      	b.n	800430e <__sflush_r+0xfa>
 80042d0:	690e      	ldr	r6, [r1, #16]
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	d0fa      	beq.n	80042cc <__sflush_r+0xb8>
 80042d6:	680f      	ldr	r7, [r1, #0]
 80042d8:	600e      	str	r6, [r1, #0]
 80042da:	1bba      	subs	r2, r7, r6
 80042dc:	9201      	str	r2, [sp, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	d100      	bne.n	80042e6 <__sflush_r+0xd2>
 80042e4:	694a      	ldr	r2, [r1, #20]
 80042e6:	60a2      	str	r2, [r4, #8]
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	ddee      	ble.n	80042cc <__sflush_r+0xb8>
 80042ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042f0:	0032      	movs	r2, r6
 80042f2:	001f      	movs	r7, r3
 80042f4:	0028      	movs	r0, r5
 80042f6:	9b01      	ldr	r3, [sp, #4]
 80042f8:	6a21      	ldr	r1, [r4, #32]
 80042fa:	47b8      	blx	r7
 80042fc:	2800      	cmp	r0, #0
 80042fe:	dc07      	bgt.n	8004310 <__sflush_r+0xfc>
 8004300:	89a2      	ldrh	r2, [r4, #12]
 8004302:	2340      	movs	r3, #64	@ 0x40
 8004304:	2001      	movs	r0, #1
 8004306:	4313      	orrs	r3, r2
 8004308:	b21b      	sxth	r3, r3
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	4240      	negs	r0, r0
 800430e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004310:	9b01      	ldr	r3, [sp, #4]
 8004312:	1836      	adds	r6, r6, r0
 8004314:	1a1b      	subs	r3, r3, r0
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	e7e6      	b.n	80042e8 <__sflush_r+0xd4>
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	dfbffffe 	.word	0xdfbffffe

08004320 <_fflush_r>:
 8004320:	690b      	ldr	r3, [r1, #16]
 8004322:	b570      	push	{r4, r5, r6, lr}
 8004324:	0005      	movs	r5, r0
 8004326:	000c      	movs	r4, r1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <_fflush_r+0x12>
 800432c:	2500      	movs	r5, #0
 800432e:	0028      	movs	r0, r5
 8004330:	bd70      	pop	{r4, r5, r6, pc}
 8004332:	2800      	cmp	r0, #0
 8004334:	d004      	beq.n	8004340 <_fflush_r+0x20>
 8004336:	6a03      	ldr	r3, [r0, #32]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <_fflush_r+0x20>
 800433c:	f7ff f8ec 	bl	8003518 <__sinit>
 8004340:	220c      	movs	r2, #12
 8004342:	5ea3      	ldrsh	r3, [r4, r2]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f1      	beq.n	800432c <_fflush_r+0xc>
 8004348:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800434a:	07d2      	lsls	r2, r2, #31
 800434c:	d404      	bmi.n	8004358 <_fflush_r+0x38>
 800434e:	059b      	lsls	r3, r3, #22
 8004350:	d402      	bmi.n	8004358 <_fflush_r+0x38>
 8004352:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004354:	f7ff fb75 	bl	8003a42 <__retarget_lock_acquire_recursive>
 8004358:	0028      	movs	r0, r5
 800435a:	0021      	movs	r1, r4
 800435c:	f7ff ff5a 	bl	8004214 <__sflush_r>
 8004360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004362:	0005      	movs	r5, r0
 8004364:	07db      	lsls	r3, r3, #31
 8004366:	d4e2      	bmi.n	800432e <_fflush_r+0xe>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	059b      	lsls	r3, r3, #22
 800436c:	d4df      	bmi.n	800432e <_fflush_r+0xe>
 800436e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004370:	f7ff fb68 	bl	8003a44 <__retarget_lock_release_recursive>
 8004374:	e7db      	b.n	800432e <_fflush_r+0xe>
	...

08004378 <fiprintf>:
 8004378:	b40e      	push	{r1, r2, r3}
 800437a:	b517      	push	{r0, r1, r2, r4, lr}
 800437c:	4c05      	ldr	r4, [pc, #20]	@ (8004394 <fiprintf+0x1c>)
 800437e:	ab05      	add	r3, sp, #20
 8004380:	cb04      	ldmia	r3!, {r2}
 8004382:	0001      	movs	r1, r0
 8004384:	6820      	ldr	r0, [r4, #0]
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	f7ff fcaa 	bl	8003ce0 <_vfiprintf_r>
 800438c:	bc1e      	pop	{r1, r2, r3, r4}
 800438e:	bc08      	pop	{r3}
 8004390:	b003      	add	sp, #12
 8004392:	4718      	bx	r3
 8004394:	20000018 	.word	0x20000018

08004398 <__swhatbuf_r>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	000e      	movs	r6, r1
 800439c:	001d      	movs	r5, r3
 800439e:	230e      	movs	r3, #14
 80043a0:	5ec9      	ldrsh	r1, [r1, r3]
 80043a2:	0014      	movs	r4, r2
 80043a4:	b096      	sub	sp, #88	@ 0x58
 80043a6:	2900      	cmp	r1, #0
 80043a8:	da0c      	bge.n	80043c4 <__swhatbuf_r+0x2c>
 80043aa:	89b2      	ldrh	r2, [r6, #12]
 80043ac:	2380      	movs	r3, #128	@ 0x80
 80043ae:	0011      	movs	r1, r2
 80043b0:	4019      	ands	r1, r3
 80043b2:	421a      	tst	r2, r3
 80043b4:	d114      	bne.n	80043e0 <__swhatbuf_r+0x48>
 80043b6:	2380      	movs	r3, #128	@ 0x80
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	2000      	movs	r0, #0
 80043bc:	6029      	str	r1, [r5, #0]
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	b016      	add	sp, #88	@ 0x58
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	466a      	mov	r2, sp
 80043c6:	f000 f889 	bl	80044dc <_fstat_r>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	dbed      	blt.n	80043aa <__swhatbuf_r+0x12>
 80043ce:	23f0      	movs	r3, #240	@ 0xf0
 80043d0:	9901      	ldr	r1, [sp, #4]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	4019      	ands	r1, r3
 80043d6:	4b04      	ldr	r3, [pc, #16]	@ (80043e8 <__swhatbuf_r+0x50>)
 80043d8:	18c9      	adds	r1, r1, r3
 80043da:	424b      	negs	r3, r1
 80043dc:	4159      	adcs	r1, r3
 80043de:	e7ea      	b.n	80043b6 <__swhatbuf_r+0x1e>
 80043e0:	2100      	movs	r1, #0
 80043e2:	2340      	movs	r3, #64	@ 0x40
 80043e4:	e7e9      	b.n	80043ba <__swhatbuf_r+0x22>
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	ffffe000 	.word	0xffffe000

080043ec <__smakebuf_r>:
 80043ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ee:	2602      	movs	r6, #2
 80043f0:	898b      	ldrh	r3, [r1, #12]
 80043f2:	0005      	movs	r5, r0
 80043f4:	000c      	movs	r4, r1
 80043f6:	b085      	sub	sp, #20
 80043f8:	4233      	tst	r3, r6
 80043fa:	d007      	beq.n	800440c <__smakebuf_r+0x20>
 80043fc:	0023      	movs	r3, r4
 80043fe:	3347      	adds	r3, #71	@ 0x47
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	6123      	str	r3, [r4, #16]
 8004404:	2301      	movs	r3, #1
 8004406:	6163      	str	r3, [r4, #20]
 8004408:	b005      	add	sp, #20
 800440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440c:	ab03      	add	r3, sp, #12
 800440e:	aa02      	add	r2, sp, #8
 8004410:	f7ff ffc2 	bl	8004398 <__swhatbuf_r>
 8004414:	9f02      	ldr	r7, [sp, #8]
 8004416:	9001      	str	r0, [sp, #4]
 8004418:	0039      	movs	r1, r7
 800441a:	0028      	movs	r0, r5
 800441c:	f7ff fba8 	bl	8003b70 <_malloc_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	d108      	bne.n	8004436 <__smakebuf_r+0x4a>
 8004424:	220c      	movs	r2, #12
 8004426:	5ea3      	ldrsh	r3, [r4, r2]
 8004428:	059a      	lsls	r2, r3, #22
 800442a:	d4ed      	bmi.n	8004408 <__smakebuf_r+0x1c>
 800442c:	2203      	movs	r2, #3
 800442e:	4393      	bics	r3, r2
 8004430:	431e      	orrs	r6, r3
 8004432:	81a6      	strh	r6, [r4, #12]
 8004434:	e7e2      	b.n	80043fc <__smakebuf_r+0x10>
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	89a2      	ldrh	r2, [r4, #12]
 800443a:	6020      	str	r0, [r4, #0]
 800443c:	4313      	orrs	r3, r2
 800443e:	81a3      	strh	r3, [r4, #12]
 8004440:	9b03      	ldr	r3, [sp, #12]
 8004442:	6120      	str	r0, [r4, #16]
 8004444:	6167      	str	r7, [r4, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <__smakebuf_r+0x78>
 800444a:	0028      	movs	r0, r5
 800444c:	230e      	movs	r3, #14
 800444e:	5ee1      	ldrsh	r1, [r4, r3]
 8004450:	f000 f856 	bl	8004500 <_isatty_r>
 8004454:	2800      	cmp	r0, #0
 8004456:	d005      	beq.n	8004464 <__smakebuf_r+0x78>
 8004458:	2303      	movs	r3, #3
 800445a:	89a2      	ldrh	r2, [r4, #12]
 800445c:	439a      	bics	r2, r3
 800445e:	3b02      	subs	r3, #2
 8004460:	4313      	orrs	r3, r2
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	9a01      	ldr	r2, [sp, #4]
 8004468:	4313      	orrs	r3, r2
 800446a:	81a3      	strh	r3, [r4, #12]
 800446c:	e7cc      	b.n	8004408 <__smakebuf_r+0x1c>

0800446e <_putc_r>:
 800446e:	b570      	push	{r4, r5, r6, lr}
 8004470:	0006      	movs	r6, r0
 8004472:	000d      	movs	r5, r1
 8004474:	0014      	movs	r4, r2
 8004476:	2800      	cmp	r0, #0
 8004478:	d004      	beq.n	8004484 <_putc_r+0x16>
 800447a:	6a03      	ldr	r3, [r0, #32]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <_putc_r+0x16>
 8004480:	f7ff f84a 	bl	8003518 <__sinit>
 8004484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004486:	07db      	lsls	r3, r3, #31
 8004488:	d405      	bmi.n	8004496 <_putc_r+0x28>
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	059b      	lsls	r3, r3, #22
 800448e:	d402      	bmi.n	8004496 <_putc_r+0x28>
 8004490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004492:	f7ff fad6 	bl	8003a42 <__retarget_lock_acquire_recursive>
 8004496:	68a3      	ldr	r3, [r4, #8]
 8004498:	3b01      	subs	r3, #1
 800449a:	60a3      	str	r3, [r4, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	da05      	bge.n	80044ac <_putc_r+0x3e>
 80044a0:	69a2      	ldr	r2, [r4, #24]
 80044a2:	4293      	cmp	r3, r2
 80044a4:	db12      	blt.n	80044cc <_putc_r+0x5e>
 80044a6:	b2eb      	uxtb	r3, r5
 80044a8:	2b0a      	cmp	r3, #10
 80044aa:	d00f      	beq.n	80044cc <_putc_r+0x5e>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	6022      	str	r2, [r4, #0]
 80044b2:	701d      	strb	r5, [r3, #0]
 80044b4:	b2ed      	uxtb	r5, r5
 80044b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044b8:	07db      	lsls	r3, r3, #31
 80044ba:	d405      	bmi.n	80044c8 <_putc_r+0x5a>
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	059b      	lsls	r3, r3, #22
 80044c0:	d402      	bmi.n	80044c8 <_putc_r+0x5a>
 80044c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044c4:	f7ff fabe 	bl	8003a44 <__retarget_lock_release_recursive>
 80044c8:	0028      	movs	r0, r5
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	0029      	movs	r1, r5
 80044ce:	0022      	movs	r2, r4
 80044d0:	0030      	movs	r0, r6
 80044d2:	f7ff f91b 	bl	800370c <__swbuf_r>
 80044d6:	0005      	movs	r5, r0
 80044d8:	e7ed      	b.n	80044b6 <_putc_r+0x48>
	...

080044dc <_fstat_r>:
 80044dc:	2300      	movs	r3, #0
 80044de:	b570      	push	{r4, r5, r6, lr}
 80044e0:	4d06      	ldr	r5, [pc, #24]	@ (80044fc <_fstat_r+0x20>)
 80044e2:	0004      	movs	r4, r0
 80044e4:	0008      	movs	r0, r1
 80044e6:	0011      	movs	r1, r2
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	f7fc fb33 	bl	8000b54 <_fstat>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	d103      	bne.n	80044fa <_fstat_r+0x1e>
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d000      	beq.n	80044fa <_fstat_r+0x1e>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	20000430 	.word	0x20000430

08004500 <_isatty_r>:
 8004500:	2300      	movs	r3, #0
 8004502:	b570      	push	{r4, r5, r6, lr}
 8004504:	4d06      	ldr	r5, [pc, #24]	@ (8004520 <_isatty_r+0x20>)
 8004506:	0004      	movs	r4, r0
 8004508:	0008      	movs	r0, r1
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	f7fc fb30 	bl	8000b70 <_isatty>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d103      	bne.n	800451c <_isatty_r+0x1c>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d000      	beq.n	800451c <_isatty_r+0x1c>
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	bd70      	pop	{r4, r5, r6, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	20000430 	.word	0x20000430

08004524 <_sbrk_r>:
 8004524:	2300      	movs	r3, #0
 8004526:	b570      	push	{r4, r5, r6, lr}
 8004528:	4d06      	ldr	r5, [pc, #24]	@ (8004544 <_sbrk_r+0x20>)
 800452a:	0004      	movs	r4, r0
 800452c:	0008      	movs	r0, r1
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	f7fc fb32 	bl	8000b98 <_sbrk>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d103      	bne.n	8004540 <_sbrk_r+0x1c>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d000      	beq.n	8004540 <_sbrk_r+0x1c>
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	20000430 	.word	0x20000430

08004548 <memchr>:
 8004548:	b2c9      	uxtb	r1, r1
 800454a:	1882      	adds	r2, r0, r2
 800454c:	4290      	cmp	r0, r2
 800454e:	d101      	bne.n	8004554 <memchr+0xc>
 8004550:	2000      	movs	r0, #0
 8004552:	4770      	bx	lr
 8004554:	7803      	ldrb	r3, [r0, #0]
 8004556:	428b      	cmp	r3, r1
 8004558:	d0fb      	beq.n	8004552 <memchr+0xa>
 800455a:	3001      	adds	r0, #1
 800455c:	e7f6      	b.n	800454c <memchr+0x4>

0800455e <abort>:
 800455e:	2006      	movs	r0, #6
 8004560:	b510      	push	{r4, lr}
 8004562:	f000 f82d 	bl	80045c0 <raise>
 8004566:	2001      	movs	r0, #1
 8004568:	f7fc fac0 	bl	8000aec <_exit>

0800456c <_raise_r>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	0004      	movs	r4, r0
 8004570:	000d      	movs	r5, r1
 8004572:	291f      	cmp	r1, #31
 8004574:	d904      	bls.n	8004580 <_raise_r+0x14>
 8004576:	2316      	movs	r3, #22
 8004578:	6003      	str	r3, [r0, #0]
 800457a:	2001      	movs	r0, #1
 800457c:	4240      	negs	r0, r0
 800457e:	bd70      	pop	{r4, r5, r6, pc}
 8004580:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <_raise_r+0x24>
 8004586:	008a      	lsls	r2, r1, #2
 8004588:	189b      	adds	r3, r3, r2
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2a00      	cmp	r2, #0
 800458e:	d108      	bne.n	80045a2 <_raise_r+0x36>
 8004590:	0020      	movs	r0, r4
 8004592:	f000 f831 	bl	80045f8 <_getpid_r>
 8004596:	002a      	movs	r2, r5
 8004598:	0001      	movs	r1, r0
 800459a:	0020      	movs	r0, r4
 800459c:	f000 f81a 	bl	80045d4 <_kill_r>
 80045a0:	e7ed      	b.n	800457e <_raise_r+0x12>
 80045a2:	2a01      	cmp	r2, #1
 80045a4:	d009      	beq.n	80045ba <_raise_r+0x4e>
 80045a6:	1c51      	adds	r1, r2, #1
 80045a8:	d103      	bne.n	80045b2 <_raise_r+0x46>
 80045aa:	2316      	movs	r3, #22
 80045ac:	6003      	str	r3, [r0, #0]
 80045ae:	2001      	movs	r0, #1
 80045b0:	e7e5      	b.n	800457e <_raise_r+0x12>
 80045b2:	2100      	movs	r1, #0
 80045b4:	0028      	movs	r0, r5
 80045b6:	6019      	str	r1, [r3, #0]
 80045b8:	4790      	blx	r2
 80045ba:	2000      	movs	r0, #0
 80045bc:	e7df      	b.n	800457e <_raise_r+0x12>
	...

080045c0 <raise>:
 80045c0:	b510      	push	{r4, lr}
 80045c2:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <raise+0x10>)
 80045c4:	0001      	movs	r1, r0
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	f7ff ffd0 	bl	800456c <_raise_r>
 80045cc:	bd10      	pop	{r4, pc}
 80045ce:	46c0      	nop			@ (mov r8, r8)
 80045d0:	20000018 	.word	0x20000018

080045d4 <_kill_r>:
 80045d4:	2300      	movs	r3, #0
 80045d6:	b570      	push	{r4, r5, r6, lr}
 80045d8:	4d06      	ldr	r5, [pc, #24]	@ (80045f4 <_kill_r+0x20>)
 80045da:	0004      	movs	r4, r0
 80045dc:	0008      	movs	r0, r1
 80045de:	0011      	movs	r1, r2
 80045e0:	602b      	str	r3, [r5, #0]
 80045e2:	f7fc fa73 	bl	8000acc <_kill>
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	d103      	bne.n	80045f2 <_kill_r+0x1e>
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d000      	beq.n	80045f2 <_kill_r+0x1e>
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	20000430 	.word	0x20000430

080045f8 <_getpid_r>:
 80045f8:	b510      	push	{r4, lr}
 80045fa:	f7fc fa61 	bl	8000ac0 <_getpid>
 80045fe:	bd10      	pop	{r4, pc}

08004600 <_init>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr

0800460c <_fini>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr
