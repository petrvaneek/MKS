
cv07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006670  08006670  00007670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006780  08006780  0000807c  2**0
                  CONTENTS
  4 .ARM          00000000  08006780  08006780  0000807c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006780  08006780  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006780  08006780  00007780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006788  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  2000007c  08006804  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001308  08006804  00008308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a15f  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361c  00000000  00000000  00022203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00025820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130f  00000000  00000000  000270a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a14  00000000  00000000  000283af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1a0  00000000  00000000  0003bdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072df7  00000000  00000000  00056f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9d5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060dc  00000000  00000000  000c9da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000cfe7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006658 	.word	0x08006658

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08006658 	.word	0x08006658

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a06      	ldr	r2, [pc, #24]	@ (800025c <vApplicationGetIdleTaskMemory+0x28>)
 8000244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <vApplicationGetIdleTaskMemory+0x2c>)
 800024a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2280      	movs	r2, #128	@ 0x80
 8000250:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	20000098 	.word	0x20000098
 8000260:	20000138 	.word	0x20000138

08000264 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000264:	b5b0      	push	{r4, r5, r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	0008      	movs	r0, r1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	0019      	movs	r1, r3
 8000272:	230b      	movs	r3, #11
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	1c02      	adds	r2, r0, #0
 8000278:	701a      	strb	r2, [r3, #0]
 800027a:	2308      	movs	r3, #8
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	1c0a      	adds	r2, r1, #0
 8000280:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <lis2dw12_read_reg+0x2a>
  {
    return -1;
 8000288:	2301      	movs	r3, #1
 800028a:	425b      	negs	r3, r3
 800028c:	e00f      	b.n	80002ae <lis2dw12_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	685c      	ldr	r4, [r3, #4]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	68d8      	ldr	r0, [r3, #12]
 8000296:	2308      	movs	r3, #8
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	881d      	ldrh	r5, [r3, #0]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	230b      	movs	r3, #11
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	7819      	ldrb	r1, [r3, #0]
 80002a4:	002b      	movs	r3, r5
 80002a6:	47a0      	blx	r4
 80002a8:	0003      	movs	r3, r0
 80002aa:	617b      	str	r3, [r7, #20]

  return ret;
 80002ac:	697b      	ldr	r3, [r7, #20]
}
 80002ae:	0018      	movs	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b006      	add	sp, #24
 80002b4:	bdb0      	pop	{r4, r5, r7, pc}

080002b6 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80002b6:	b5b0      	push	{r4, r5, r7, lr}
 80002b8:	b086      	sub	sp, #24
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	0008      	movs	r0, r1
 80002c0:	607a      	str	r2, [r7, #4]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230b      	movs	r3, #11
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	1c02      	adds	r2, r0, #0
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	2308      	movs	r3, #8
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	1c0a      	adds	r2, r1, #0
 80002d2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d102      	bne.n	80002e0 <lis2dw12_write_reg+0x2a>
  {
    return -1;
 80002da:	2301      	movs	r3, #1
 80002dc:	425b      	negs	r3, r3
 80002de:	e00f      	b.n	8000300 <lis2dw12_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681c      	ldr	r4, [r3, #0]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	68d8      	ldr	r0, [r3, #12]
 80002e8:	2308      	movs	r3, #8
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	881d      	ldrh	r5, [r3, #0]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	230b      	movs	r3, #11
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	7819      	ldrb	r1, [r3, #0]
 80002f6:	002b      	movs	r3, r5
 80002f8:	47a0      	blx	r4
 80002fa:	0003      	movs	r3, r0
 80002fc:	617b      	str	r3, [r7, #20]

  return ret;
 80002fe:	697b      	ldr	r3, [r7, #20]
}
 8000300:	0018      	movs	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	b006      	add	sp, #24
 8000306:	bdb0      	pop	{r4, r5, r7, pc}

08000308 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(const stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b087      	sub	sp, #28
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	000a      	movs	r2, r1
 8000312:	1cfb      	adds	r3, r7, #3
 8000314:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000316:	2410      	movs	r4, #16
 8000318:	193a      	adds	r2, r7, r4
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	2301      	movs	r3, #1
 800031e:	2120      	movs	r1, #32
 8000320:	f7ff ffa0 	bl	8000264 <lis2dw12_read_reg>
 8000324:	0003      	movs	r3, r0
 8000326:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d129      	bne.n	8000382 <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800032e:	1cfb      	adds	r3, r7, #3
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	089b      	lsrs	r3, r3, #2
 8000334:	1c1a      	adds	r2, r3, #0
 8000336:	2303      	movs	r3, #3
 8000338:	4013      	ands	r3, r2
 800033a:	b2da      	uxtb	r2, r3
 800033c:	193b      	adds	r3, r7, r4
 800033e:	2103      	movs	r1, #3
 8000340:	400a      	ands	r2, r1
 8000342:	0090      	lsls	r0, r2, #2
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	210c      	movs	r1, #12
 8000348:	438a      	bics	r2, r1
 800034a:	1c11      	adds	r1, r2, #0
 800034c:	1c02      	adds	r2, r0, #0
 800034e:	430a      	orrs	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8000352:	1cfb      	adds	r3, r7, #3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2203      	movs	r2, #3
 8000358:	4013      	ands	r3, r2
 800035a:	b2da      	uxtb	r2, r3
 800035c:	193b      	adds	r3, r7, r4
 800035e:	2103      	movs	r1, #3
 8000360:	400a      	ands	r2, r1
 8000362:	0010      	movs	r0, r2
 8000364:	781a      	ldrb	r2, [r3, #0]
 8000366:	2103      	movs	r1, #3
 8000368:	438a      	bics	r2, r1
 800036a:	1c11      	adds	r1, r2, #0
 800036c:	1c02      	adds	r2, r0, #0
 800036e:	430a      	orrs	r2, r1
 8000370:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000372:	193a      	adds	r2, r7, r4
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	2120      	movs	r1, #32
 800037a:	f7ff ff9c 	bl	80002b6 <lis2dw12_write_reg>
 800037e:	0003      	movs	r3, r0
 8000380:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d108      	bne.n	800039a <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8000388:	230c      	movs	r3, #12
 800038a:	18fa      	adds	r2, r7, r3
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	2301      	movs	r3, #1
 8000390:	2125      	movs	r1, #37	@ 0x25
 8000392:	f7ff ff67 	bl	8000264 <lis2dw12_read_reg>
 8000396:	0003      	movs	r3, r0
 8000398:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d11a      	bne.n	80003d6 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80003a0:	1cfb      	adds	r3, r7, #3
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	091b      	lsrs	r3, r3, #4
 80003a6:	1c1a      	adds	r2, r3, #0
 80003a8:	2301      	movs	r3, #1
 80003aa:	4013      	ands	r3, r2
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	240c      	movs	r4, #12
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	2101      	movs	r1, #1
 80003b4:	400a      	ands	r2, r1
 80003b6:	0090      	lsls	r0, r2, #2
 80003b8:	781a      	ldrb	r2, [r3, #0]
 80003ba:	2104      	movs	r1, #4
 80003bc:	438a      	bics	r2, r1
 80003be:	1c11      	adds	r1, r2, #0
 80003c0:	1c02      	adds	r2, r0, #0
 80003c2:	430a      	orrs	r2, r1
 80003c4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80003c6:	193a      	adds	r2, r7, r4
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2125      	movs	r1, #37	@ 0x25
 80003ce:	f7ff ff72 	bl	80002b6 <lis2dw12_write_reg>
 80003d2:	0003      	movs	r3, r0
 80003d4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80003d6:	697b      	ldr	r3, [r7, #20]
}
 80003d8:	0018      	movs	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	b007      	add	sp, #28
 80003de:	bd90      	pop	{r4, r7, pc}

080003e0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(const stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b087      	sub	sp, #28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	000a      	movs	r2, r1
 80003ea:	1cfb      	adds	r3, r7, #3
 80003ec:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80003ee:	2410      	movs	r4, #16
 80003f0:	193a      	adds	r2, r7, r4
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	2301      	movs	r3, #1
 80003f6:	2120      	movs	r1, #32
 80003f8:	f7ff ff34 	bl	8000264 <lis2dw12_read_reg>
 80003fc:	0003      	movs	r3, r0
 80003fe:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d115      	bne.n	8000432 <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8000406:	1cfb      	adds	r3, r7, #3
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	220f      	movs	r2, #15
 800040c:	4013      	ands	r3, r2
 800040e:	b2da      	uxtb	r2, r3
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0110      	lsls	r0, r2, #4
 8000414:	781a      	ldrb	r2, [r3, #0]
 8000416:	210f      	movs	r1, #15
 8000418:	400a      	ands	r2, r1
 800041a:	1c11      	adds	r1, r2, #0
 800041c:	1c02      	adds	r2, r0, #0
 800041e:	430a      	orrs	r2, r1
 8000420:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000422:	193a      	adds	r2, r7, r4
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	2301      	movs	r3, #1
 8000428:	2120      	movs	r1, #32
 800042a:	f7ff ff44 	bl	80002b6 <lis2dw12_write_reg>
 800042e:	0003      	movs	r3, r0
 8000430:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d108      	bne.n	800044a <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000438:	230c      	movs	r3, #12
 800043a:	18fa      	adds	r2, r7, r3
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	2301      	movs	r3, #1
 8000440:	2122      	movs	r1, #34	@ 0x22
 8000442:	f7ff ff0f 	bl	8000264 <lis2dw12_read_reg>
 8000446:	0003      	movs	r3, r0
 8000448:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d11a      	bne.n	8000486 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8000450:	1cfb      	adds	r3, r7, #3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	091b      	lsrs	r3, r3, #4
 8000456:	1c1a      	adds	r2, r3, #0
 8000458:	2303      	movs	r3, #3
 800045a:	4013      	ands	r3, r2
 800045c:	b2da      	uxtb	r2, r3
 800045e:	240c      	movs	r4, #12
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2103      	movs	r1, #3
 8000464:	400a      	ands	r2, r1
 8000466:	0010      	movs	r0, r2
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	2103      	movs	r1, #3
 800046c:	438a      	bics	r2, r1
 800046e:	1c11      	adds	r1, r2, #0
 8000470:	1c02      	adds	r2, r0, #0
 8000472:	430a      	orrs	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000476:	193a      	adds	r2, r7, r4
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	2301      	movs	r3, #1
 800047c:	2122      	movs	r1, #34	@ 0x22
 800047e:	f7ff ff1a 	bl	80002b6 <lis2dw12_write_reg>
 8000482:	0003      	movs	r3, r0
 8000484:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000486:	697b      	ldr	r3, [r7, #20]
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b007      	add	sp, #28
 800048e:	bd90      	pop	{r4, r7, pc}

08000490 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	000a      	movs	r2, r1
 800049a:	1cfb      	adds	r3, r7, #3
 800049c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800049e:	2408      	movs	r4, #8
 80004a0:	193a      	adds	r2, r7, r4
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	2301      	movs	r3, #1
 80004a6:	2121      	movs	r1, #33	@ 0x21
 80004a8:	f7ff fedc 	bl	8000264 <lis2dw12_read_reg>
 80004ac:	0003      	movs	r3, r0
 80004ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d117      	bne.n	80004e6 <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 80004b6:	1cfb      	adds	r3, r7, #3
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2101      	movs	r1, #1
 80004c4:	400a      	ands	r2, r1
 80004c6:	00d0      	lsls	r0, r2, #3
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	2108      	movs	r1, #8
 80004cc:	438a      	bics	r2, r1
 80004ce:	1c11      	adds	r1, r2, #0
 80004d0:	1c02      	adds	r2, r0, #0
 80004d2:	430a      	orrs	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80004d6:	193a      	adds	r2, r7, r4
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	2121      	movs	r1, #33	@ 0x21
 80004de:	f7ff feea 	bl	80002b6 <lis2dw12_write_reg>
 80004e2:	0003      	movs	r3, r0
 80004e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b005      	add	sp, #20
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(const stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	000a      	movs	r2, r1
 80004fa:	1cfb      	adds	r3, r7, #3
 80004fc:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80004fe:	2408      	movs	r4, #8
 8000500:	193a      	adds	r2, r7, r4
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	2301      	movs	r3, #1
 8000506:	2125      	movs	r1, #37	@ 0x25
 8000508:	f7ff feac 	bl	8000264 <lis2dw12_read_reg>
 800050c:	0003      	movs	r3, r0
 800050e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d117      	bne.n	8000546 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8000516:	1cfb      	adds	r3, r7, #3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2203      	movs	r2, #3
 800051c:	4013      	ands	r3, r2
 800051e:	b2da      	uxtb	r2, r3
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2103      	movs	r1, #3
 8000524:	400a      	ands	r2, r1
 8000526:	0110      	lsls	r0, r2, #4
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	2130      	movs	r1, #48	@ 0x30
 800052c:	438a      	bics	r2, r1
 800052e:	1c11      	adds	r1, r2, #0
 8000530:	1c02      	adds	r2, r0, #0
 8000532:	430a      	orrs	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8000536:	193a      	adds	r2, r7, r4
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	2125      	movs	r1, #37	@ 0x25
 800053e:	f7ff feba 	bl	80002b6 <lis2dw12_write_reg>
 8000542:	0003      	movs	r3, r0
 8000544:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b005      	add	sp, #20
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800055a:	240c      	movs	r4, #12
 800055c:	193a      	adds	r2, r7, r4
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	2306      	movs	r3, #6
 8000562:	2128      	movs	r1, #40	@ 0x28
 8000564:	f7ff fe7e 	bl	8000264 <lis2dw12_read_reg>
 8000568:	0003      	movs	r3, r0
 800056a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	785b      	ldrb	r3, [r3, #1]
 8000572:	b21a      	sxth	r2, r3
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2200      	movs	r2, #0
 800057c:	5e9b      	ldrsh	r3, [r3, r2]
 800057e:	b29b      	uxth	r3, r3
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	b29b      	uxth	r3, r3
 8000584:	187a      	adds	r2, r7, r1
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	189b      	adds	r3, r3, r2
 800058a:	b29b      	uxth	r3, r3
 800058c:	b21a      	sxth	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000592:	187b      	adds	r3, r7, r1
 8000594:	78da      	ldrb	r2, [r3, #3]
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	3302      	adds	r3, #2
 800059a:	b212      	sxth	r2, r2
 800059c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	3302      	adds	r3, #2
 80005a2:	2200      	movs	r2, #0
 80005a4:	5e9b      	ldrsh	r3, [r3, r2]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	187a      	adds	r2, r7, r1
 80005ae:	7892      	ldrb	r2, [r2, #2]
 80005b0:	189b      	adds	r3, r3, r2
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	3302      	adds	r3, #2
 80005b8:	b212      	sxth	r2, r2
 80005ba:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	795a      	ldrb	r2, [r3, #5]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3304      	adds	r3, #4
 80005c4:	b212      	sxth	r2, r2
 80005c6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	3304      	adds	r3, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	5e9b      	ldrsh	r3, [r3, r2]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	187a      	adds	r2, r7, r1
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	189b      	adds	r3, r3, r2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	3304      	adds	r3, #4
 80005e2:	b212      	sxth	r2, r2
 80005e4:	801a      	strh	r2, [r3, #0]

  return ret;
 80005e6:	697b      	ldr	r3, [r7, #20]
}
 80005e8:	0018      	movs	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b007      	add	sp, #28
 80005ee:	bd90      	pop	{r4, r7, pc}

080005f0 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(const stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	000a      	movs	r2, r1
 80005fa:	1cfb      	adds	r3, r7, #3
 80005fc:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80005fe:	2408      	movs	r4, #8
 8000600:	193a      	adds	r2, r7, r4
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	2301      	movs	r3, #1
 8000606:	212e      	movs	r1, #46	@ 0x2e
 8000608:	f7ff fe2c 	bl	8000264 <lis2dw12_read_reg>
 800060c:	0003      	movs	r3, r0
 800060e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d115      	bne.n	8000642 <lis2dw12_fifo_mode_set+0x52>
  {
    reg.fmode = (uint8_t) val;
 8000616:	1cfb      	adds	r3, r7, #3
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2207      	movs	r2, #7
 800061c:	4013      	ands	r3, r2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	193b      	adds	r3, r7, r4
 8000622:	0150      	lsls	r0, r2, #5
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	211f      	movs	r1, #31
 8000628:	400a      	ands	r2, r1
 800062a:	1c11      	adds	r1, r2, #0
 800062c:	1c02      	adds	r2, r0, #0
 800062e:	430a      	orrs	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8000632:	193a      	adds	r2, r7, r4
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	2301      	movs	r3, #1
 8000638:	212e      	movs	r1, #46	@ 0x2e
 800063a:	f7ff fe3c 	bl	80002b6 <lis2dw12_write_reg>
 800063e:	0003      	movs	r3, r0
 8000640:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b005      	add	sp, #20
 800064a:	bd90      	pop	{r4, r7, pc}

0800064c <lis2dw12_fifo_data_level_get>:
  * @param  val      change the values of diff in reg FIFO_SAMPLES
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_data_level_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
  lis2dw12_fifo_samples_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_SAMPLES, (uint8_t *) &reg, 1);
 8000656:	2408      	movs	r4, #8
 8000658:	193a      	adds	r2, r7, r4
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	2301      	movs	r3, #1
 800065e:	212f      	movs	r1, #47	@ 0x2f
 8000660:	f7ff fe00 	bl	8000264 <lis2dw12_read_reg>
 8000664:	0003      	movs	r3, r0
 8000666:	60fb      	str	r3, [r7, #12]
  *val = reg.diff;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	069b      	lsls	r3, r3, #26
 800066e:	0e9b      	lsrs	r3, r3, #26
 8000670:	b2db      	uxtb	r3, r3
 8000672:	001a      	movs	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	701a      	strb	r2, [r3, #0]

  return ret;
 8000678:	68fb      	ldr	r3, [r7, #12]
}
 800067a:	0018      	movs	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	b005      	add	sp, #20
 8000680:	bd90      	pop	{r4, r7, pc}

08000682 <platform_write>:
.write_reg = platform_write,
.read_reg = platform_read,
.handle = &hi2c1,
};
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000682:	b5b0      	push	{r4, r5, r7, lr}
 8000684:	b088      	sub	sp, #32
 8000686:	af04      	add	r7, sp, #16
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	0008      	movs	r0, r1
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	0019      	movs	r1, r3
 8000690:	240b      	movs	r4, #11
 8000692:	193b      	adds	r3, r7, r4
 8000694:	1c02      	adds	r2, r0, #0
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	2508      	movs	r5, #8
 800069a:	197b      	adds	r3, r7, r5
 800069c:	1c0a      	adds	r2, r1, #0
 800069e:	801a      	strh	r2, [r3, #0]
HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	23fa      	movs	r3, #250	@ 0xfa
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	197b      	adds	r3, r7, r5
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	2133      	movs	r1, #51	@ 0x33
 80006bc:	f001 f802 	bl	80016c4 <HAL_I2C_Mem_Write>
return 0;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	0018      	movs	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b004      	add	sp, #16
 80006c8:	bdb0      	pop	{r4, r5, r7, pc}

080006ca <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80006ca:	b5b0      	push	{r4, r5, r7, lr}
 80006cc:	b088      	sub	sp, #32
 80006ce:	af04      	add	r7, sp, #16
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	0008      	movs	r0, r1
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	0019      	movs	r1, r3
 80006d8:	240b      	movs	r4, #11
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	1c02      	adds	r2, r0, #0
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	2508      	movs	r5, #8
 80006e2:	197b      	adds	r3, r7, r5
 80006e4:	1c0a      	adds	r2, r1, #0
 80006e6:	801a      	strh	r2, [r3, #0]
HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	23fa      	movs	r3, #250	@ 0xfa
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	9302      	str	r3, [sp, #8]
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	2133      	movs	r1, #51	@ 0x33
 8000704:	f001 f90c 	bl	8001920 <HAL_I2C_Mem_Read>
return 0;
 8000708:	2300      	movs	r3, #0
}
 800070a:	0018      	movs	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	b004      	add	sp, #16
 8000710:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000714 <_write>:

int _write(int file, char const *buf, int n)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b29a      	uxth	r2, r3
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	68b9      	ldr	r1, [r7, #8]
 800072a:	4804      	ldr	r0, [pc, #16]	@ (800073c <_write+0x28>)
 800072c:	f002 fdb0 	bl	8003290 <HAL_UART_Transmit>
	return n;
 8000730:	687b      	ldr	r3, [r7, #4]
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b004      	add	sp, #16
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	2000038c 	.word	0x2000038c

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b09a      	sub	sp, #104	@ 0x68
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fcab 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f85b 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f92b 	bl	80009a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000752:	f000 f8f9 	bl	8000948 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000756:	f000 f8b7 	bl	80008c8 <MX_I2C1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xVisualQueue */
  osMessageQDef(xVisualQueue, 16, int16_t);
 800075a:	2558      	movs	r5, #88	@ 0x58
 800075c:	197b      	adds	r3, r7, r5
 800075e:	4a21      	ldr	r2, [pc, #132]	@ (80007e4 <main+0xa4>)
 8000760:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000762:	c313      	stmia	r3!, {r0, r1, r4}
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	601a      	str	r2, [r3, #0]
  xVisualQueueHandle = osMessageCreate(osMessageQ(xVisualQueue), NULL);
 8000768:	197b      	adds	r3, r7, r5
 800076a:	2100      	movs	r1, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f003 fa21 	bl	8003bb4 <osMessageCreate>
 8000772:	0002      	movs	r2, r0
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <main+0xa8>)
 8000776:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000778:	253c      	movs	r5, #60	@ 0x3c
 800077a:	197b      	adds	r3, r7, r5
 800077c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <main+0xac>)
 800077e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000780:	c313      	stmia	r3!, {r0, r1, r4}
 8000782:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000784:	c313      	stmia	r3!, {r0, r1, r4}
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800078a:	197b      	adds	r3, r7, r5
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f003 f9af 	bl	8003af2 <osThreadCreate>
 8000794:	0002      	movs	r2, r0
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <main+0xb0>)
 8000798:	601a      	str	r2, [r3, #0]

  /* definition and creation of VisualTask */
  osThreadDef(VisualTask, StartVisualTask, osPriorityNormal, 0, 128);
 800079a:	2520      	movs	r5, #32
 800079c:	197b      	adds	r3, r7, r5
 800079e:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <main+0xb4>)
 80007a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a2:	c313      	stmia	r3!, {r0, r1, r4}
 80007a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a6:	c313      	stmia	r3!, {r0, r1, r4}
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	601a      	str	r2, [r3, #0]
  VisualTaskHandle = osThreadCreate(osThread(VisualTask), NULL);
 80007ac:	197b      	adds	r3, r7, r5
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f003 f99e 	bl	8003af2 <osThreadCreate>
 80007b6:	0002      	movs	r2, r0
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <main+0xb8>)
 80007ba:	601a      	str	r2, [r3, #0]

  /* definition and creation of AcceleroTask */
  osThreadDef(AcceleroTask, StartAcceleroTask, osPriorityNormal, 0, 128);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <main+0xbc>)
 80007c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c2:	c313      	stmia	r3!, {r0, r1, r4}
 80007c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c6:	c313      	stmia	r3!, {r0, r1, r4}
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	601a      	str	r2, [r3, #0]
  AcceleroTaskHandle = osThreadCreate(osThread(AcceleroTask), NULL);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 f98e 	bl	8003af2 <osThreadCreate>
 80007d6:	0002      	movs	r2, r0
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <main+0xc0>)
 80007da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007dc:	f003 f981 	bl	8003ae2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	e7fd      	b.n	80007e0 <main+0xa0>
 80007e4:	08006670 	.word	0x08006670
 80007e8:	20000420 	.word	0x20000420
 80007ec:	0800668c 	.word	0x0800668c
 80007f0:	20000414 	.word	0x20000414
 80007f4:	080066b4 	.word	0x080066b4
 80007f8:	20000418 	.word	0x20000418
 80007fc:	080066e0 	.word	0x080066e0
 8000800:	2000041c 	.word	0x2000041c

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b095      	sub	sp, #84	@ 0x54
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	2420      	movs	r4, #32
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	2330      	movs	r3, #48	@ 0x30
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f005 f875 	bl	8005904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081a:	2310      	movs	r3, #16
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	2310      	movs	r3, #16
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f005 f86d 	bl	8005904 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2310      	movs	r3, #16
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f005 f866 	bl	8005904 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	0021      	movs	r1, r4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2210      	movs	r2, #16
 800084a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2202      	movs	r2, #2
 8000850:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	22a0      	movs	r2, #160	@ 0xa0
 800085c:	0392      	lsls	r2, r2, #14
 800085e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	187b      	adds	r3, r7, r1
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fd21 	bl	80022b0 <HAL_RCC_OscConfig>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000872:	f000 fa01 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	2110      	movs	r1, #16
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2207      	movs	r2, #7
 800087c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2202      	movs	r2, #2
 8000882:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2101      	movs	r1, #1
 8000894:	0018      	movs	r0, r3
 8000896:	f002 f825 	bl	80028e4 <HAL_RCC_ClockConfig>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089e:	f000 f9eb 	bl	8000c78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008a2:	003b      	movs	r3, r7
 80008a4:	2220      	movs	r2, #32
 80008a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ae:	003b      	movs	r3, r7
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 f985 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008ba:	f000 f9dd 	bl	8000c78 <Error_Handler>
  }
}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b015      	add	sp, #84	@ 0x54
 80008c4:	bd90      	pop	{r4, r7, pc}
	...

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_I2C1_Init+0x74>)
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fe37 	bl	8001578 <HAL_I2C_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 f9b3 	bl	8000c78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_I2C1_Init+0x74>)
 8000914:	2100      	movs	r1, #0
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fc32 	bl	8002180 <HAL_I2CEx_ConfigAnalogFilter>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 f9aa 	bl	8000c78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <MX_I2C1_Init+0x74>)
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f001 fc75 	bl	8002218 <HAL_I2CEx_ConfigDigitalFilter>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 f9a1 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000338 	.word	0x20000338
 8000940:	40005400 	.word	0x40005400
 8000944:	00201d2b 	.word	0x00201d2b

08000948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	@ (80009a4 <MX_USART2_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 8000954:	2296      	movs	r2, #150	@ 0x96
 8000956:	0212      	lsls	r2, r2, #8
 8000958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <MX_USART2_UART_Init+0x58>)
 800098c:	0018      	movs	r0, r3
 800098e:	f002 fc2b 	bl	80031e8 <HAL_UART_Init>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f96f 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000038c 	.word	0x2000038c
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b08b      	sub	sp, #44	@ 0x2c
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	2414      	movs	r4, #20
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	0018      	movs	r0, r3
 80009b4:	2314      	movs	r3, #20
 80009b6:	001a      	movs	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f004 ffa3 	bl	8005904 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b40      	ldr	r3, [pc, #256]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0309      	lsls	r1, r1, #12
 80009c8:	430a      	orrs	r2, r1
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	031b      	lsls	r3, r3, #12
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	4b38      	ldr	r3, [pc, #224]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 80009e0:	2180      	movs	r1, #128	@ 0x80
 80009e2:	03c9      	lsls	r1, r1, #15
 80009e4:	430a      	orrs	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	4b35      	ldr	r3, [pc, #212]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	03db      	lsls	r3, r3, #15
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b32      	ldr	r3, [pc, #200]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	0289      	lsls	r1, r1, #10
 8000a00:	430a      	orrs	r2, r1
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 8000a06:	695a      	ldr	r2, [r3, #20]
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	029b      	lsls	r3, r3, #10
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 8000a18:	2180      	movs	r1, #128	@ 0x80
 8000a1a:	02c9      	lsls	r1, r1, #11
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <MX_GPIO_Init+0x118>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	@ 0x80
 8000a26:	02db      	lsls	r3, r3, #11
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a2e:	2390      	movs	r3, #144	@ 0x90
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	2200      	movs	r2, #0
 8000a34:	2130      	movs	r1, #48	@ 0x30
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fd80 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <MX_GPIO_Init+0x11c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fd7a 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	0192      	lsls	r2, r2, #6
 8000a4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2284      	movs	r2, #132	@ 0x84
 8000a54:	0392      	lsls	r2, r2, #14
 8000a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <MX_GPIO_Init+0x120>)
 8000a62:	0019      	movs	r1, r3
 8000a64:	0010      	movs	r0, r2
 8000a66:	f000 fbf9 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2230      	movs	r2, #48	@ 0x30
 8000a6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	193a      	adds	r2, r7, r4
 8000a84:	2390      	movs	r3, #144	@ 0x90
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fbe6 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000a90:	0021      	movs	r1, r4
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <MX_GPIO_Init+0x11c>)
 8000aae:	0019      	movs	r1, r3
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	f000 fbd3 	bl	800125c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b00b      	add	sp, #44	@ 0x2c
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	48000800 	.word	0x48000800

08000acc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f003 f859 	bl	8003b8c <osDelay>
 8000ada:	e7fb      	b.n	8000ad4 <StartDefaultTask+0x8>

08000adc <StartVisualTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVisualTask */
void StartVisualTask(void const * argument)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVisualTask */
  /* Infinite loop */
  for(;;)
  {
	  	int16_t msg;
		if (xQueueReceive(xVisualQueueHandle, &msg, portMAX_DELAY)) {
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <StartVisualTask+0x90>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4252      	negs	r2, r2
 8000aec:	240e      	movs	r4, #14
 8000aee:	1939      	adds	r1, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	f003 faf6 	bl	80040e2 <xQueueReceive>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d0f4      	beq.n	8000ae4 <StartVisualTask+0x8>
			if (msg< -1000)
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	5e9b      	ldrsh	r3, [r3, r2]
 8000b00:	4a1b      	ldr	r2, [pc, #108]	@ (8000b70 <StartVisualTask+0x94>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	da0d      	bge.n	8000b22 <StartVisualTask+0x46>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8000b06:	2390      	movs	r3, #144	@ 0x90
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fd14 	bl	800153c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <StartVisualTask+0x98>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	2101      	movs	r1, #1
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fd0e 	bl	800153c <HAL_GPIO_WritePin>
 8000b20:	e7e0      	b.n	8000ae4 <StartVisualTask+0x8>
			}
			else if(msg>1000)
 8000b22:	230e      	movs	r3, #14
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	2200      	movs	r2, #0
 8000b28:	5e9a      	ldrsh	r2, [r3, r2]
 8000b2a:	23fa      	movs	r3, #250	@ 0xfa
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dd0d      	ble.n	8000b4e <StartVisualTask+0x72>
			{
				HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <StartVisualTask+0x98>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	2101      	movs	r1, #1
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fcff 	bl	800153c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000b3e:	2390      	movs	r3, #144	@ 0x90
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	2200      	movs	r2, #0
 8000b44:	2110      	movs	r1, #16
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fcf8 	bl	800153c <HAL_GPIO_WritePin>
 8000b4c:	e7ca      	b.n	8000ae4 <StartVisualTask+0x8>
			}
			else
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000b4e:	2390      	movs	r3, #144	@ 0x90
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	2200      	movs	r2, #0
 8000b54:	2110      	movs	r1, #16
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fcf0 	bl	800153c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <StartVisualTask+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2101      	movs	r1, #1
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fcea 	bl	800153c <HAL_GPIO_WritePin>
  {
 8000b68:	e7bc      	b.n	8000ae4 <StartVisualTask+0x8>
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	20000420 	.word	0x20000420
 8000b70:	fffffc18 	.word	0xfffffc18
 8000b74:	48000400 	.word	0x48000400

08000b78 <StartAcceleroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcceleroTask */
	lis2dw12_full_scale_set(&lis2dw12, LIS2DW12_2g);
 8000b80:	4b30      	ldr	r3, [pc, #192]	@ (8000c44 <StartAcceleroTask+0xcc>)
 8000b82:	2100      	movs	r1, #0
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff fcb3 	bl	80004f0 <lis2dw12_full_scale_set>
	lis2dw12_power_mode_set(&lis2dw12, LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2);
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c44 <StartAcceleroTask+0xcc>)
 8000b8c:	2111      	movs	r1, #17
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff fbba 	bl	8000308 <lis2dw12_power_mode_set>
	lis2dw12_block_data_update_set(&lis2dw12, PROPERTY_ENABLE);
 8000b94:	4b2b      	ldr	r3, [pc, #172]	@ (8000c44 <StartAcceleroTask+0xcc>)
 8000b96:	2101      	movs	r1, #1
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fc79 	bl	8000490 <lis2dw12_block_data_update_set>
	lis2dw12_fifo_mode_set(&lis2dw12, LIS2DW12_STREAM_MODE); // enable continuous FIFO
 8000b9e:	4b29      	ldr	r3, [pc, #164]	@ (8000c44 <StartAcceleroTask+0xcc>)
 8000ba0:	2106      	movs	r1, #6
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fd24 	bl	80005f0 <lis2dw12_fifo_mode_set>
	lis2dw12_data_rate_set(&lis2dw12, LIS2DW12_XL_ODR_25Hz); // enable part from power-down
 8000ba8:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <StartAcceleroTask+0xcc>)
 8000baa:	2103      	movs	r1, #3
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fc17 	bl	80003e0 <lis2dw12_data_rate_set>
	/*uint8_t whoamI = 0;
	lis2dw12_device_id_get(&lis2dw12, &whoamI);
	printf("LIS2DW12_ID %s\n", (whoamI == LIS2DW12_ID) ? "OK" : "FAIL");*/
	uint8_t samples;
	int16_t raw_acceleration[3];
	vTaskDelay(50);
 8000bb2:	2032      	movs	r0, #50	@ 0x32
 8000bb4:	f003 fdf2 	bl	800479c <vTaskDelay>
	lis2dw12_fifo_data_level_get(&lis2dw12, &samples);
 8000bb8:	230e      	movs	r3, #14
 8000bba:	18fa      	adds	r2, r7, r3
 8000bbc:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <StartAcceleroTask+0xcc>)
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff fd43 	bl	800064c <lis2dw12_fifo_data_level_get>
	for (uint8_t i = 0; i < samples; i++) {
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e027      	b.n	8000c20 <StartAcceleroTask+0xa8>
		// Read acceleration data
		lis2dw12_acceleration_raw_get(&lis2dw12, raw_acceleration);
 8000bd0:	2408      	movs	r4, #8
 8000bd2:	193a      	adds	r2, r7, r4
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <StartAcceleroTask+0xcc>)
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fcb9 	bl	8000550 <lis2dw12_acceleration_raw_get>
		static uint8_t cnt;
		if (++cnt > 20)
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <StartAcceleroTask+0xd0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <StartAcceleroTask+0xd0>)
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <StartAcceleroTask+0xd0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b14      	cmp	r3, #20
 8000bf0:	d910      	bls.n	8000c14 <StartAcceleroTask+0x9c>
		{
			printf("X=%d Y=%d Z=%d\n", raw_acceleration[0], raw_acceleration[1], raw_acceleration[2]);
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	5e9b      	ldrsh	r3, [r3, r2]
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	5e9b      	ldrsh	r3, [r3, r2]
 8000c00:	001a      	movs	r2, r3
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	2004      	movs	r0, #4
 8000c06:	5e1b      	ldrsh	r3, [r3, r0]
 8000c08:	4810      	ldr	r0, [pc, #64]	@ (8000c4c <StartAcceleroTask+0xd4>)
 8000c0a:	f004 fe1f 	bl	800584c <iprintf>
			cnt = 0;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <StartAcceleroTask+0xd0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < samples; i++) {
 8000c14:	210f      	movs	r1, #15
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	3201      	adds	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	230e      	movs	r3, #14
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	220f      	movs	r2, #15
 8000c28:	18ba      	adds	r2, r7, r2
 8000c2a:	7812      	ldrb	r2, [r2, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3cf      	bcc.n	8000bd0 <StartAcceleroTask+0x58>
		}


	//printf("X=%d Y=%d Z=%d\n", raw_acceleration[0], raw_acceleration[1], raw_acceleration[2]);
	}
	xQueueSend(xVisualQueueHandle, &raw_acceleration[0], 0);
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <StartAcceleroTask+0xd8>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	2308      	movs	r3, #8
 8000c36:	18f9      	adds	r1, r7, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f003 f989 	bl	8003f52 <xQueueGenericSend>
  {
 8000c40:	e7b7      	b.n	8000bb2 <StartAcceleroTask+0x3a>
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000424 	.word	0x20000424
 8000c4c:	080066fc 	.word	0x080066fc
 8000c50:	20000420 	.word	0x20000420

08000c54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d101      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c66:	f000 fa2f 	bl	80010c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	40002000 	.word	0x40002000

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	430a      	orrs	r2, r1
 8000c94:	619a      	str	r2, [r3, #24]
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000ca4:	69da      	ldr	r2, [r3, #28]
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	0549      	lsls	r1, r1, #21
 8000cac:	430a      	orrs	r2, r1
 8000cae:	61da      	str	r2, [r3, #28]
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000cb2:	69da      	ldr	r2, [r3, #28]
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	055b      	lsls	r3, r3, #21
 8000cb8:	4013      	ands	r3, r2
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	425b      	negs	r3, r3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 faa2 	bl	8001210 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	46c0      	nop			@ (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b08b      	sub	sp, #44	@ 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	2414      	movs	r4, #20
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2314      	movs	r3, #20
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f004 fe0a 	bl	8005904 <memset>
  if(hi2c->Instance==I2C1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <HAL_I2C_MspInit+0x90>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d132      	bne.n	8000d60 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <HAL_I2C_MspInit+0x94>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <HAL_I2C_MspInit+0x94>)
 8000d00:	2180      	movs	r1, #128	@ 0x80
 8000d02:	02c9      	lsls	r1, r1, #11
 8000d04:	430a      	orrs	r2, r1
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_I2C_MspInit+0x94>)
 8000d0a:	695a      	ldr	r2, [r3, #20]
 8000d0c:	2380      	movs	r3, #128	@ 0x80
 8000d0e:	02db      	lsls	r3, r3, #11
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	22c0      	movs	r2, #192	@ 0xc0
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	0021      	movs	r1, r4
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2212      	movs	r2, #18
 8000d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2201      	movs	r2, #1
 8000d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <HAL_I2C_MspInit+0x98>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f000 fa8c 	bl	800125c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_I2C_MspInit+0x94>)
 8000d46:	69da      	ldr	r2, [r3, #28]
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_I2C_MspInit+0x94>)
 8000d4a:	2180      	movs	r1, #128	@ 0x80
 8000d4c:	0389      	lsls	r1, r1, #14
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	61da      	str	r2, [r3, #28]
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_I2C_MspInit+0x94>)
 8000d54:	69da      	ldr	r2, [r3, #28]
 8000d56:	2380      	movs	r3, #128	@ 0x80
 8000d58:	039b      	lsls	r3, r3, #14
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b00b      	add	sp, #44	@ 0x2c
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48000400 	.word	0x48000400

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b08b      	sub	sp, #44	@ 0x2c
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	2414      	movs	r4, #20
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2314      	movs	r3, #20
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f004 fdbc 	bl	8005904 <memset>
  if(huart->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <HAL_UART_MspInit+0x90>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d132      	bne.n	8000dfc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_UART_MspInit+0x94>)
 8000d98:	69da      	ldr	r2, [r3, #28]
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <HAL_UART_MspInit+0x94>)
 8000d9c:	2180      	movs	r1, #128	@ 0x80
 8000d9e:	0289      	lsls	r1, r1, #10
 8000da0:	430a      	orrs	r2, r1
 8000da2:	61da      	str	r2, [r3, #28]
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_UART_MspInit+0x94>)
 8000da6:	69da      	ldr	r2, [r3, #28]
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	029b      	lsls	r3, r3, #10
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_UART_MspInit+0x94>)
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_UART_MspInit+0x94>)
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	0289      	lsls	r1, r1, #10
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_UART_MspInit+0x94>)
 8000dc2:	695a      	ldr	r2, [r3, #20]
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	029b      	lsls	r3, r3, #10
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2202      	movs	r2, #2
 8000dda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2201      	movs	r2, #1
 8000dec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	187a      	adds	r2, r7, r1
 8000df0:	2390      	movs	r3, #144	@ 0x90
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fa30 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b00b      	add	sp, #44	@ 0x2c
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b08c      	sub	sp, #48	@ 0x30
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000e1c:	4b38      	ldr	r3, [pc, #224]	@ (8000f00 <HAL_InitTick+0xf4>)
 8000e1e:	69da      	ldr	r2, [r3, #28]
 8000e20:	4b37      	ldr	r3, [pc, #220]	@ (8000f00 <HAL_InitTick+0xf4>)
 8000e22:	2180      	movs	r1, #128	@ 0x80
 8000e24:	0049      	lsls	r1, r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	61da      	str	r2, [r3, #28]
 8000e2a:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <HAL_InitTick+0xf4>)
 8000e2c:	69da      	ldr	r2, [r3, #28]
 8000e2e:	2380      	movs	r3, #128	@ 0x80
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4013      	ands	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e38:	230c      	movs	r3, #12
 8000e3a:	18fa      	adds	r2, r7, r3
 8000e3c:	2410      	movs	r4, #16
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	0011      	movs	r1, r2
 8000e42:	0018      	movs	r0, r3
 8000e44:	f001 fe92 	bl	8002b6c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d104      	bne.n	8000e5e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e54:	f001 fe74 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e5c:	e004      	b.n	8000e68 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e5e:	f001 fe6f 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8000e62:	0003      	movs	r3, r0
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e6a:	4926      	ldr	r1, [pc, #152]	@ (8000f04 <HAL_InitTick+0xf8>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff f955 	bl	800011c <__udivsi3>
 8000e72:	0003      	movs	r3, r0
 8000e74:	3b01      	subs	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000e78:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <HAL_InitTick+0xfc>)
 8000e7a:	4a24      	ldr	r2, [pc, #144]	@ (8000f0c <HAL_InitTick+0x100>)
 8000e7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	@ (8000f08 <HAL_InitTick+0xfc>)
 8000e80:	4a23      	ldr	r2, [pc, #140]	@ (8000f10 <HAL_InitTick+0x104>)
 8000e82:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000e84:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <HAL_InitTick+0xfc>)
 8000e86:	6a3a      	ldr	r2, [r7, #32]
 8000e88:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f08 <HAL_InitTick+0xfc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <HAL_InitTick+0xfc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <HAL_InitTick+0xfc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000e9c:	252b      	movs	r5, #43	@ 0x2b
 8000e9e:	197c      	adds	r4, r7, r5
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_InitTick+0xfc>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 ff5a 	bl	8002d5c <HAL_TIM_Base_Init>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000eac:	197b      	adds	r3, r7, r5
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d11e      	bne.n	8000ef2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000eb4:	197c      	adds	r4, r7, r5
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_InitTick+0xfc>)
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 ffa7 	bl	8002e0c <HAL_TIM_Base_Start_IT>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000ec2:	197b      	adds	r3, r7, r5
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d113      	bne.n	8000ef2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000eca:	2013      	movs	r0, #19
 8000ecc:	f000 f9b5 	bl	800123a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d809      	bhi.n	8000eea <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority, 0U);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	0019      	movs	r1, r3
 8000edc:	2013      	movs	r0, #19
 8000ede:	f000 f997 	bl	8001210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <HAL_InitTick+0x108>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e003      	b.n	8000ef2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000eea:	232b      	movs	r3, #43	@ 0x2b
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000ef2:	232b      	movs	r3, #43	@ 0x2b
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	781b      	ldrb	r3, [r3, #0]
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b00c      	add	sp, #48	@ 0x30
 8000efe:	bdb0      	pop	{r4, r5, r7, pc}
 8000f00:	40021000 	.word	0x40021000
 8000f04:	000f4240 	.word	0x000f4240
 8000f08:	20000428 	.word	0x20000428
 8000f0c:	40002000 	.word	0x40002000
 8000f10:	000003e7 	.word	0x000003e7
 8000f14:	20000014 	.word	0x20000014

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	e7fd      	b.n	8000f1c <NMI_Handler+0x4>

08000f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	e7fd      	b.n	8000f24 <HardFault_Handler+0x4>

08000f28 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <TIM14_IRQHandler+0x14>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 ffb8 	bl	8002ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	20000428 	.word	0x20000428

08000f40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	e00a      	b.n	8000f68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f52:	e000      	b.n	8000f56 <_read+0x16>
 8000f54:	bf00      	nop
 8000f56:	0001      	movs	r1, r0
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf0      	blt.n	8000f52 <_read+0x12>
  }

  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b006      	add	sp, #24
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	425b      	negs	r3, r3
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2280      	movs	r2, #128	@ 0x80
 8000f9c:	0192      	lsls	r2, r2, #6
 8000f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_isatty>:

int _isatty(int file)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	18d3      	adds	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f004 fd34 	bl	8005a70 <__errno>
 8001008:	0003      	movs	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	2301      	movs	r3, #1
 8001010:	425b      	negs	r3, r3
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	18d2      	adds	r2, r2, r3
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <_sbrk+0x64>)
 8001024:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b006      	add	sp, #24
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20002000 	.word	0x20002000
 8001034:	00000400 	.word	0x00000400
 8001038:	20000470 	.word	0x20000470
 800103c:	20001308 	.word	0x20001308

08001040 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800104c:	480d      	ldr	r0, [pc, #52]	@ (8001084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001050:	f7ff fff6 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <LoopForever+0x6>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	@ (800108c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <LoopForever+0xe>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <LoopForever+0x12>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	@ (8001098 <LoopForever+0x16>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800107a:	f004 fcff 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107e:	f7ff fb5f 	bl	8000740 <main>

08001082 <LoopForever>:

LoopForever:
    b LoopForever
 8001082:	e7fe      	b.n	8001082 <LoopForever>
  ldr   r0, =_estack
 8001084:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001090:	08006788 	.word	0x08006788
  ldr r2, =_sbss
 8001094:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001098:	20001308 	.word	0x20001308

0800109c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC1_IRQHandler>
	...

080010a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <HAL_Init+0x24>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_Init+0x24>)
 80010aa:	2110      	movs	r1, #16
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f7ff feab 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b6:	f7ff fde5 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <HAL_IncTick+0x1c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	001a      	movs	r2, r3
 80010d2:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <HAL_IncTick+0x20>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	18d2      	adds	r2, r2, r3
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <HAL_IncTick+0x20>)
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	20000018 	.word	0x20000018
 80010e8:	20000474 	.word	0x20000474

080010ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b02      	ldr	r3, [pc, #8]	@ (80010fc <HAL_GetTick+0x10>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	20000474 	.word	0x20000474

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	0002      	movs	r2, r0
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b7f      	cmp	r3, #127	@ 0x7f
 8001112:	d809      	bhi.n	8001128 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	001a      	movs	r2, r3
 800111a:	231f      	movs	r3, #31
 800111c:	401a      	ands	r2, r3
 800111e:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <__NVIC_EnableIRQ+0x30>)
 8001120:	2101      	movs	r1, #1
 8001122:	4091      	lsls	r1, r2
 8001124:	000a      	movs	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
  }
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	0002      	movs	r2, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b7f      	cmp	r3, #127	@ 0x7f
 8001148:	d828      	bhi.n	800119c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114a:	4a2f      	ldr	r2, [pc, #188]	@ (8001208 <__NVIC_SetPriority+0xd4>)
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b25b      	sxtb	r3, r3
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	33c0      	adds	r3, #192	@ 0xc0
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	589b      	ldr	r3, [r3, r2]
 800115a:	1dfa      	adds	r2, r7, #7
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	0011      	movs	r1, r2
 8001160:	2203      	movs	r2, #3
 8001162:	400a      	ands	r2, r1
 8001164:	00d2      	lsls	r2, r2, #3
 8001166:	21ff      	movs	r1, #255	@ 0xff
 8001168:	4091      	lsls	r1, r2
 800116a:	000a      	movs	r2, r1
 800116c:	43d2      	mvns	r2, r2
 800116e:	401a      	ands	r2, r3
 8001170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	019b      	lsls	r3, r3, #6
 8001176:	22ff      	movs	r2, #255	@ 0xff
 8001178:	401a      	ands	r2, r3
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	0018      	movs	r0, r3
 8001180:	2303      	movs	r3, #3
 8001182:	4003      	ands	r3, r0
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001188:	481f      	ldr	r0, [pc, #124]	@ (8001208 <__NVIC_SetPriority+0xd4>)
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	430a      	orrs	r2, r1
 8001194:	33c0      	adds	r3, #192	@ 0xc0
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800119a:	e031      	b.n	8001200 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119c:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <__NVIC_SetPriority+0xd8>)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0019      	movs	r1, r3
 80011a4:	230f      	movs	r3, #15
 80011a6:	400b      	ands	r3, r1
 80011a8:	3b08      	subs	r3, #8
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3306      	adds	r3, #6
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	18d3      	adds	r3, r2, r3
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	1dfa      	adds	r2, r7, #7
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	0011      	movs	r1, r2
 80011bc:	2203      	movs	r2, #3
 80011be:	400a      	ands	r2, r1
 80011c0:	00d2      	lsls	r2, r2, #3
 80011c2:	21ff      	movs	r1, #255	@ 0xff
 80011c4:	4091      	lsls	r1, r2
 80011c6:	000a      	movs	r2, r1
 80011c8:	43d2      	mvns	r2, r2
 80011ca:	401a      	ands	r2, r3
 80011cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	22ff      	movs	r2, #255	@ 0xff
 80011d4:	401a      	ands	r2, r3
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0018      	movs	r0, r3
 80011dc:	2303      	movs	r3, #3
 80011de:	4003      	ands	r3, r0
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e4:	4809      	ldr	r0, [pc, #36]	@ (800120c <__NVIC_SetPriority+0xd8>)
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	001c      	movs	r4, r3
 80011ec:	230f      	movs	r3, #15
 80011ee:	4023      	ands	r3, r4
 80011f0:	3b08      	subs	r3, #8
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	430a      	orrs	r2, r1
 80011f6:	3306      	adds	r3, #6
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	18c3      	adds	r3, r0, r3
 80011fc:	3304      	adds	r3, #4
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b003      	add	sp, #12
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	210f      	movs	r1, #15
 800121c:	187b      	adds	r3, r7, r1
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	187b      	adds	r3, r7, r1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b25b      	sxtb	r3, r3
 800122a:	0011      	movs	r1, r2
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff ff81 	bl	8001134 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b004      	add	sp, #16
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	0002      	movs	r2, r0
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b25b      	sxtb	r3, r3
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff ff57 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	e14f      	b.n	800150c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4091      	lsls	r1, r2
 8001276:	000a      	movs	r2, r1
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d100      	bne.n	8001284 <HAL_GPIO_Init+0x28>
 8001282:	e140      	b.n	8001506 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4013      	ands	r3, r2
 800128c:	2b01      	cmp	r3, #1
 800128e:	d005      	beq.n	800129c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001298:	2b02      	cmp	r3, #2
 800129a:	d130      	bne.n	80012fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	409a      	lsls	r2, r3
 80012aa:	0013      	movs	r3, r2
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	409a      	lsls	r2, r3
 80012be:	0013      	movs	r3, r2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d2:	2201      	movs	r2, #1
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	2201      	movs	r2, #1
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2203      	movs	r2, #3
 8001304:	4013      	ands	r3, r2
 8001306:	2b03      	cmp	r3, #3
 8001308:	d017      	beq.n	800133a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	43da      	mvns	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	4013      	ands	r3, r2
 8001342:	2b02      	cmp	r3, #2
 8001344:	d123      	bne.n	800138e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	58d3      	ldr	r3, [r2, r3]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2207      	movs	r2, #7
 8001358:	4013      	ands	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691a      	ldr	r2, [r3, #16]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2107      	movs	r1, #7
 8001372:	400b      	ands	r3, r1
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	6939      	ldr	r1, [r7, #16]
 800138c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2203      	movs	r2, #3
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	43da      	mvns	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	401a      	ands	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	23c0      	movs	r3, #192	@ 0xc0
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	d100      	bne.n	80013d0 <HAL_GPIO_Init+0x174>
 80013ce:	e09a      	b.n	8001506 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d0:	4b54      	ldr	r3, [pc, #336]	@ (8001524 <HAL_GPIO_Init+0x2c8>)
 80013d2:	699a      	ldr	r2, [r3, #24]
 80013d4:	4b53      	ldr	r3, [pc, #332]	@ (8001524 <HAL_GPIO_Init+0x2c8>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	430a      	orrs	r2, r1
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	4b51      	ldr	r3, [pc, #324]	@ (8001524 <HAL_GPIO_Init+0x2c8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001528 <HAL_GPIO_Init+0x2cc>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	589b      	ldr	r3, [r3, r2]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2203      	movs	r2, #3
 80013fa:	4013      	ands	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	409a      	lsls	r2, r3
 8001402:	0013      	movs	r3, r2
 8001404:	43da      	mvns	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	2390      	movs	r3, #144	@ 0x90
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	429a      	cmp	r2, r3
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x1e2>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a44      	ldr	r2, [pc, #272]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x1de>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a43      	ldr	r2, [pc, #268]	@ (8001530 <HAL_GPIO_Init+0x2d4>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x1da>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a42      	ldr	r2, [pc, #264]	@ (8001534 <HAL_GPIO_Init+0x2d8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x1d6>
 800142e:	2303      	movs	r3, #3
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x1e4>
 8001432:	2305      	movs	r3, #5
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x1e4>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x1e4>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x1e4>
 800143e:	2300      	movs	r3, #0
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	2103      	movs	r1, #3
 8001444:	400a      	ands	r2, r1
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	@ (8001528 <HAL_GPIO_Init+0x2cc>)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <HAL_GPIO_Init+0x2dc>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	035b      	lsls	r3, r3, #13
 8001476:	4013      	ands	r3, r2
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <HAL_GPIO_Init+0x2dc>)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <HAL_GPIO_Init+0x2dc>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43da      	mvns	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	039b      	lsls	r3, r3, #14
 80014a0:	4013      	ands	r3, r2
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014ac:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <HAL_GPIO_Init+0x2dc>)
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <HAL_GPIO_Init+0x2dc>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	4013      	ands	r3, r2
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <HAL_GPIO_Init+0x2dc>)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <HAL_GPIO_Init+0x2dc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	4013      	ands	r3, r2
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001500:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_GPIO_Init+0x2dc>)
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	40da      	lsrs	r2, r3
 8001514:	1e13      	subs	r3, r2, #0
 8001516:	d000      	beq.n	800151a <HAL_GPIO_Init+0x2be>
 8001518:	e6a8      	b.n	800126c <HAL_GPIO_Init+0x10>
  } 
}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b006      	add	sp, #24
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	40010000 	.word	0x40010000
 800152c:	48000400 	.word	0x48000400
 8001530:	48000800 	.word	0x48000800
 8001534:	48000c00 	.word	0x48000c00
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	0008      	movs	r0, r1
 8001546:	0011      	movs	r1, r2
 8001548:	1cbb      	adds	r3, r7, #2
 800154a:	1c02      	adds	r2, r0, #0
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	1c7b      	adds	r3, r7, #1
 8001550:	1c0a      	adds	r2, r1, #0
 8001552:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001554:	1c7b      	adds	r3, r7, #1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800155c:	1cbb      	adds	r3, r7, #2
 800155e:	881a      	ldrh	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001566:	1cbb      	adds	r3, r7, #2
 8001568:	881a      	ldrh	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e08f      	b.n	80016aa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2241      	movs	r2, #65	@ 0x41
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2240      	movs	r2, #64	@ 0x40
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff fb99 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2241      	movs	r2, #65	@ 0x41
 80015aa:	2124      	movs	r1, #36	@ 0x24
 80015ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	438a      	bics	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	493b      	ldr	r1, [pc, #236]	@ (80016b4 <HAL_I2C_Init+0x13c>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4938      	ldr	r1, [pc, #224]	@ (80016b8 <HAL_I2C_Init+0x140>)
 80015d8:	400a      	ands	r2, r1
 80015da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2180      	movs	r1, #128	@ 0x80
 80015ee:	0209      	lsls	r1, r1, #8
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	e007      	b.n	8001606 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2184      	movs	r1, #132	@ 0x84
 8001600:	0209      	lsls	r1, r1, #8
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d109      	bne.n	8001622 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2180      	movs	r1, #128	@ 0x80
 800161a:	0109      	lsls	r1, r1, #4
 800161c:	430a      	orrs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	e007      	b.n	8001632 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4923      	ldr	r1, [pc, #140]	@ (80016bc <HAL_I2C_Init+0x144>)
 800162e:	400a      	ands	r2, r1
 8001630:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4920      	ldr	r1, [pc, #128]	@ (80016c0 <HAL_I2C_Init+0x148>)
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	491a      	ldr	r1, [pc, #104]	@ (80016b8 <HAL_I2C_Init+0x140>)
 800164e:	400a      	ands	r2, r1
 8001650:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	431a      	orrs	r2, r3
 800165c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69d9      	ldr	r1, [r3, #28]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2241      	movs	r2, #65	@ 0x41
 8001696:	2120      	movs	r1, #32
 8001698:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2242      	movs	r2, #66	@ 0x42
 80016a4:	2100      	movs	r1, #0
 80016a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	f0ffffff 	.word	0xf0ffffff
 80016b8:	ffff7fff 	.word	0xffff7fff
 80016bc:	fffff7ff 	.word	0xfffff7ff
 80016c0:	02008000 	.word	0x02008000

080016c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	000c      	movs	r4, r1
 80016ce:	0010      	movs	r0, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	230a      	movs	r3, #10
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	1c22      	adds	r2, r4, #0
 80016d8:	801a      	strh	r2, [r3, #0]
 80016da:	2308      	movs	r3, #8
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	1c02      	adds	r2, r0, #0
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	1dbb      	adds	r3, r7, #6
 80016e4:	1c0a      	adds	r2, r1, #0
 80016e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2241      	movs	r2, #65	@ 0x41
 80016ec:	5c9b      	ldrb	r3, [r3, r2]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d000      	beq.n	80016f6 <HAL_I2C_Mem_Write+0x32>
 80016f4:	e10c      	b.n	8001910 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_I2C_Mem_Write+0x42>
 80016fc:	232c      	movs	r3, #44	@ 0x2c
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2280      	movs	r2, #128	@ 0x80
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0ff      	b.n	8001912 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2240      	movs	r2, #64	@ 0x40
 8001716:	5c9b      	ldrb	r3, [r3, r2]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_I2C_Mem_Write+0x5c>
 800171c:	2302      	movs	r3, #2
 800171e:	e0f8      	b.n	8001912 <HAL_I2C_Mem_Write+0x24e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2240      	movs	r2, #64	@ 0x40
 8001724:	2101      	movs	r1, #1
 8001726:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001728:	f7ff fce0 	bl	80010ec <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	0219      	lsls	r1, r3, #8
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2319      	movs	r3, #25
 800173c:	2201      	movs	r2, #1
 800173e:	f000 fb0b 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0e3      	b.n	8001912 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2241      	movs	r2, #65	@ 0x41
 800174e:	2121      	movs	r1, #33	@ 0x21
 8001750:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2242      	movs	r2, #66	@ 0x42
 8001756:	2140      	movs	r1, #64	@ 0x40
 8001758:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	222c      	movs	r2, #44	@ 0x2c
 800176a:	18ba      	adds	r2, r7, r2
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001776:	1dbb      	adds	r3, r7, #6
 8001778:	881c      	ldrh	r4, [r3, #0]
 800177a:	2308      	movs	r3, #8
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	881a      	ldrh	r2, [r3, #0]
 8001780:	230a      	movs	r3, #10
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	8819      	ldrh	r1, [r3, #0]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	0023      	movs	r3, r4
 8001792:	f000 f9f9 	bl	8001b88 <I2C_RequestMemoryWrite>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d005      	beq.n	80017a6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2240      	movs	r2, #64	@ 0x40
 800179e:	2100      	movs	r1, #0
 80017a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0b5      	b.n	8001912 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2bff      	cmp	r3, #255	@ 0xff
 80017ae:	d911      	bls.n	80017d4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	22ff      	movs	r2, #255	@ 0xff
 80017b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	2380      	movs	r3, #128	@ 0x80
 80017be:	045c      	lsls	r4, r3, #17
 80017c0:	230a      	movs	r3, #10
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	8819      	ldrh	r1, [r3, #0]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	2300      	movs	r3, #0
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	0023      	movs	r3, r4
 80017ce:	f000 fc9d 	bl	800210c <I2C_TransferConfig>
 80017d2:	e012      	b.n	80017fa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	049c      	lsls	r4, r3, #18
 80017e8:	230a      	movs	r3, #10
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	8819      	ldrh	r1, [r3, #0]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	0023      	movs	r3, r4
 80017f6:	f000 fc89 	bl	800210c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	0018      	movs	r0, r3
 8001802:	f000 fb01 	bl	8001e08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e081      	b.n	8001912 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03a      	beq.n	80018be <HAL_I2C_Mem_Write+0x1fa>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d136      	bne.n	80018be <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	0013      	movs	r3, r2
 800185a:	2200      	movs	r2, #0
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	f000 fa7b 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001862:	1e03      	subs	r3, r0, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e053      	b.n	8001912 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	2bff      	cmp	r3, #255	@ 0xff
 8001872:	d911      	bls.n	8001898 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	22ff      	movs	r2, #255	@ 0xff
 8001878:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187e:	b2da      	uxtb	r2, r3
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	045c      	lsls	r4, r3, #17
 8001884:	230a      	movs	r3, #10
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	8819      	ldrh	r1, [r3, #0]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	2300      	movs	r3, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	0023      	movs	r3, r4
 8001892:	f000 fc3b 	bl	800210c <I2C_TransferConfig>
 8001896:	e012      	b.n	80018be <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	049c      	lsls	r4, r3, #18
 80018ac:	230a      	movs	r3, #10
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	8819      	ldrh	r1, [r3, #0]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	2300      	movs	r3, #0
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	0023      	movs	r3, r4
 80018ba:	f000 fc27 	bl	800210c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d198      	bne.n	80017fa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 fae0 	bl	8001e94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018d4:	1e03      	subs	r3, r0, #0
 80018d6:	d001      	beq.n	80018dc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e01a      	b.n	8001912 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2220      	movs	r2, #32
 80018e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	490b      	ldr	r1, [pc, #44]	@ (800191c <HAL_I2C_Mem_Write+0x258>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2241      	movs	r2, #65	@ 0x41
 80018f8:	2120      	movs	r1, #32
 80018fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2242      	movs	r2, #66	@ 0x42
 8001900:	2100      	movs	r1, #0
 8001902:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2240      	movs	r2, #64	@ 0x40
 8001908:	2100      	movs	r1, #0
 800190a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e000      	b.n	8001912 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
  }
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b007      	add	sp, #28
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	fe00e800 	.word	0xfe00e800

08001920 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af02      	add	r7, sp, #8
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	000c      	movs	r4, r1
 800192a:	0010      	movs	r0, r2
 800192c:	0019      	movs	r1, r3
 800192e:	230a      	movs	r3, #10
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	1c22      	adds	r2, r4, #0
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	2308      	movs	r3, #8
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	1c02      	adds	r2, r0, #0
 800193c:	801a      	strh	r2, [r3, #0]
 800193e:	1dbb      	adds	r3, r7, #6
 8001940:	1c0a      	adds	r2, r1, #0
 8001942:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2241      	movs	r2, #65	@ 0x41
 8001948:	5c9b      	ldrb	r3, [r3, r2]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b20      	cmp	r3, #32
 800194e:	d000      	beq.n	8001952 <HAL_I2C_Mem_Read+0x32>
 8001950:	e110      	b.n	8001b74 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <HAL_I2C_Mem_Read+0x42>
 8001958:	232c      	movs	r3, #44	@ 0x2c
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e103      	b.n	8001b76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2240      	movs	r2, #64	@ 0x40
 8001972:	5c9b      	ldrb	r3, [r3, r2]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_I2C_Mem_Read+0x5c>
 8001978:	2302      	movs	r3, #2
 800197a:	e0fc      	b.n	8001b76 <HAL_I2C_Mem_Read+0x256>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2240      	movs	r2, #64	@ 0x40
 8001980:	2101      	movs	r1, #1
 8001982:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001984:	f7ff fbb2 	bl	80010ec <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	0219      	lsls	r1, r3, #8
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2319      	movs	r3, #25
 8001998:	2201      	movs	r2, #1
 800199a:	f000 f9dd 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0e7      	b.n	8001b76 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2241      	movs	r2, #65	@ 0x41
 80019aa:	2122      	movs	r1, #34	@ 0x22
 80019ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2242      	movs	r2, #66	@ 0x42
 80019b2:	2140      	movs	r1, #64	@ 0x40
 80019b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	222c      	movs	r2, #44	@ 0x2c
 80019c6:	18ba      	adds	r2, r7, r2
 80019c8:	8812      	ldrh	r2, [r2, #0]
 80019ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019d2:	1dbb      	adds	r3, r7, #6
 80019d4:	881c      	ldrh	r4, [r3, #0]
 80019d6:	2308      	movs	r3, #8
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	881a      	ldrh	r2, [r3, #0]
 80019dc:	230a      	movs	r3, #10
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	8819      	ldrh	r1, [r3, #0]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	0023      	movs	r3, r4
 80019ee:	f000 f92f 	bl	8001c50 <I2C_RequestMemoryRead>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2240      	movs	r2, #64	@ 0x40
 80019fa:	2100      	movs	r1, #0
 80019fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0b9      	b.n	8001b76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2bff      	cmp	r3, #255	@ 0xff
 8001a0a:	d911      	bls.n	8001a30 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	045c      	lsls	r4, r3, #17
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	8819      	ldrh	r1, [r3, #0]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	4b56      	ldr	r3, [pc, #344]	@ (8001b80 <HAL_I2C_Mem_Read+0x260>)
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	0023      	movs	r3, r4
 8001a2a:	f000 fb6f 	bl	800210c <I2C_TransferConfig>
 8001a2e:	e012      	b.n	8001a56 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	049c      	lsls	r4, r3, #18
 8001a44:	230a      	movs	r3, #10
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	8819      	ldrh	r1, [r3, #0]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <HAL_I2C_Mem_Read+0x260>)
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	0023      	movs	r3, r4
 8001a52:	f000 fb5b 	bl	800210c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	0013      	movs	r3, r2
 8001a60:	2200      	movs	r2, #0
 8001a62:	2104      	movs	r1, #4
 8001a64:	f000 f978 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e082      	b.n	8001b76 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d03a      	beq.n	8001b22 <HAL_I2C_Mem_Read+0x202>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d136      	bne.n	8001b22 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	0013      	movs	r3, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2180      	movs	r1, #128	@ 0x80
 8001ac2:	f000 f949 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e053      	b.n	8001b76 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2bff      	cmp	r3, #255	@ 0xff
 8001ad6:	d911      	bls.n	8001afc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	045c      	lsls	r4, r3, #17
 8001ae8:	230a      	movs	r3, #10
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	8819      	ldrh	r1, [r3, #0]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	0023      	movs	r3, r4
 8001af6:	f000 fb09 	bl	800210c <I2C_TransferConfig>
 8001afa:	e012      	b.n	8001b22 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	049c      	lsls	r4, r3, #18
 8001b10:	230a      	movs	r3, #10
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	8819      	ldrh	r1, [r3, #0]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	0023      	movs	r3, r4
 8001b1e:	f000 faf5 	bl	800210c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d194      	bne.n	8001a56 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 f9ae 	bl	8001e94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b38:	1e03      	subs	r3, r0, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e01a      	b.n	8001b76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2220      	movs	r2, #32
 8001b46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	490c      	ldr	r1, [pc, #48]	@ (8001b84 <HAL_I2C_Mem_Read+0x264>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2241      	movs	r2, #65	@ 0x41
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2242      	movs	r2, #66	@ 0x42
 8001b64:	2100      	movs	r1, #0
 8001b66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2240      	movs	r2, #64	@ 0x40
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e000      	b.n	8001b76 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001b74:	2302      	movs	r3, #2
  }
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b007      	add	sp, #28
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	80002400 	.word	0x80002400
 8001b84:	fe00e800 	.word	0xfe00e800

08001b88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	000c      	movs	r4, r1
 8001b92:	0010      	movs	r0, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	250a      	movs	r5, #10
 8001b98:	197b      	adds	r3, r7, r5
 8001b9a:	1c22      	adds	r2, r4, #0
 8001b9c:	801a      	strh	r2, [r3, #0]
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	1c02      	adds	r2, r0, #0
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	1c0a      	adds	r2, r1, #0
 8001baa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bac:	1dbb      	adds	r3, r7, #6
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	045c      	lsls	r4, r3, #17
 8001bb6:	197b      	adds	r3, r7, r5
 8001bb8:	8819      	ldrh	r1, [r3, #0]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	4b23      	ldr	r3, [pc, #140]	@ (8001c4c <I2C_RequestMemoryWrite+0xc4>)
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	0023      	movs	r3, r4
 8001bc2:	f000 faa3 	bl	800210c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 f91b 	bl	8001e08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e033      	b.n	8001c42 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bda:	1dbb      	adds	r3, r7, #6
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001be2:	2308      	movs	r3, #8
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bf0:	e019      	b.n	8001c26 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c06:	6a39      	ldr	r1, [r7, #32]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 f8fc 	bl	8001e08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c10:	1e03      	subs	r3, r0, #0
 8001c12:	d001      	beq.n	8001c18 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e014      	b.n	8001c42 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c18:	2308      	movs	r3, #8
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c26:	6a3a      	ldr	r2, [r7, #32]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	0013      	movs	r3, r2
 8001c30:	2200      	movs	r2, #0
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	f000 f890 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001c38:	1e03      	subs	r3, r0, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	80002000 	.word	0x80002000

08001c50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	000c      	movs	r4, r1
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	250a      	movs	r5, #10
 8001c60:	197b      	adds	r3, r7, r5
 8001c62:	1c22      	adds	r2, r4, #0
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	2308      	movs	r3, #8
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	1c02      	adds	r2, r0, #0
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	1c0a      	adds	r2, r1, #0
 8001c72:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c74:	1dbb      	adds	r3, r7, #6
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	197b      	adds	r3, r7, r5
 8001c7c:	8819      	ldrh	r1, [r3, #0]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <I2C_RequestMemoryRead+0xc0>)
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	f000 fa41 	bl	800210c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c8c:	6a39      	ldr	r1, [r7, #32]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 f8b9 	bl	8001e08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c96:	1e03      	subs	r3, r0, #0
 8001c98:	d001      	beq.n	8001c9e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e033      	b.n	8001d06 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c9e:	1dbb      	adds	r3, r7, #6
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cb4:	e019      	b.n	8001cea <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cca:	6a39      	ldr	r1, [r7, #32]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 f89a 	bl	8001e08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cd4:	1e03      	subs	r3, r0, #0
 8001cd6:	d001      	beq.n	8001cdc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e014      	b.n	8001d06 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cdc:	2308      	movs	r3, #8
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cea:	6a3a      	ldr	r2, [r7, #32]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	0013      	movs	r3, r2
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2140      	movs	r1, #64	@ 0x40
 8001cf8:	f000 f82e 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d001      	beq.n	8001d04 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b004      	add	sp, #16
 8001d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	80002000 	.word	0x80002000

08001d14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d103      	bne.n	8001d32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d007      	beq.n	8001d50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	619a      	str	r2, [r3, #24]
  }
}
 8001d50:	46c0      	nop			@ (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d68:	e03a      	b.n	8001de0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 f8d3 	bl	8001f1c <I2C_IsErrorOccurred>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e040      	b.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	d02d      	beq.n	8001de0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d84:	f7ff f9b2 	bl	80010ec <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d302      	bcc.n	8001d9a <I2C_WaitOnFlagUntilTimeout+0x42>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d122      	bne.n	8001de0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4013      	ands	r3, r2
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	425a      	negs	r2, r3
 8001daa:	4153      	adcs	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	001a      	movs	r2, r3
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d113      	bne.n	8001de0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2241      	movs	r2, #65	@ 0x41
 8001dc8:	2120      	movs	r1, #32
 8001dca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2242      	movs	r2, #66	@ 0x42
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2240      	movs	r2, #64	@ 0x40
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e00f      	b.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4013      	ands	r3, r2
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	425a      	negs	r2, r3
 8001df0:	4153      	adcs	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	001a      	movs	r2, r3
 8001df6:	1dfb      	adds	r3, r7, #7
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d0b5      	beq.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b004      	add	sp, #16
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e14:	e032      	b.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 f87d 	bl	8001f1c <I2C_IsErrorOccurred>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e030      	b.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	d025      	beq.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e30:	f7ff f95c 	bl	80010ec <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d302      	bcc.n	8001e46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11a      	bne.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d013      	beq.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	2220      	movs	r2, #32
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2241      	movs	r2, #65	@ 0x41
 8001e64:	2120      	movs	r1, #32
 8001e66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2242      	movs	r2, #66	@ 0x42
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2240      	movs	r2, #64	@ 0x40
 8001e74:	2100      	movs	r1, #0
 8001e76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e007      	b.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2202      	movs	r2, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d1c5      	bne.n	8001e16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b004      	add	sp, #16
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ea0:	e02f      	b.n	8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f000 f837 	bl	8001f1c <I2C_IsErrorOccurred>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e02d      	b.n	8001f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb6:	f7ff f919 	bl	80010ec <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d302      	bcc.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11a      	bne.n	8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d013      	beq.n	8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	2220      	movs	r2, #32
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2241      	movs	r2, #65	@ 0x41
 8001eea:	2120      	movs	r1, #32
 8001eec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2242      	movs	r2, #66	@ 0x42
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2240      	movs	r2, #64	@ 0x40
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e007      	b.n	8001f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d1c8      	bne.n	8001ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	@ 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f28:	2327      	movs	r3, #39	@ 0x27
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2210      	movs	r2, #16
 8001f44:	4013      	ands	r3, r2
 8001f46:	d100      	bne.n	8001f4a <I2C_IsErrorOccurred+0x2e>
 8001f48:	e079      	b.n	800203e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2210      	movs	r2, #16
 8001f50:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f52:	e057      	b.n	8002004 <I2C_IsErrorOccurred+0xe8>
 8001f54:	2227      	movs	r2, #39	@ 0x27
 8001f56:	18bb      	adds	r3, r7, r2
 8001f58:	18ba      	adds	r2, r7, r2
 8001f5a:	7812      	ldrb	r2, [r2, #0]
 8001f5c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	d04f      	beq.n	8002004 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f64:	f7ff f8c2 	bl	80010ec <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d302      	bcc.n	8001f7a <I2C_IsErrorOccurred+0x5e>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d144      	bne.n	8002004 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	01db      	lsls	r3, r3, #7
 8001f84:	4013      	ands	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f88:	2013      	movs	r0, #19
 8001f8a:	183b      	adds	r3, r7, r0
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	2142      	movs	r1, #66	@ 0x42
 8001f90:	5c52      	ldrb	r2, [r2, r1]
 8001f92:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d126      	bne.n	8001ff6 <I2C_IsErrorOccurred+0xda>
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	01db      	lsls	r3, r3, #7
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d021      	beq.n	8001ff6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d01d      	beq.n	8001ff6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2180      	movs	r1, #128	@ 0x80
 8001fc6:	01c9      	lsls	r1, r1, #7
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001fcc:	f7ff f88e 	bl	80010ec <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fd4:	e00f      	b.n	8001ff6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fd6:	f7ff f889 	bl	80010ec <HAL_GetTick>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b19      	cmp	r3, #25
 8001fe2:	d908      	bls.n	8001ff6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fec:	2327      	movs	r3, #39	@ 0x27
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]

              break;
 8001ff4:	e006      	b.n	8002004 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b20      	cmp	r3, #32
 8002002:	d1e8      	bne.n	8001fd6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2220      	movs	r2, #32
 800200c:	4013      	ands	r3, r2
 800200e:	2b20      	cmp	r3, #32
 8002010:	d004      	beq.n	800201c <I2C_IsErrorOccurred+0x100>
 8002012:	2327      	movs	r3, #39	@ 0x27
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d09b      	beq.n	8001f54 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800201c:	2327      	movs	r3, #39	@ 0x27
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2220      	movs	r2, #32
 800202c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	2204      	movs	r2, #4
 8002032:	4313      	orrs	r3, r2
 8002034:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002036:	2327      	movs	r3, #39	@ 0x27
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4013      	ands	r3, r2
 800204e:	d00c      	beq.n	800206a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	2201      	movs	r2, #1
 8002054:	4313      	orrs	r3, r2
 8002056:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	0052      	lsls	r2, r2, #1
 8002060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002062:	2327      	movs	r3, #39	@ 0x27
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4013      	ands	r3, r2
 8002072:	d00c      	beq.n	800208e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	2208      	movs	r2, #8
 8002078:	4313      	orrs	r3, r2
 800207a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	00d2      	lsls	r2, r2, #3
 8002084:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002086:	2327      	movs	r3, #39	@ 0x27
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4013      	ands	r3, r2
 8002096:	d00c      	beq.n	80020b2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2202      	movs	r2, #2
 800209c:	4313      	orrs	r3, r2
 800209e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020aa:	2327      	movs	r3, #39	@ 0x27
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80020b2:	2327      	movs	r3, #39	@ 0x27
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01d      	beq.n	80020f8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	0018      	movs	r0, r3
 80020c0:	f7ff fe28 	bl	8001d14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	490e      	ldr	r1, [pc, #56]	@ (8002108 <I2C_IsErrorOccurred+0x1ec>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2241      	movs	r2, #65	@ 0x41
 80020e4:	2120      	movs	r1, #32
 80020e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2242      	movs	r2, #66	@ 0x42
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	@ 0x40
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80020f8:	2327      	movs	r3, #39	@ 0x27
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b00a      	add	sp, #40	@ 0x28
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	fe00e800 	.word	0xfe00e800

0800210c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	0008      	movs	r0, r1
 8002116:	0011      	movs	r1, r2
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	240a      	movs	r4, #10
 800211c:	193b      	adds	r3, r7, r4
 800211e:	1c02      	adds	r2, r0, #0
 8002120:	801a      	strh	r2, [r3, #0]
 8002122:	2009      	movs	r0, #9
 8002124:	183b      	adds	r3, r7, r0
 8002126:	1c0a      	adds	r2, r1, #0
 8002128:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800212a:	193b      	adds	r3, r7, r4
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	059b      	lsls	r3, r3, #22
 8002130:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002132:	183b      	adds	r3, r7, r0
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	0419      	lsls	r1, r3, #16
 8002138:	23ff      	movs	r3, #255	@ 0xff
 800213a:	041b      	lsls	r3, r3, #16
 800213c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800213e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002146:	4313      	orrs	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002156:	0d51      	lsrs	r1, r2, #21
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	00d2      	lsls	r2, r2, #3
 800215c:	400a      	ands	r2, r1
 800215e:	4907      	ldr	r1, [pc, #28]	@ (800217c <I2C_TransferConfig+0x70>)
 8002160:	430a      	orrs	r2, r1
 8002162:	43d2      	mvns	r2, r2
 8002164:	401a      	ands	r2, r3
 8002166:	0011      	movs	r1, r2
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b007      	add	sp, #28
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	03ff63ff 	.word	0x03ff63ff

08002180 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2241      	movs	r2, #65	@ 0x41
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b20      	cmp	r3, #32
 8002194:	d138      	bne.n	8002208 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2240      	movs	r2, #64	@ 0x40
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e032      	b.n	800220a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2240      	movs	r2, #64	@ 0x40
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2241      	movs	r2, #65	@ 0x41
 80021b0:	2124      	movs	r1, #36	@ 0x24
 80021b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2101      	movs	r1, #1
 80021c0:	438a      	bics	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4911      	ldr	r1, [pc, #68]	@ (8002214 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2241      	movs	r2, #65	@ 0x41
 80021f8:	2120      	movs	r1, #32
 80021fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2240      	movs	r2, #64	@ 0x40
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	ffffefff 	.word	0xffffefff

08002218 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2241      	movs	r2, #65	@ 0x41
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	d139      	bne.n	80022a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2240      	movs	r2, #64	@ 0x40
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002238:	2302      	movs	r3, #2
 800223a:	e033      	b.n	80022a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	@ 0x40
 8002240:	2101      	movs	r1, #1
 8002242:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2241      	movs	r2, #65	@ 0x41
 8002248:	2124      	movs	r1, #36	@ 0x24
 800224a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2101      	movs	r1, #1
 8002258:	438a      	bics	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a11      	ldr	r2, [pc, #68]	@ (80022ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2241      	movs	r2, #65	@ 0x41
 8002292:	2120      	movs	r1, #32
 8002294:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2240      	movs	r2, #64	@ 0x40
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
  }
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b004      	add	sp, #16
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	fffff0ff 	.word	0xfffff0ff

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e301      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d100      	bne.n	80022ce <HAL_RCC_OscConfig+0x1e>
 80022cc:	e08d      	b.n	80023ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ce:	4bc3      	ldr	r3, [pc, #780]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	220c      	movs	r2, #12
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d00e      	beq.n	80022f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022da:	4bc0      	ldr	r3, [pc, #768]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	220c      	movs	r2, #12
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d116      	bne.n	8002314 <HAL_RCC_OscConfig+0x64>
 80022e6:	4bbd      	ldr	r3, [pc, #756]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	2380      	movs	r3, #128	@ 0x80
 80022ec:	025b      	lsls	r3, r3, #9
 80022ee:	401a      	ands	r2, r3
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10d      	bne.n	8002314 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	4bb8      	ldr	r3, [pc, #736]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	4013      	ands	r3, r2
 8002302:	d100      	bne.n	8002306 <HAL_RCC_OscConfig+0x56>
 8002304:	e070      	b.n	80023e8 <HAL_RCC_OscConfig+0x138>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d000      	beq.n	8002310 <HAL_RCC_OscConfig+0x60>
 800230e:	e06b      	b.n	80023e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e2d8      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x7c>
 800231c:	4baf      	ldr	r3, [pc, #700]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4bae      	ldr	r3, [pc, #696]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002322:	2180      	movs	r1, #128	@ 0x80
 8002324:	0249      	lsls	r1, r1, #9
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e02f      	b.n	800238c <HAL_RCC_OscConfig+0xdc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x9e>
 8002334:	4ba9      	ldr	r3, [pc, #676]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4ba8      	ldr	r3, [pc, #672]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800233a:	49a9      	ldr	r1, [pc, #676]	@ (80025e0 <HAL_RCC_OscConfig+0x330>)
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	4ba6      	ldr	r3, [pc, #664]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4ba5      	ldr	r3, [pc, #660]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002346:	49a7      	ldr	r1, [pc, #668]	@ (80025e4 <HAL_RCC_OscConfig+0x334>)
 8002348:	400a      	ands	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e01e      	b.n	800238c <HAL_RCC_OscConfig+0xdc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d10e      	bne.n	8002374 <HAL_RCC_OscConfig+0xc4>
 8002356:	4ba1      	ldr	r3, [pc, #644]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4ba0      	ldr	r3, [pc, #640]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	02c9      	lsls	r1, r1, #11
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	4b9d      	ldr	r3, [pc, #628]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b9c      	ldr	r3, [pc, #624]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800236a:	2180      	movs	r1, #128	@ 0x80
 800236c:	0249      	lsls	r1, r1, #9
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0xdc>
 8002374:	4b99      	ldr	r3, [pc, #612]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b98      	ldr	r3, [pc, #608]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800237a:	4999      	ldr	r1, [pc, #612]	@ (80025e0 <HAL_RCC_OscConfig+0x330>)
 800237c:	400a      	ands	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	4b96      	ldr	r3, [pc, #600]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b95      	ldr	r3, [pc, #596]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002386:	4997      	ldr	r1, [pc, #604]	@ (80025e4 <HAL_RCC_OscConfig+0x334>)
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d014      	beq.n	80023be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe feaa 	bl	80010ec <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239e:	f7fe fea5 	bl	80010ec <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	@ 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e28a      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b0:	4b8a      	ldr	r3, [pc, #552]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	@ 0x80
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	4013      	ands	r3, r2
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0xee>
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fe95 	bl	80010ec <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fe90 	bl	80010ec <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	@ 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e275      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b80      	ldr	r3, [pc, #512]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	4013      	ands	r3, r2
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x118>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d100      	bne.n	80023f6 <HAL_RCC_OscConfig+0x146>
 80023f4:	e069      	b.n	80024ca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023f6:	4b79      	ldr	r3, [pc, #484]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	220c      	movs	r2, #12
 80023fc:	4013      	ands	r3, r2
 80023fe:	d00b      	beq.n	8002418 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002400:	4b76      	ldr	r3, [pc, #472]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	220c      	movs	r2, #12
 8002406:	4013      	ands	r3, r2
 8002408:	2b08      	cmp	r3, #8
 800240a:	d11c      	bne.n	8002446 <HAL_RCC_OscConfig+0x196>
 800240c:	4b73      	ldr	r3, [pc, #460]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	025b      	lsls	r3, r3, #9
 8002414:	4013      	ands	r3, r2
 8002416:	d116      	bne.n	8002446 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002418:	4b70      	ldr	r3, [pc, #448]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2202      	movs	r2, #2
 800241e:	4013      	ands	r3, r2
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x17e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e24b      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b6b      	ldr	r3, [pc, #428]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	22f8      	movs	r2, #248	@ 0xf8
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	00da      	lsls	r2, r3, #3
 800243e:	4b67      	ldr	r3, [pc, #412]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002444:	e041      	b.n	80024ca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d024      	beq.n	8002498 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800244e:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b62      	ldr	r3, [pc, #392]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002454:	2101      	movs	r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe fe47 	bl	80010ec <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fe42 	bl	80010ec <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e227      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d0f1      	beq.n	8002464 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b56      	ldr	r3, [pc, #344]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	22f8      	movs	r2, #248	@ 0xf8
 8002486:	4393      	bics	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00da      	lsls	r2, r3, #3
 8002490:	4b52      	ldr	r3, [pc, #328]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e018      	b.n	80024ca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002498:	4b50      	ldr	r3, [pc, #320]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b4f      	ldr	r3, [pc, #316]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800249e:	2101      	movs	r1, #1
 80024a0:	438a      	bics	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fe22 	bl	80010ec <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fe1d 	bl	80010ec <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e202      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c0:	4b46      	ldr	r3, [pc, #280]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2202      	movs	r2, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	d1f1      	bne.n	80024ae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2208      	movs	r2, #8
 80024d0:	4013      	ands	r3, r2
 80024d2:	d036      	beq.n	8002542 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d019      	beq.n	8002510 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024dc:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80024de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e0:	4b3e      	ldr	r3, [pc, #248]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe fe00 	bl	80010ec <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe fdfb 	bl	80010ec <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1e0      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002504:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	2202      	movs	r2, #2
 800250a:	4013      	ands	r3, r2
 800250c:	d0f1      	beq.n	80024f2 <HAL_RCC_OscConfig+0x242>
 800250e:	e018      	b.n	8002542 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002510:	4b32      	ldr	r3, [pc, #200]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002514:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002516:	2101      	movs	r1, #1
 8002518:	438a      	bics	r2, r1
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe fde6 	bl	80010ec <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe fde1 	bl	80010ec <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1c6      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d1f1      	bne.n	8002526 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2204      	movs	r2, #4
 8002548:	4013      	ands	r3, r2
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x29e>
 800254c:	e0b4      	b.n	80026b8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	201f      	movs	r0, #31
 8002550:	183b      	adds	r3, r7, r0
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b21      	ldr	r3, [pc, #132]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	055b      	lsls	r3, r3, #21
 800255e:	4013      	ands	r3, r2
 8002560:	d110      	bne.n	8002584 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002568:	2180      	movs	r1, #128	@ 0x80
 800256a:	0549      	lsls	r1, r1, #21
 800256c:	430a      	orrs	r2, r1
 800256e:	61da      	str	r2, [r3, #28]
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	055b      	lsls	r3, r3, #21
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800257e:	183b      	adds	r3, r7, r0
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_RCC_OscConfig+0x338>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4013      	ands	r3, r2
 800258e:	d11a      	bne.n	80025c6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002590:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <HAL_RCC_OscConfig+0x338>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_RCC_OscConfig+0x338>)
 8002596:	2180      	movs	r1, #128	@ 0x80
 8002598:	0049      	lsls	r1, r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe fda5 	bl	80010ec <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a8:	f7fe fda0 	bl	80010ec <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	@ 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e185      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_RCC_OscConfig+0x338>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d10e      	bne.n	80025ec <HAL_RCC_OscConfig+0x33c>
 80025ce:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	4b02      	ldr	r3, [pc, #8]	@ (80025dc <HAL_RCC_OscConfig+0x32c>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	621a      	str	r2, [r3, #32]
 80025da:	e035      	b.n	8002648 <HAL_RCC_OscConfig+0x398>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	fffeffff 	.word	0xfffeffff
 80025e4:	fffbffff 	.word	0xfffbffff
 80025e8:	40007000 	.word	0x40007000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_OscConfig+0x35e>
 80025f4:	4bb6      	ldr	r3, [pc, #728]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	4bb5      	ldr	r3, [pc, #724]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	438a      	bics	r2, r1
 80025fe:	621a      	str	r2, [r3, #32]
 8002600:	4bb3      	ldr	r3, [pc, #716]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	4bb2      	ldr	r3, [pc, #712]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002606:	2104      	movs	r1, #4
 8002608:	438a      	bics	r2, r1
 800260a:	621a      	str	r2, [r3, #32]
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x398>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b05      	cmp	r3, #5
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x380>
 8002616:	4bae      	ldr	r3, [pc, #696]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002618:	6a1a      	ldr	r2, [r3, #32]
 800261a:	4bad      	ldr	r3, [pc, #692]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800261c:	2104      	movs	r1, #4
 800261e:	430a      	orrs	r2, r1
 8002620:	621a      	str	r2, [r3, #32]
 8002622:	4bab      	ldr	r3, [pc, #684]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	4baa      	ldr	r3, [pc, #680]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002628:	2101      	movs	r1, #1
 800262a:	430a      	orrs	r2, r1
 800262c:	621a      	str	r2, [r3, #32]
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0x398>
 8002630:	4ba7      	ldr	r3, [pc, #668]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	4ba6      	ldr	r3, [pc, #664]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002636:	2101      	movs	r1, #1
 8002638:	438a      	bics	r2, r1
 800263a:	621a      	str	r2, [r3, #32]
 800263c:	4ba4      	ldr	r3, [pc, #656]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	4ba3      	ldr	r3, [pc, #652]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002642:	2104      	movs	r1, #4
 8002644:	438a      	bics	r2, r1
 8002646:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d014      	beq.n	800267a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7fe fd4c 	bl	80010ec <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e009      	b.n	800266e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fd47 	bl	80010ec <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a9b      	ldr	r2, [pc, #620]	@ (80028d4 <HAL_RCC_OscConfig+0x624>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e12b      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	4b98      	ldr	r3, [pc, #608]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	2202      	movs	r2, #2
 8002674:	4013      	ands	r3, r2
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x3aa>
 8002678:	e013      	b.n	80026a2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe fd37 	bl	80010ec <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	e009      	b.n	8002698 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7fe fd32 	bl	80010ec <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	4a91      	ldr	r2, [pc, #580]	@ (80028d4 <HAL_RCC_OscConfig+0x624>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e116      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	4b8d      	ldr	r3, [pc, #564]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026a2:	231f      	movs	r3, #31
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b88      	ldr	r3, [pc, #544]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	4b87      	ldr	r3, [pc, #540]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026b2:	4989      	ldr	r1, [pc, #548]	@ (80028d8 <HAL_RCC_OscConfig+0x628>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	4013      	ands	r3, r2
 80026c0:	d063      	beq.n	800278a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d12a      	bne.n	8002720 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026ca:	4b81      	ldr	r3, [pc, #516]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ce:	4b80      	ldr	r3, [pc, #512]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026d0:	2104      	movs	r1, #4
 80026d2:	430a      	orrs	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026d6:	4b7e      	ldr	r3, [pc, #504]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026da:	4b7d      	ldr	r3, [pc, #500]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026dc:	2101      	movs	r1, #1
 80026de:	430a      	orrs	r2, r1
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fd03 	bl	80010ec <HAL_GetTick>
 80026e6:	0003      	movs	r3, r0
 80026e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026ec:	f7fe fcfe 	bl	80010ec <HAL_GetTick>
 80026f0:	0002      	movs	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0e3      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026fe:	4b74      	ldr	r3, [pc, #464]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002702:	2202      	movs	r2, #2
 8002704:	4013      	ands	r3, r2
 8002706:	d0f1      	beq.n	80026ec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002708:	4b71      	ldr	r3, [pc, #452]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	22f8      	movs	r2, #248	@ 0xf8
 800270e:	4393      	bics	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	00da      	lsls	r2, r3, #3
 8002718:	4b6d      	ldr	r3, [pc, #436]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	@ 0x34
 800271e:	e034      	b.n	800278a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	3305      	adds	r3, #5
 8002726:	d111      	bne.n	800274c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002728:	4b69      	ldr	r3, [pc, #420]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800272a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800272c:	4b68      	ldr	r3, [pc, #416]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800272e:	2104      	movs	r1, #4
 8002730:	438a      	bics	r2, r1
 8002732:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002734:	4b66      	ldr	r3, [pc, #408]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002738:	22f8      	movs	r2, #248	@ 0xf8
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	00da      	lsls	r2, r3, #3
 8002744:	4b62      	ldr	r3, [pc, #392]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002746:	430a      	orrs	r2, r1
 8002748:	635a      	str	r2, [r3, #52]	@ 0x34
 800274a:	e01e      	b.n	800278a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800274c:	4b60      	ldr	r3, [pc, #384]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800274e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002750:	4b5f      	ldr	r3, [pc, #380]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002752:	2104      	movs	r1, #4
 8002754:	430a      	orrs	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002758:	4b5d      	ldr	r3, [pc, #372]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800275a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800275c:	4b5c      	ldr	r3, [pc, #368]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fcc2 	bl	80010ec <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800276e:	f7fe fcbd 	bl	80010ec <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0a2      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002780:	4b53      	ldr	r3, [pc, #332]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d1f1      	bne.n	800276e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d100      	bne.n	8002794 <HAL_RCC_OscConfig+0x4e4>
 8002792:	e097      	b.n	80028c4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002794:	4b4e      	ldr	r3, [pc, #312]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	220c      	movs	r2, #12
 800279a:	4013      	ands	r3, r2
 800279c:	2b08      	cmp	r3, #8
 800279e:	d100      	bne.n	80027a2 <HAL_RCC_OscConfig+0x4f2>
 80027a0:	e06b      	b.n	800287a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d14c      	bne.n	8002844 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b49      	ldr	r3, [pc, #292]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027b0:	494a      	ldr	r1, [pc, #296]	@ (80028dc <HAL_RCC_OscConfig+0x62c>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fe fc99 	bl	80010ec <HAL_GetTick>
 80027ba:	0003      	movs	r3, r0
 80027bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fc94 	bl	80010ec <HAL_GetTick>
 80027c4:	0002      	movs	r2, r0
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e079      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	049b      	lsls	r3, r3, #18
 80027da:	4013      	ands	r3, r2
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027de:	4b3c      	ldr	r3, [pc, #240]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e2:	220f      	movs	r2, #15
 80027e4:	4393      	bics	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ec:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027f2:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a3a      	ldr	r2, [pc, #232]	@ (80028e0 <HAL_RCC_OscConfig+0x630>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	431a      	orrs	r2, r3
 8002806:	4b32      	ldr	r3, [pc, #200]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280c:	4b30      	ldr	r3, [pc, #192]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b2f      	ldr	r3, [pc, #188]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002812:	2180      	movs	r1, #128	@ 0x80
 8002814:	0449      	lsls	r1, r1, #17
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe fc67 	bl	80010ec <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fc62 	bl	80010ec <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e047      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002836:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	049b      	lsls	r3, r3, #18
 800283e:	4013      	ands	r3, r2
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x574>
 8002842:	e03f      	b.n	80028c4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002844:	4b22      	ldr	r3, [pc, #136]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800284a:	4924      	ldr	r1, [pc, #144]	@ (80028dc <HAL_RCC_OscConfig+0x62c>)
 800284c:	400a      	ands	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fc4c 	bl	80010ec <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe fc47 	bl	80010ec <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e02c      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286c:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	049b      	lsls	r3, r3, #18
 8002874:	4013      	ands	r3, r2
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x5aa>
 8002878:	e024      	b.n	80028c4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01f      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_RCC_OscConfig+0x620>)
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	2380      	movs	r3, #128	@ 0x80
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	429a      	cmp	r2, r3
 80028a0:	d10e      	bne.n	80028c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	220f      	movs	r2, #15
 80028a6:	401a      	ands	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	23f0      	movs	r3, #240	@ 0xf0
 80028b4:	039b      	lsls	r3, r3, #14
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b008      	add	sp, #32
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	40021000 	.word	0x40021000
 80028d4:	00001388 	.word	0x00001388
 80028d8:	efffffff 	.word	0xefffffff
 80028dc:	feffffff 	.word	0xfeffffff
 80028e0:	ffc2ffff 	.word	0xffc2ffff

080028e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0b3      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a68 <HAL_RCC_ClockConfig+0x184>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	4013      	ands	r3, r2
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d911      	bls.n	800292a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b58      	ldr	r3, [pc, #352]	@ (8002a68 <HAL_RCC_ClockConfig+0x184>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4393      	bics	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	4b55      	ldr	r3, [pc, #340]	@ (8002a68 <HAL_RCC_ClockConfig+0x184>)
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002918:	4b53      	ldr	r3, [pc, #332]	@ (8002a68 <HAL_RCC_ClockConfig+0x184>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e09a      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d015      	beq.n	8002960 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2204      	movs	r2, #4
 800293a:	4013      	ands	r3, r2
 800293c:	d006      	beq.n	800294c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800293e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	4b4a      	ldr	r3, [pc, #296]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002944:	21e0      	movs	r1, #224	@ 0xe0
 8002946:	00c9      	lsls	r1, r1, #3
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b47      	ldr	r3, [pc, #284]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	22f0      	movs	r2, #240	@ 0xf0
 8002952:	4393      	bics	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	4013      	ands	r3, r2
 8002968:	d040      	beq.n	80029ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b3e      	ldr	r3, [pc, #248]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	029b      	lsls	r3, r3, #10
 800297a:	4013      	ands	r3, r2
 800297c:	d114      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06e      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b38      	ldr	r3, [pc, #224]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	049b      	lsls	r3, r3, #18
 8002992:	4013      	ands	r3, r2
 8002994:	d108      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e062      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2202      	movs	r2, #2
 80029a0:	4013      	ands	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e05b      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a8:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	4393      	bics	r3, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 80029b8:	430a      	orrs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7fe fb96 	bl	80010ec <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c4:	e009      	b.n	80029da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c6:	f7fe fb91 	bl	80010ec <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	4a27      	ldr	r2, [pc, #156]	@ (8002a70 <HAL_RCC_ClockConfig+0x18c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e042      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	220c      	movs	r2, #12
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1ec      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <HAL_RCC_ClockConfig+0x184>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d211      	bcs.n	8002a1e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_ClockConfig+0x184>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_RCC_ClockConfig+0x184>)
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <HAL_RCC_ClockConfig+0x184>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e020      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2204      	movs	r2, #4
 8002a24:	4013      	ands	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <HAL_RCC_ClockConfig+0x190>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a3c:	f000 f820 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a40:	0001      	movs	r1, r0
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	220f      	movs	r2, #15
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <HAL_RCC_ClockConfig+0x194>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	000a      	movs	r2, r1
 8002a52:	40da      	lsrs	r2, r3
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_ClockConfig+0x198>)
 8002a56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a58:	2003      	movs	r0, #3
 8002a5a:	f7fe f9d7 	bl	8000e0c <HAL_InitTick>
  
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	00001388 	.word	0x00001388
 8002a74:	fffff8ff 	.word	0xfffff8ff
 8002a78:	08006714 	.word	0x08006714
 8002a7c:	20000010 	.word	0x20000010

08002a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8002aae:	e02c      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ab2:	613b      	str	r3, [r7, #16]
      break;
 8002ab4:	e02c      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	0c9b      	lsrs	r3, r3, #18
 8002aba:	220f      	movs	r2, #15
 8002abc:	4013      	ands	r3, r2
 8002abe:	4a19      	ldr	r2, [pc, #100]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ac4:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	220f      	movs	r2, #15
 8002aca:	4013      	ands	r3, r2
 8002acc:	4a16      	ldr	r2, [pc, #88]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4810      	ldr	r0, [pc, #64]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ae0:	f7fd fb1c 	bl	800011c <__udivsi3>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4353      	muls	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e009      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	000a      	movs	r2, r1
 8002af4:	0152      	lsls	r2, r2, #5
 8002af6:	1a52      	subs	r2, r2, r1
 8002af8:	0193      	lsls	r3, r2, #6
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	185b      	adds	r3, r3, r1
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	613b      	str	r3, [r7, #16]
      break;
 8002b08:	e002      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b0c:	613b      	str	r3, [r7, #16]
      break;
 8002b0e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b10:	693b      	ldr	r3, [r7, #16]
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b006      	add	sp, #24
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	007a1200 	.word	0x007a1200
 8002b24:	0800672c 	.word	0x0800672c
 8002b28:	0800673c 	.word	0x0800673c

08002b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b30:	4b02      	ldr	r3, [pc, #8]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	20000010 	.word	0x20000010

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b44:	f7ff fff2 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b48:	0001      	movs	r1, r0
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	2207      	movs	r2, #7
 8002b52:	4013      	ands	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	40d9      	lsrs	r1, r3
 8002b5a:	000b      	movs	r3, r1
}    
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08006724 	.word	0x08006724

08002b6c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2207      	movs	r2, #7
 8002b7a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <HAL_RCC_GetClockConfig+0x4c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_GetClockConfig+0x4c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	22f0      	movs	r2, #240	@ 0xf0
 8002b8e:	401a      	ands	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002b94:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <HAL_RCC_GetClockConfig+0x4c>)
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	23e0      	movs	r3, #224	@ 0xe0
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_RCC_GetClockConfig+0x50>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	401a      	ands	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	601a      	str	r2, [r3, #0]
}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40022000 	.word	0x40022000

08002bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	025b      	lsls	r3, r3, #9
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d100      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002bdc:	e08e      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2017      	movs	r0, #23
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b57      	ldr	r3, [pc, #348]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	2380      	movs	r3, #128	@ 0x80
 8002bec:	055b      	lsls	r3, r3, #21
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d110      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b54      	ldr	r3, [pc, #336]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	4b53      	ldr	r3, [pc, #332]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002bf8:	2180      	movs	r1, #128	@ 0x80
 8002bfa:	0549      	lsls	r1, r1, #21
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	61da      	str	r2, [r3, #28]
 8002c00:	4b50      	ldr	r3, [pc, #320]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	2380      	movs	r3, #128	@ 0x80
 8002c06:	055b      	lsls	r3, r3, #21
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0e:	183b      	adds	r3, r7, r0
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b4c      	ldr	r3, [pc, #304]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d11a      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c20:	4b49      	ldr	r3, [pc, #292]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b48      	ldr	r3, [pc, #288]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c26:	2180      	movs	r1, #128	@ 0x80
 8002c28:	0049      	lsls	r1, r1, #1
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fa5d 	bl	80010ec <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	e008      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fe fa58 	bl	80010ec <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	@ 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e077      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c56:	4b3b      	ldr	r3, [pc, #236]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c58:	6a1a      	ldr	r2, [r3, #32]
 8002c5a:	23c0      	movs	r3, #192	@ 0xc0
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d034      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	23c0      	movs	r3, #192	@ 0xc0
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4013      	ands	r3, r2
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d02c      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c78:	4b32      	ldr	r3, [pc, #200]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a33      	ldr	r2, [pc, #204]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c82:	4b30      	ldr	r3, [pc, #192]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	4b2f      	ldr	r3, [pc, #188]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c88:	2180      	movs	r1, #128	@ 0x80
 8002c8a:	0249      	lsls	r1, r1, #9
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c90:	4b2c      	ldr	r3, [pc, #176]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	4b2b      	ldr	r3, [pc, #172]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c96:	492e      	ldr	r1, [pc, #184]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c9c:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7fe fa1f 	bl	80010ec <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb2:	e009      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fa1a 	bl	80010ec <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	4a25      	ldr	r2, [pc, #148]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e038      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	4b18      	ldr	r3, [pc, #96]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ce6:	2317      	movs	r3, #23
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf0:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf6:	4918      	ldr	r1, [pc, #96]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d06:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	4013      	ands	r3, r2
 8002d22:	d009      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d24:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	2210      	movs	r2, #16
 8002d2a:	4393      	bics	r3, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d34:	430a      	orrs	r2, r1
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b006      	add	sp, #24
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	fffffcff 	.word	0xfffffcff
 8002d50:	fffeffff 	.word	0xfffeffff
 8002d54:	00001388 	.word	0x00001388
 8002d58:	efffffff 	.word	0xefffffff

08002d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e042      	b.n	8002df4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	223d      	movs	r2, #61	@ 0x3d
 8002d72:	5c9b      	ldrb	r3, [r3, r2]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d107      	bne.n	8002d8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	223c      	movs	r2, #60	@ 0x3c
 8002d7e:	2100      	movs	r1, #0
 8002d80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 f839 	bl	8002dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	223d      	movs	r2, #61	@ 0x3d
 8002d8e:	2102      	movs	r1, #2
 8002d90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	f000 f98f 	bl	80030c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2246      	movs	r2, #70	@ 0x46
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	223e      	movs	r2, #62	@ 0x3e
 8002dae:	2101      	movs	r1, #1
 8002db0:	5499      	strb	r1, [r3, r2]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	223f      	movs	r2, #63	@ 0x3f
 8002db6:	2101      	movs	r1, #1
 8002db8:	5499      	strb	r1, [r3, r2]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2240      	movs	r2, #64	@ 0x40
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2241      	movs	r2, #65	@ 0x41
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2242      	movs	r2, #66	@ 0x42
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2243      	movs	r2, #67	@ 0x43
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	5499      	strb	r1, [r3, r2]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2244      	movs	r2, #68	@ 0x44
 8002dde:	2101      	movs	r1, #1
 8002de0:	5499      	strb	r1, [r3, r2]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2245      	movs	r2, #69	@ 0x45
 8002de6:	2101      	movs	r1, #1
 8002de8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223d      	movs	r2, #61	@ 0x3d
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e04:	46c0      	nop			@ (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	223d      	movs	r2, #61	@ 0x3d
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e035      	b.n	8002e90 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	223d      	movs	r2, #61	@ 0x3d
 8002e28:	2102      	movs	r1, #2
 8002e2a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2101      	movs	r1, #1
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <HAL_TIM_Base_Start_IT+0x8c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_TIM_Base_Start_IT+0x4e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <HAL_TIM_Base_Start_IT+0x90>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <HAL_TIM_Base_Start_IT+0x4e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a12      	ldr	r2, [pc, #72]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0x94>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d111      	bne.n	8002e7e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2207      	movs	r2, #7
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d010      	beq.n	8002e8e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2101      	movs	r1, #1
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7c:	e007      	b.n	8002e8e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b004      	add	sp, #16
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40014000 	.word	0x40014000

08002ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d021      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d01d      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4252      	negs	r2, r2
 8002ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 f8d0 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e007      	b.n	8002f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 f8c3 	bl	8003080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 f8cf 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2204      	movs	r2, #4
 8002f14:	4013      	ands	r3, r2
 8002f16:	d01e      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2205      	movs	r2, #5
 8002f1e:	4252      	negs	r2, r2
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	23c0      	movs	r3, #192	@ 0xc0
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 f8a9 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002f3e:	e007      	b.n	8002f50 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f89c 	bl	8003080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 f8a8 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d021      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2208      	movs	r2, #8
 8002f62:	4013      	ands	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2209      	movs	r2, #9
 8002f6c:	4252      	negs	r2, r2
 8002f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2204      	movs	r2, #4
 8002f74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 f883 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002f8a:	e007      	b.n	8002f9c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 f876 	bl	8003080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 f882 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d022      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2210      	movs	r2, #16
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d01e      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2211      	movs	r2, #17
 8002fb8:	4252      	negs	r2, r2
 8002fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	23c0      	movs	r3, #192	@ 0xc0
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 f85c 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e007      	b.n	8002fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f84f 	bl	8003080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 f85b 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d00c      	beq.n	8003012 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d008      	beq.n	8003012 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2202      	movs	r2, #2
 8003006:	4252      	negs	r2, r2
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f7fd fe21 	bl	8000c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2280      	movs	r2, #128	@ 0x80
 8003016:	4013      	ands	r3, r2
 8003018:	d00c      	beq.n	8003034 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	4013      	ands	r3, r2
 8003020:	d008      	beq.n	8003034 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2281      	movs	r2, #129	@ 0x81
 8003028:	4252      	negs	r2, r2
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0018      	movs	r0, r3
 8003030:	f000 f8d2 	bl	80031d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2240      	movs	r2, #64	@ 0x40
 8003038:	4013      	ands	r3, r2
 800303a:	d00c      	beq.n	8003056 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	@ 0x40
 8003040:	4013      	ands	r3, r2
 8003042:	d008      	beq.n	8003056 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2241      	movs	r2, #65	@ 0x41
 800304a:	4252      	negs	r2, r2
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0018      	movs	r0, r3
 8003052:	f000 f82d 	bl	80030b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2220      	movs	r2, #32
 800305a:	4013      	ands	r3, r2
 800305c:	d00c      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	4013      	ands	r3, r2
 8003064:	d008      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2221      	movs	r2, #33	@ 0x21
 800306c:	4252      	negs	r2, r2
 800306e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0018      	movs	r0, r3
 8003074:	f000 f8a8 	bl	80031c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b004      	add	sp, #16
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003088:	46c0      	nop			@ (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003098:	46c0      	nop			@ (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a36      	ldr	r2, [pc, #216]	@ (80031ac <TIM_Base_SetConfig+0xec>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_Base_SetConfig+0x20>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a35      	ldr	r2, [pc, #212]	@ (80031b0 <TIM_Base_SetConfig+0xf0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d108      	bne.n	80030f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2270      	movs	r2, #112	@ 0x70
 80030e4:	4393      	bics	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <TIM_Base_SetConfig+0xec>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2c      	ldr	r2, [pc, #176]	@ (80031b0 <TIM_Base_SetConfig+0xf0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00f      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2b      	ldr	r2, [pc, #172]	@ (80031b4 <TIM_Base_SetConfig+0xf4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2a      	ldr	r2, [pc, #168]	@ (80031b8 <TIM_Base_SetConfig+0xf8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a29      	ldr	r2, [pc, #164]	@ (80031bc <TIM_Base_SetConfig+0xfc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a28      	ldr	r2, [pc, #160]	@ (80031c0 <TIM_Base_SetConfig+0x100>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a27      	ldr	r2, [pc, #156]	@ (80031c4 <TIM_Base_SetConfig+0x104>)
 8003126:	4013      	ands	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	4393      	bics	r3, r2
 800313a:	001a      	movs	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a13      	ldr	r2, [pc, #76]	@ (80031ac <TIM_Base_SetConfig+0xec>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_Base_SetConfig+0xba>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <TIM_Base_SetConfig+0xf8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_Base_SetConfig+0xba>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a13      	ldr	r2, [pc, #76]	@ (80031bc <TIM_Base_SetConfig+0xfc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_Base_SetConfig+0xba>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a12      	ldr	r2, [pc, #72]	@ (80031c0 <TIM_Base_SetConfig+0x100>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d103      	bne.n	8003182 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2201      	movs	r2, #1
 800319a:	4393      	bics	r3, r2
 800319c:	001a      	movs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	611a      	str	r2, [r3, #16]
  }
}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b004      	add	sp, #16
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40002000 	.word	0x40002000
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40014400 	.word	0x40014400
 80031c0:	40014800 	.word	0x40014800
 80031c4:	fffffcff 	.word	0xfffffcff

080031c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031e0:	46c0      	nop			@ (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e044      	b.n	8003284 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d107      	bne.n	8003212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2278      	movs	r2, #120	@ 0x78
 8003206:	2100      	movs	r1, #0
 8003208:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0018      	movs	r0, r3
 800320e:	f7fd fdb1 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2224      	movs	r2, #36	@ 0x24
 8003216:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2101      	movs	r1, #1
 8003224:	438a      	bics	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0018      	movs	r0, r3
 8003234:	f000 fa0c 	bl	8003650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0018      	movs	r0, r3
 800323c:	f000 f8c8 	bl	80033d0 <UART_SetConfig>
 8003240:	0003      	movs	r3, r0
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e01c      	b.n	8003284 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	490d      	ldr	r1, [pc, #52]	@ (800328c <HAL_UART_Init+0xa4>)
 8003256:	400a      	ands	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2108      	movs	r1, #8
 8003266:	438a      	bics	r2, r1
 8003268:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0018      	movs	r0, r3
 800327e:	f000 fa9b 	bl	80037b8 <UART_CheckIdleState>
 8003282:	0003      	movs	r3, r0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}
 800328c:	fffff7ff 	.word	0xfffff7ff

08003290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	@ 0x28
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	1dbb      	adds	r3, r7, #6
 800329e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d000      	beq.n	80032aa <HAL_UART_Transmit+0x1a>
 80032a8:	e08c      	b.n	80033c4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_UART_Transmit+0x28>
 80032b0:	1dbb      	adds	r3, r7, #6
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e084      	b.n	80033c6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	2380      	movs	r3, #128	@ 0x80
 80032c2:	015b      	lsls	r3, r3, #5
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d109      	bne.n	80032dc <HAL_UART_Transmit+0x4c>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2201      	movs	r2, #1
 80032d4:	4013      	ands	r3, r2
 80032d6:	d001      	beq.n	80032dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e074      	b.n	80033c6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2284      	movs	r2, #132	@ 0x84
 80032e0:	2100      	movs	r1, #0
 80032e2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2221      	movs	r2, #33	@ 0x21
 80032e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ea:	f7fd feff 	bl	80010ec <HAL_GetTick>
 80032ee:	0003      	movs	r3, r0
 80032f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1dba      	adds	r2, r7, #6
 80032f6:	2150      	movs	r1, #80	@ 0x50
 80032f8:	8812      	ldrh	r2, [r2, #0]
 80032fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1dba      	adds	r2, r7, #6
 8003300:	2152      	movs	r1, #82	@ 0x52
 8003302:	8812      	ldrh	r2, [r2, #0]
 8003304:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	015b      	lsls	r3, r3, #5
 800330e:	429a      	cmp	r2, r3
 8003310:	d108      	bne.n	8003324 <HAL_UART_Transmit+0x94>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d104      	bne.n	8003324 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	e003      	b.n	800332c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800332c:	e02f      	b.n	800338e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	0013      	movs	r3, r2
 8003338:	2200      	movs	r2, #0
 800333a:	2180      	movs	r1, #128	@ 0x80
 800333c:	f000 fae4 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d004      	beq.n	800334e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e03b      	b.n	80033c6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	881a      	ldrh	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	05d2      	lsls	r2, r2, #23
 800335e:	0dd2      	lsrs	r2, r2, #23
 8003360:	b292      	uxth	r2, r2
 8003362:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	3302      	adds	r3, #2
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e007      	b.n	800337c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3301      	adds	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2252      	movs	r2, #82	@ 0x52
 8003380:	5a9b      	ldrh	r3, [r3, r2]
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b299      	uxth	r1, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2252      	movs	r2, #82	@ 0x52
 800338c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2252      	movs	r2, #82	@ 0x52
 8003392:	5a9b      	ldrh	r3, [r3, r2]
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1c9      	bne.n	800332e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	0013      	movs	r3, r2
 80033a4:	2200      	movs	r2, #0
 80033a6:	2140      	movs	r1, #64	@ 0x40
 80033a8:	f000 faae 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d004      	beq.n	80033ba <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e005      	b.n	80033c6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b008      	add	sp, #32
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033d8:	231e      	movs	r3, #30
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a8d      	ldr	r2, [pc, #564]	@ (8003634 <UART_SetConfig+0x264>)
 8003400:	4013      	ands	r3, r2
 8003402:	0019      	movs	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a88      	ldr	r2, [pc, #544]	@ (8003638 <UART_SetConfig+0x268>)
 8003416:	4013      	ands	r3, r2
 8003418:	0019      	movs	r1, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a7f      	ldr	r2, [pc, #508]	@ (800363c <UART_SetConfig+0x26c>)
 800343e:	4013      	ands	r3, r2
 8003440:	0019      	movs	r1, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a7b      	ldr	r2, [pc, #492]	@ (8003640 <UART_SetConfig+0x270>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d127      	bne.n	80034a6 <UART_SetConfig+0xd6>
 8003456:	4b7b      	ldr	r3, [pc, #492]	@ (8003644 <UART_SetConfig+0x274>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	2203      	movs	r2, #3
 800345c:	4013      	ands	r3, r2
 800345e:	2b03      	cmp	r3, #3
 8003460:	d00d      	beq.n	800347e <UART_SetConfig+0xae>
 8003462:	d81b      	bhi.n	800349c <UART_SetConfig+0xcc>
 8003464:	2b02      	cmp	r3, #2
 8003466:	d014      	beq.n	8003492 <UART_SetConfig+0xc2>
 8003468:	d818      	bhi.n	800349c <UART_SetConfig+0xcc>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <UART_SetConfig+0xa4>
 800346e:	2b01      	cmp	r3, #1
 8003470:	d00a      	beq.n	8003488 <UART_SetConfig+0xb8>
 8003472:	e013      	b.n	800349c <UART_SetConfig+0xcc>
 8003474:	231f      	movs	r3, #31
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e021      	b.n	80034c2 <UART_SetConfig+0xf2>
 800347e:	231f      	movs	r3, #31
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	2202      	movs	r2, #2
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e01c      	b.n	80034c2 <UART_SetConfig+0xf2>
 8003488:	231f      	movs	r3, #31
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2204      	movs	r2, #4
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e017      	b.n	80034c2 <UART_SetConfig+0xf2>
 8003492:	231f      	movs	r3, #31
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	2208      	movs	r2, #8
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	e012      	b.n	80034c2 <UART_SetConfig+0xf2>
 800349c:	231f      	movs	r3, #31
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	2210      	movs	r2, #16
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e00d      	b.n	80034c2 <UART_SetConfig+0xf2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a67      	ldr	r2, [pc, #412]	@ (8003648 <UART_SetConfig+0x278>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d104      	bne.n	80034ba <UART_SetConfig+0xea>
 80034b0:	231f      	movs	r3, #31
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e003      	b.n	80034c2 <UART_SetConfig+0xf2>
 80034ba:	231f      	movs	r3, #31
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2210      	movs	r2, #16
 80034c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d15c      	bne.n	8003588 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80034ce:	231f      	movs	r3, #31
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d015      	beq.n	8003504 <UART_SetConfig+0x134>
 80034d8:	dc18      	bgt.n	800350c <UART_SetConfig+0x13c>
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d00d      	beq.n	80034fa <UART_SetConfig+0x12a>
 80034de:	dc15      	bgt.n	800350c <UART_SetConfig+0x13c>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <UART_SetConfig+0x11a>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d005      	beq.n	80034f4 <UART_SetConfig+0x124>
 80034e8:	e010      	b.n	800350c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ea:	f7ff fb29 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80034ee:	0003      	movs	r3, r0
 80034f0:	61bb      	str	r3, [r7, #24]
        break;
 80034f2:	e012      	b.n	800351a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f4:	4b55      	ldr	r3, [pc, #340]	@ (800364c <UART_SetConfig+0x27c>)
 80034f6:	61bb      	str	r3, [r7, #24]
        break;
 80034f8:	e00f      	b.n	800351a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fa:	f7ff fac1 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 80034fe:	0003      	movs	r3, r0
 8003500:	61bb      	str	r3, [r7, #24]
        break;
 8003502:	e00a      	b.n	800351a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003504:	2380      	movs	r3, #128	@ 0x80
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	61bb      	str	r3, [r7, #24]
        break;
 800350a:	e006      	b.n	800351a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003510:	231e      	movs	r3, #30
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
        break;
 8003518:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d100      	bne.n	8003522 <UART_SetConfig+0x152>
 8003520:	e07a      	b.n	8003618 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	005a      	lsls	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	18d2      	adds	r2, r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	0019      	movs	r1, r3
 8003534:	0010      	movs	r0, r2
 8003536:	f7fc fdf1 	bl	800011c <__udivsi3>
 800353a:	0003      	movs	r3, r0
 800353c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d91c      	bls.n	800357e <UART_SetConfig+0x1ae>
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	025b      	lsls	r3, r3, #9
 800354a:	429a      	cmp	r2, r3
 800354c:	d217      	bcs.n	800357e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	b29a      	uxth	r2, r3
 8003552:	200e      	movs	r0, #14
 8003554:	183b      	adds	r3, r7, r0
 8003556:	210f      	movs	r1, #15
 8003558:	438a      	bics	r2, r1
 800355a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	b29b      	uxth	r3, r3
 8003562:	2207      	movs	r2, #7
 8003564:	4013      	ands	r3, r2
 8003566:	b299      	uxth	r1, r3
 8003568:	183b      	adds	r3, r7, r0
 800356a:	183a      	adds	r2, r7, r0
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	183a      	adds	r2, r7, r0
 8003578:	8812      	ldrh	r2, [r2, #0]
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	e04c      	b.n	8003618 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800357e:	231e      	movs	r3, #30
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e047      	b.n	8003618 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003588:	231f      	movs	r3, #31
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d015      	beq.n	80035be <UART_SetConfig+0x1ee>
 8003592:	dc18      	bgt.n	80035c6 <UART_SetConfig+0x1f6>
 8003594:	2b04      	cmp	r3, #4
 8003596:	d00d      	beq.n	80035b4 <UART_SetConfig+0x1e4>
 8003598:	dc15      	bgt.n	80035c6 <UART_SetConfig+0x1f6>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <UART_SetConfig+0x1d4>
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d005      	beq.n	80035ae <UART_SetConfig+0x1de>
 80035a2:	e010      	b.n	80035c6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7ff facc 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80035a8:	0003      	movs	r3, r0
 80035aa:	61bb      	str	r3, [r7, #24]
        break;
 80035ac:	e012      	b.n	80035d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ae:	4b27      	ldr	r3, [pc, #156]	@ (800364c <UART_SetConfig+0x27c>)
 80035b0:	61bb      	str	r3, [r7, #24]
        break;
 80035b2:	e00f      	b.n	80035d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b4:	f7ff fa64 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 80035b8:	0003      	movs	r3, r0
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e00a      	b.n	80035d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	61bb      	str	r3, [r7, #24]
        break;
 80035c4:	e006      	b.n	80035d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ca:	231e      	movs	r3, #30
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
        break;
 80035d2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01e      	beq.n	8003618 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085a      	lsrs	r2, r3, #1
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	18d2      	adds	r2, r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0019      	movs	r1, r3
 80035ea:	0010      	movs	r0, r2
 80035ec:	f7fc fd96 	bl	800011c <__udivsi3>
 80035f0:	0003      	movs	r3, r0
 80035f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d90a      	bls.n	8003610 <UART_SetConfig+0x240>
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	2380      	movs	r3, #128	@ 0x80
 80035fe:	025b      	lsls	r3, r3, #9
 8003600:	429a      	cmp	r2, r3
 8003602:	d205      	bcs.n	8003610 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	b29a      	uxth	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	e003      	b.n	8003618 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003610:	231e      	movs	r3, #30
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003624:	231e      	movs	r3, #30
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	781b      	ldrb	r3, [r3, #0]
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b008      	add	sp, #32
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	ffff69f3 	.word	0xffff69f3
 8003638:	ffffcfff 	.word	0xffffcfff
 800363c:	fffff4ff 	.word	0xfffff4ff
 8003640:	40013800 	.word	0x40013800
 8003644:	40021000 	.word	0x40021000
 8003648:	40004400 	.word	0x40004400
 800364c:	007a1200 	.word	0x007a1200

08003650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	2208      	movs	r2, #8
 800365e:	4013      	ands	r3, r2
 8003660:	d00b      	beq.n	800367a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a4a      	ldr	r2, [pc, #296]	@ (8003794 <UART_AdvFeatureConfig+0x144>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	2201      	movs	r2, #1
 8003680:	4013      	ands	r3, r2
 8003682:	d00b      	beq.n	800369c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a43      	ldr	r2, [pc, #268]	@ (8003798 <UART_AdvFeatureConfig+0x148>)
 800368c:	4013      	ands	r3, r2
 800368e:	0019      	movs	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	2202      	movs	r2, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	d00b      	beq.n	80036be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a3b      	ldr	r2, [pc, #236]	@ (800379c <UART_AdvFeatureConfig+0x14c>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	2204      	movs	r2, #4
 80036c4:	4013      	ands	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a34      	ldr	r2, [pc, #208]	@ (80037a0 <UART_AdvFeatureConfig+0x150>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	2210      	movs	r2, #16
 80036e6:	4013      	ands	r3, r2
 80036e8:	d00b      	beq.n	8003702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a2c      	ldr	r2, [pc, #176]	@ (80037a4 <UART_AdvFeatureConfig+0x154>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	2220      	movs	r2, #32
 8003708:	4013      	ands	r3, r2
 800370a:	d00b      	beq.n	8003724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4a25      	ldr	r2, [pc, #148]	@ (80037a8 <UART_AdvFeatureConfig+0x158>)
 8003714:	4013      	ands	r3, r2
 8003716:	0019      	movs	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	2240      	movs	r2, #64	@ 0x40
 800372a:	4013      	ands	r3, r2
 800372c:	d01d      	beq.n	800376a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a1d      	ldr	r2, [pc, #116]	@ (80037ac <UART_AdvFeatureConfig+0x15c>)
 8003736:	4013      	ands	r3, r2
 8003738:	0019      	movs	r1, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	035b      	lsls	r3, r3, #13
 800374e:	429a      	cmp	r2, r3
 8003750:	d10b      	bne.n	800376a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a15      	ldr	r2, [pc, #84]	@ (80037b0 <UART_AdvFeatureConfig+0x160>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	2280      	movs	r2, #128	@ 0x80
 8003770:	4013      	ands	r3, r2
 8003772:	d00b      	beq.n	800378c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a0e      	ldr	r2, [pc, #56]	@ (80037b4 <UART_AdvFeatureConfig+0x164>)
 800377c:	4013      	ands	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}
 8003794:	ffff7fff 	.word	0xffff7fff
 8003798:	fffdffff 	.word	0xfffdffff
 800379c:	fffeffff 	.word	0xfffeffff
 80037a0:	fffbffff 	.word	0xfffbffff
 80037a4:	ffffefff 	.word	0xffffefff
 80037a8:	ffffdfff 	.word	0xffffdfff
 80037ac:	ffefffff 	.word	0xffefffff
 80037b0:	ff9fffff 	.word	0xff9fffff
 80037b4:	fff7ffff 	.word	0xfff7ffff

080037b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b092      	sub	sp, #72	@ 0x48
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2284      	movs	r2, #132	@ 0x84
 80037c4:	2100      	movs	r1, #0
 80037c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037c8:	f7fd fc90 	bl	80010ec <HAL_GetTick>
 80037cc:	0003      	movs	r3, r0
 80037ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2208      	movs	r2, #8
 80037d8:	4013      	ands	r3, r2
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d12c      	bne.n	8003838 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e0:	2280      	movs	r2, #128	@ 0x80
 80037e2:	0391      	lsls	r1, r2, #14
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4a46      	ldr	r2, [pc, #280]	@ (8003900 <UART_CheckIdleState+0x148>)
 80037e8:	9200      	str	r2, [sp, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f000 f88c 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d021      	beq.n	8003838 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f4:	f3ef 8310 	mrs	r3, PRIMASK
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037fe:	2301      	movs	r3, #1
 8003800:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	f383 8810 	msr	PRIMASK, r3
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2180      	movs	r1, #128	@ 0x80
 8003816:	438a      	bics	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003820:	f383 8810 	msr	PRIMASK, r3
}
 8003824:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2278      	movs	r2, #120	@ 0x78
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e05f      	b.n	80038f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2204      	movs	r2, #4
 8003840:	4013      	ands	r3, r2
 8003842:	2b04      	cmp	r3, #4
 8003844:	d146      	bne.n	80038d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003848:	2280      	movs	r2, #128	@ 0x80
 800384a:	03d1      	lsls	r1, r2, #15
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4a2c      	ldr	r2, [pc, #176]	@ (8003900 <UART_CheckIdleState+0x148>)
 8003850:	9200      	str	r2, [sp, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	f000 f858 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 8003858:	1e03      	subs	r3, r0, #0
 800385a:	d03b      	beq.n	80038d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385c:	f3ef 8310 	mrs	r3, PRIMASK
 8003860:	60fb      	str	r3, [r7, #12]
  return(result);
 8003862:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
 8003866:	2301      	movs	r3, #1
 8003868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f383 8810 	msr	PRIMASK, r3
}
 8003870:	46c0      	nop			@ (mov r8, r8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4921      	ldr	r1, [pc, #132]	@ (8003904 <UART_CheckIdleState+0x14c>)
 800387e:	400a      	ands	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f383 8810 	msr	PRIMASK, r3
}
 800388c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388e:	f3ef 8310 	mrs	r3, PRIMASK
 8003892:	61bb      	str	r3, [r7, #24]
  return(result);
 8003894:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
 8003898:	2301      	movs	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f383 8810 	msr	PRIMASK, r3
}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	438a      	bics	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	f383 8810 	msr	PRIMASK, r3
}
 80038be:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2280      	movs	r2, #128	@ 0x80
 80038c4:	2120      	movs	r1, #32
 80038c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2278      	movs	r2, #120	@ 0x78
 80038cc:	2100      	movs	r1, #0
 80038ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e011      	b.n	80038f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2280      	movs	r2, #128	@ 0x80
 80038de:	2120      	movs	r1, #32
 80038e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2278      	movs	r2, #120	@ 0x78
 80038f2:	2100      	movs	r1, #0
 80038f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b010      	add	sp, #64	@ 0x40
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	01ffffff 	.word	0x01ffffff
 8003904:	fffffedf 	.word	0xfffffedf

08003908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	1dfb      	adds	r3, r7, #7
 8003916:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003918:	e051      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3301      	adds	r3, #1
 800391e:	d04e      	beq.n	80039be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003920:	f7fd fbe4 	bl	80010ec <HAL_GetTick>
 8003924:	0002      	movs	r2, r0
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	429a      	cmp	r2, r3
 800392e:	d302      	bcc.n	8003936 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e051      	b.n	80039de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2204      	movs	r2, #4
 8003942:	4013      	ands	r3, r2
 8003944:	d03b      	beq.n	80039be <UART_WaitOnFlagUntilTimeout+0xb6>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b80      	cmp	r3, #128	@ 0x80
 800394a:	d038      	beq.n	80039be <UART_WaitOnFlagUntilTimeout+0xb6>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b40      	cmp	r3, #64	@ 0x40
 8003950:	d035      	beq.n	80039be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2208      	movs	r2, #8
 800395a:	4013      	ands	r3, r2
 800395c:	2b08      	cmp	r3, #8
 800395e:	d111      	bne.n	8003984 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2208      	movs	r2, #8
 8003966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	0018      	movs	r0, r3
 800396c:	f000 f83c 	bl	80039e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2284      	movs	r2, #132	@ 0x84
 8003974:	2108      	movs	r1, #8
 8003976:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2278      	movs	r2, #120	@ 0x78
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e02c      	b.n	80039de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	401a      	ands	r2, r3
 8003990:	2380      	movs	r3, #128	@ 0x80
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	429a      	cmp	r2, r3
 8003996:	d112      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2280      	movs	r2, #128	@ 0x80
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 f81f 	bl	80039e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2284      	movs	r2, #132	@ 0x84
 80039ae:	2120      	movs	r1, #32
 80039b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2278      	movs	r2, #120	@ 0x78
 80039b6:	2100      	movs	r1, #0
 80039b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e00f      	b.n	80039de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4013      	ands	r3, r2
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	425a      	negs	r2, r3
 80039ce:	4153      	adcs	r3, r2
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	001a      	movs	r2, r3
 80039d4:	1dfb      	adds	r3, r7, #7
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d09e      	beq.n	800391a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b004      	add	sp, #16
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08e      	sub	sp, #56	@ 0x38
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f0:	f3ef 8310 	mrs	r3, PRIMASK
 80039f4:	617b      	str	r3, [r7, #20]
  return(result);
 80039f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039fa:	2301      	movs	r3, #1
 80039fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4926      	ldr	r1, [pc, #152]	@ (8003aac <UART_EndRxTransfer+0xc4>)
 8003a12:	400a      	ands	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f383 8810 	msr	PRIMASK, r3
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a22:	f3ef 8310 	mrs	r3, PRIMASK
 8003a26:	623b      	str	r3, [r7, #32]
  return(result);
 8003a28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	f383 8810 	msr	PRIMASK, r3
}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2101      	movs	r1, #1
 8003a44:	438a      	bics	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d118      	bne.n	8003a8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a60:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a66:	2301      	movs	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f383 8810 	msr	PRIMASK, r3
}
 8003a70:	46c0      	nop			@ (mov r8, r8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2110      	movs	r1, #16
 8003a7e:	438a      	bics	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f383 8810 	msr	PRIMASK, r3
}
 8003a8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2280      	movs	r2, #128	@ 0x80
 8003a92:	2120      	movs	r1, #32
 8003a94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003aa2:	46c0      	nop			@ (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b00e      	add	sp, #56	@ 0x38
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	fffffedf 	.word	0xfffffedf

08003ab0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	1dbb      	adds	r3, r7, #6
 8003aba:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ac0:	1dbb      	adds	r3, r7, #6
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ac6:	2b84      	cmp	r3, #132	@ 0x84
 8003ac8:	d006      	beq.n	8003ad8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003aca:	1dbb      	adds	r3, r7, #6
 8003acc:	2200      	movs	r2, #0
 8003ace:	5e9a      	ldrsh	r2, [r3, r2]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	3303      	adds	r3, #3
 8003ad6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
}
 8003ada:	0018      	movs	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b004      	add	sp, #16
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ae6:	f000 fe7f 	bl	80047e8 <vTaskStartScheduler>
  
  return osOK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af4:	b089      	sub	sp, #36	@ 0x24
 8003af6:	af04      	add	r7, sp, #16
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <osThreadCreate+0x54>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01c      	beq.n	8003b46 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685c      	ldr	r4, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691e      	ldr	r6, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f7ff ffc6 	bl	8003ab0 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b2c:	6839      	ldr	r1, [r7, #0]
 8003b2e:	9302      	str	r3, [sp, #8]
 8003b30:	9201      	str	r2, [sp, #4]
 8003b32:	9000      	str	r0, [sp, #0]
 8003b34:	000b      	movs	r3, r1
 8003b36:	0032      	movs	r2, r6
 8003b38:	0029      	movs	r1, r5
 8003b3a:	0020      	movs	r0, r4
 8003b3c:	f000 fca6 	bl	800448c <xTaskCreateStatic>
 8003b40:	0003      	movs	r3, r0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e01d      	b.n	8003b82 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685c      	ldr	r4, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b52:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2208      	movs	r2, #8
 8003b58:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff ffa8 	bl	8003ab0 <makeFreeRtosPriority>
 8003b60:	0001      	movs	r1, r0
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	230c      	movs	r3, #12
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	9100      	str	r1, [sp, #0]
 8003b6c:	0013      	movs	r3, r2
 8003b6e:	0032      	movs	r2, r6
 8003b70:	0029      	movs	r1, r5
 8003b72:	0020      	movs	r0, r4
 8003b74:	f000 fcd0 	bl	8004518 <xTaskCreate>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d001      	beq.n	8003b82 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b82:	68fb      	ldr	r3, [r7, #12]
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b005      	add	sp, #20
 8003b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b8c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <osDelay+0x16>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	e000      	b.n	8003ba4 <osDelay+0x18>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fdf9 	bl	800479c <vTaskDelay>
  
  return osOK;
 8003baa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d011      	beq.n	8003bea <osMessageCreate+0x36>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00d      	beq.n	8003bea <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2400      	movs	r4, #0
 8003be0:	9400      	str	r4, [sp, #0]
 8003be2:	f000 f90d 	bl	8003e00 <xQueueGenericCreateStatic>
 8003be6:	0003      	movs	r3, r0
 8003be8:	e008      	b.n	8003bfc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	f000 f953 	bl	8003ea0 <xQueueGenericCreate>
 8003bfa:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b003      	add	sp, #12
 8003c02:	bd90      	pop	{r4, r7, pc}

08003c04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	001a      	movs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4252      	negs	r2, r2
 8003c1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3308      	adds	r3, #8
 8003c22:	001a      	movs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	001a      	movs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b002      	add	sp, #8
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	601a      	str	r2, [r3, #0]
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3301      	adds	r3, #1
 8003cae:	d103      	bne.n	8003cb8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e00c      	b.n	8003cd2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e002      	b.n	8003cc6 <vListInsert+0x2c>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d2f6      	bcs.n	8003cc0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b004      	add	sp, #16
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6892      	ldr	r2, [r2, #8]
 8003d1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6852      	ldr	r2, [r2, #4]
 8003d26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d103      	bne.n	8003d3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <xQueueGenericReset+0x1a>
 8003d6a:	b672      	cpsid	i
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	e7fd      	b.n	8003d6c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003d70:	f001 fa66 	bl	8005240 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	434b      	muls	r3, r1
 8003d82:	18d2      	adds	r2, r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	1e59      	subs	r1, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	434b      	muls	r3, r1
 8003da6:	18d2      	adds	r2, r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2244      	movs	r2, #68	@ 0x44
 8003db0:	21ff      	movs	r1, #255	@ 0xff
 8003db2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2245      	movs	r2, #69	@ 0x45
 8003db8:	21ff      	movs	r1, #255	@ 0xff
 8003dba:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d013      	beq.n	8003df2 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3310      	adds	r3, #16
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 ff2a 	bl	8004c28 <xTaskRemoveFromEventList>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d00c      	beq.n	8003df2 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dd8:	f001 fa22 	bl	8005220 <vPortYield>
 8003ddc:	e009      	b.n	8003df2 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3310      	adds	r3, #16
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7ff ff0e 	bl	8003c04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3324      	adds	r3, #36	@ 0x24
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7ff ff09 	bl	8003c04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003df2:	f001 fa37 	bl	8005264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003df6:	2301      	movs	r3, #1
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b004      	add	sp, #16
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b089      	sub	sp, #36	@ 0x24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xQueueGenericCreateStatic+0x1a>
 8003e14:	b672      	cpsid	i
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	e7fd      	b.n	8003e16 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <xQueueGenericCreateStatic+0x26>
 8003e20:	b672      	cpsid	i
 8003e22:	46c0      	nop			@ (mov r8, r8)
 8003e24:	e7fd      	b.n	8003e22 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <xQueueGenericCreateStatic+0x32>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <xQueueGenericCreateStatic+0x36>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <xQueueGenericCreateStatic+0x38>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <xQueueGenericCreateStatic+0x42>
 8003e3c:	b672      	cpsid	i
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	e7fd      	b.n	8003e3e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <xQueueGenericCreateStatic+0x4e>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <xQueueGenericCreateStatic+0x52>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericCreateStatic+0x54>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <xQueueGenericCreateStatic+0x5e>
 8003e58:	b672      	cpsid	i
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	e7fd      	b.n	8003e5a <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e5e:	2348      	movs	r3, #72	@ 0x48
 8003e60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b48      	cmp	r3, #72	@ 0x48
 8003e66:	d002      	beq.n	8003e6e <xQueueGenericCreateStatic+0x6e>
 8003e68:	b672      	cpsid	i
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	e7fd      	b.n	8003e6a <xQueueGenericCreateStatic+0x6a>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2246      	movs	r2, #70	@ 0x46
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e80:	2328      	movs	r3, #40	@ 0x28
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	781c      	ldrb	r4, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	0023      	movs	r3, r4
 8003e92:	f000 f83c 	bl	8003f0e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e96:	697b      	ldr	r3, [r7, #20]
	}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b007      	add	sp, #28
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b08b      	sub	sp, #44	@ 0x2c
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	1dfb      	adds	r3, r7, #7
 8003eac:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <xQueueGenericCreate+0x1a>
 8003eb4:	b672      	cpsid	i
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	e7fd      	b.n	8003eb6 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <xQueueGenericCreate+0x26>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e003      	b.n	8003ece <xQueueGenericCreate+0x2e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	4353      	muls	r3, r2
 8003ecc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3348      	adds	r3, #72	@ 0x48
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f001 fa4c 	bl	8005370 <pvPortMalloc>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d010      	beq.n	8003f04 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3348      	adds	r3, #72	@ 0x48
 8003ee6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2246      	movs	r2, #70	@ 0x46
 8003eec:	2100      	movs	r1, #0
 8003eee:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ef0:	1dfb      	adds	r3, r7, #7
 8003ef2:	781c      	ldrb	r4, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	0023      	movs	r3, r4
 8003f00:	f000 f805 	bl	8003f0e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f04:	69bb      	ldr	r3, [r7, #24]
	}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b009      	add	sp, #36	@ 0x24
 8003f0c:	bd90      	pop	{r4, r7, pc}

08003f0e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	1cfb      	adds	r3, r7, #3
 8003f1e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e002      	b.n	8003f34 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2101      	movs	r1, #1
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff ff06 	bl	8003d56 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b004      	add	sp, #16
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08a      	sub	sp, #40	@ 0x28
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f60:	2300      	movs	r3, #0
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <xQueueGenericSend+0x22>
 8003f6e:	b672      	cpsid	i
 8003f70:	46c0      	nop			@ (mov r8, r8)
 8003f72:	e7fd      	b.n	8003f70 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d103      	bne.n	8003f82 <xQueueGenericSend+0x30>
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <xQueueGenericSend+0x34>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <xQueueGenericSend+0x36>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <xQueueGenericSend+0x40>
 8003f8c:	b672      	cpsid	i
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	e7fd      	b.n	8003f8e <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d103      	bne.n	8003fa0 <xQueueGenericSend+0x4e>
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <xQueueGenericSend+0x52>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <xQueueGenericSend+0x54>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <xQueueGenericSend+0x5e>
 8003faa:	b672      	cpsid	i
 8003fac:	46c0      	nop			@ (mov r8, r8)
 8003fae:	e7fd      	b.n	8003fac <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fb0:	f000 ffdc 	bl	8004f6c <xTaskGetSchedulerState>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d102      	bne.n	8003fbe <xQueueGenericSend+0x6c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <xQueueGenericSend+0x70>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <xQueueGenericSend+0x72>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <xQueueGenericSend+0x7c>
 8003fc8:	b672      	cpsid	i
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	e7fd      	b.n	8003fca <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fce:	f001 f937 	bl	8005240 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <xQueueGenericSend+0x92>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d11e      	bne.n	8004022 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 f931 	bl	8004252 <prvCopyDataToQueue>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	3324      	adds	r3, #36	@ 0x24
 8004000:	0018      	movs	r0, r3
 8004002:	f000 fe11 	bl	8004c28 <xTaskRemoveFromEventList>
 8004006:	1e03      	subs	r3, r0, #0
 8004008:	d007      	beq.n	800401a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800400a:	f001 f909 	bl	8005220 <vPortYield>
 800400e:	e004      	b.n	800401a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004016:	f001 f903 	bl	8005220 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800401a:	f001 f923 	bl	8005264 <vPortExitCritical>
				return pdPASS;
 800401e:	2301      	movs	r3, #1
 8004020:	e05b      	b.n	80040da <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d103      	bne.n	8004030 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004028:	f001 f91c 	bl	8005264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800402c:	2300      	movs	r3, #0
 800402e:	e054      	b.n	80040da <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004036:	2314      	movs	r3, #20
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	0018      	movs	r0, r3
 800403c:	f000 fe52 	bl	8004ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004040:	2301      	movs	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004044:	f001 f90e 	bl	8005264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004048:	f000 fc26 	bl	8004898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800404c:	f001 f8f8 	bl	8005240 <vPortEnterCritical>
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	2244      	movs	r2, #68	@ 0x44
 8004054:	5c9b      	ldrb	r3, [r3, r2]
 8004056:	b25b      	sxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	d103      	bne.n	8004064 <xQueueGenericSend+0x112>
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	2244      	movs	r2, #68	@ 0x44
 8004060:	2100      	movs	r1, #0
 8004062:	5499      	strb	r1, [r3, r2]
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	2245      	movs	r2, #69	@ 0x45
 8004068:	5c9b      	ldrb	r3, [r3, r2]
 800406a:	b25b      	sxtb	r3, r3
 800406c:	3301      	adds	r3, #1
 800406e:	d103      	bne.n	8004078 <xQueueGenericSend+0x126>
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	2245      	movs	r2, #69	@ 0x45
 8004074:	2100      	movs	r1, #0
 8004076:	5499      	strb	r1, [r3, r2]
 8004078:	f001 f8f4 	bl	8005264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800407c:	1d3a      	adds	r2, r7, #4
 800407e:	2314      	movs	r3, #20
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	0011      	movs	r1, r2
 8004084:	0018      	movs	r0, r3
 8004086:	f000 fe41 	bl	8004d0c <xTaskCheckForTimeOut>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d11e      	bne.n	80040cc <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f9e3 	bl	800445c <prvIsQueueFull>
 8004096:	1e03      	subs	r3, r0, #0
 8004098:	d011      	beq.n	80040be <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	3310      	adds	r3, #16
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	0011      	movs	r1, r2
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 fda0 	bl	8004be8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f000 f962 	bl	8004374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040b0:	f000 fbfe 	bl	80048b0 <xTaskResumeAll>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d18a      	bne.n	8003fce <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 80040b8:	f001 f8b2 	bl	8005220 <vPortYield>
 80040bc:	e787      	b.n	8003fce <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 f957 	bl	8004374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040c6:	f000 fbf3 	bl	80048b0 <xTaskResumeAll>
 80040ca:	e780      	b.n	8003fce <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 f950 	bl	8004374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040d4:	f000 fbec 	bl	80048b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040d8:	2300      	movs	r3, #0
		}
	}
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b00a      	add	sp, #40	@ 0x28
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08a      	sub	sp, #40	@ 0x28
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <xQueueReceive+0x20>
 80040fc:	b672      	cpsid	i
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	e7fd      	b.n	80040fe <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d103      	bne.n	8004110 <xQueueReceive+0x2e>
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <xQueueReceive+0x32>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <xQueueReceive+0x34>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <xQueueReceive+0x3e>
 800411a:	b672      	cpsid	i
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	e7fd      	b.n	800411c <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004120:	f000 ff24 	bl	8004f6c <xTaskGetSchedulerState>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d102      	bne.n	800412e <xQueueReceive+0x4c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <xQueueReceive+0x50>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <xQueueReceive+0x52>
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <xQueueReceive+0x5c>
 8004138:	b672      	cpsid	i
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	e7fd      	b.n	800413a <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800413e:	f001 f87f 	bl	8005240 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004146:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01a      	beq.n	8004184 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	0011      	movs	r1, r2
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f8e7 	bl	8004328 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	1e5a      	subs	r2, r3, #1
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	3310      	adds	r3, #16
 800416e:	0018      	movs	r0, r3
 8004170:	f000 fd5a 	bl	8004c28 <xTaskRemoveFromEventList>
 8004174:	1e03      	subs	r3, r0, #0
 8004176:	d001      	beq.n	800417c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004178:	f001 f852 	bl	8005220 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800417c:	f001 f872 	bl	8005264 <vPortExitCritical>
				return pdPASS;
 8004180:	2301      	movs	r3, #1
 8004182:	e062      	b.n	800424a <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d103      	bne.n	8004192 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800418a:	f001 f86b 	bl	8005264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800418e:	2300      	movs	r3, #0
 8004190:	e05b      	b.n	800424a <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004198:	2314      	movs	r3, #20
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fda1 	bl	8004ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041a6:	f001 f85d 	bl	8005264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041aa:	f000 fb75 	bl	8004898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041ae:	f001 f847 	bl	8005240 <vPortEnterCritical>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2244      	movs	r2, #68	@ 0x44
 80041b6:	5c9b      	ldrb	r3, [r3, r2]
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	d103      	bne.n	80041c6 <xQueueReceive+0xe4>
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	2244      	movs	r2, #68	@ 0x44
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	2245      	movs	r2, #69	@ 0x45
 80041ca:	5c9b      	ldrb	r3, [r3, r2]
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	d103      	bne.n	80041da <xQueueReceive+0xf8>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2245      	movs	r2, #69	@ 0x45
 80041d6:	2100      	movs	r1, #0
 80041d8:	5499      	strb	r1, [r3, r2]
 80041da:	f001 f843 	bl	8005264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041de:	1d3a      	adds	r2, r7, #4
 80041e0:	2314      	movs	r3, #20
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	0011      	movs	r1, r2
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fd90 	bl	8004d0c <xTaskCheckForTimeOut>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d11e      	bne.n	800422e <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 f91c 	bl	8004430 <prvIsQueueEmpty>
 80041f8:	1e03      	subs	r3, r0, #0
 80041fa:	d011      	beq.n	8004220 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	3324      	adds	r3, #36	@ 0x24
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	0011      	movs	r1, r2
 8004204:	0018      	movs	r0, r3
 8004206:	f000 fcef 	bl	8004be8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 f8b1 	bl	8004374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004212:	f000 fb4d 	bl	80048b0 <xTaskResumeAll>
 8004216:	1e03      	subs	r3, r0, #0
 8004218:	d191      	bne.n	800413e <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800421a:	f001 f801 	bl	8005220 <vPortYield>
 800421e:	e78e      	b.n	800413e <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f8a6 	bl	8004374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004228:	f000 fb42 	bl	80048b0 <xTaskResumeAll>
 800422c:	e787      	b.n	800413e <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	0018      	movs	r0, r3
 8004232:	f000 f89f 	bl	8004374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004236:	f000 fb3b 	bl	80048b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	0018      	movs	r0, r3
 800423e:	f000 f8f7 	bl	8004430 <prvIsQueueEmpty>
 8004242:	1e03      	subs	r3, r0, #0
 8004244:	d100      	bne.n	8004248 <xQueueReceive+0x166>
 8004246:	e77a      	b.n	800413e <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004248:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b00a      	add	sp, #40	@ 0x28
 8004250:	bd80      	pop	{r7, pc}

08004252 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10e      	bne.n	800428e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d14e      	bne.n	8004316 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0018      	movs	r0, r3
 800427e:	f000 fe91 	bl	8004fa4 <xTaskPriorityDisinherit>
 8004282:	0003      	movs	r3, r0
 8004284:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	e043      	b.n	8004316 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d119      	bne.n	80042c8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6898      	ldr	r0, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	0019      	movs	r1, r3
 80042a0:	f001 fc13 	bl	8005aca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	18d2      	adds	r2, r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d32b      	bcc.n	8004316 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	e026      	b.n	8004316 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68d8      	ldr	r0, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	0019      	movs	r1, r3
 80042d4:	f001 fbf9 	bl	8005aca <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	425b      	negs	r3, r3
 80042e2:	18d2      	adds	r2, r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d207      	bcs.n	8004304 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	425b      	negs	r3, r3
 80042fe:	18d2      	adds	r2, r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d105      	bne.n	8004316 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3b01      	subs	r3, #1
 8004314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800431e:	697b      	ldr	r3, [r7, #20]
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b006      	add	sp, #24
 8004326:	bd80      	pop	{r7, pc}

08004328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	18d2      	adds	r2, r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	d303      	bcc.n	800435c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68d9      	ldr	r1, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	0018      	movs	r0, r3
 8004368:	f001 fbaf 	bl	8005aca <memcpy>
	}
}
 800436c:	46c0      	nop			@ (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800437c:	f000 ff60 	bl	8005240 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004380:	230f      	movs	r3, #15
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	2145      	movs	r1, #69	@ 0x45
 8004388:	5c52      	ldrb	r2, [r2, r1]
 800438a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800438c:	e013      	b.n	80043b6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3324      	adds	r3, #36	@ 0x24
 800439a:	0018      	movs	r0, r3
 800439c:	f000 fc44 	bl	8004c28 <xTaskRemoveFromEventList>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d001      	beq.n	80043a8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043a4:	f000 fd04 	bl	8004db0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043a8:	210f      	movs	r1, #15
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	187b      	adds	r3, r7, r1
 80043b4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043b6:	230f      	movs	r3, #15
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	dce5      	bgt.n	800438e <prvUnlockQueue+0x1a>
 80043c2:	e000      	b.n	80043c6 <prvUnlockQueue+0x52>
					break;
 80043c4:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2245      	movs	r2, #69	@ 0x45
 80043ca:	21ff      	movs	r1, #255	@ 0xff
 80043cc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80043ce:	f000 ff49 	bl	8005264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043d2:	f000 ff35 	bl	8005240 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043d6:	230e      	movs	r3, #14
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	2144      	movs	r1, #68	@ 0x44
 80043de:	5c52      	ldrb	r2, [r2, r1]
 80043e0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043e2:	e013      	b.n	800440c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d016      	beq.n	800441a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3310      	adds	r3, #16
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 fc19 	bl	8004c28 <xTaskRemoveFromEventList>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d001      	beq.n	80043fe <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80043fa:	f000 fcd9 	bl	8004db0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043fe:	210e      	movs	r1, #14
 8004400:	187b      	adds	r3, r7, r1
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	3b01      	subs	r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	187b      	adds	r3, r7, r1
 800440a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800440c:	230e      	movs	r3, #14
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b25b      	sxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	dce5      	bgt.n	80043e4 <prvUnlockQueue+0x70>
 8004418:	e000      	b.n	800441c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800441a:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2244      	movs	r2, #68	@ 0x44
 8004420:	21ff      	movs	r1, #255	@ 0xff
 8004422:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004424:	f000 ff1e 	bl	8005264 <vPortExitCritical>
}
 8004428:	46c0      	nop			@ (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b004      	add	sp, #16
 800442e:	bd80      	pop	{r7, pc}

08004430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004438:	f000 ff02 	bl	8005240 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e001      	b.n	800444e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800444e:	f000 ff09 	bl	8005264 <vPortExitCritical>

	return xReturn;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	b004      	add	sp, #16
 800445a:	bd80      	pop	{r7, pc}

0800445c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004464:	f000 feec 	bl	8005240 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004470:	429a      	cmp	r2, r3
 8004472:	d102      	bne.n	800447a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e001      	b.n	800447e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800447e:	f000 fef1 	bl	8005264 <vPortExitCritical>

	return xReturn;
 8004482:	68fb      	ldr	r3, [r7, #12]
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b004      	add	sp, #16
 800448a:	bd80      	pop	{r7, pc}

0800448c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b08d      	sub	sp, #52	@ 0x34
 8004490:	af04      	add	r7, sp, #16
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800449a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <xTaskCreateStatic+0x1a>
 80044a0:	b672      	cpsid	i
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	e7fd      	b.n	80044a2 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80044a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <xTaskCreateStatic+0x26>
 80044ac:	b672      	cpsid	i
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	e7fd      	b.n	80044ae <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044b2:	23a0      	movs	r3, #160	@ 0xa0
 80044b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80044ba:	d002      	beq.n	80044c2 <xTaskCreateStatic+0x36>
 80044bc:	b672      	cpsid	i
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	e7fd      	b.n	80044be <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <xTaskCreateStatic+0x7e>
 80044c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01d      	beq.n	800450a <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	229d      	movs	r2, #157	@ 0x9d
 80044dc:	2102      	movs	r1, #2
 80044de:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044e0:	683c      	ldr	r4, [r7, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	2300      	movs	r3, #0
 80044ea:	9303      	str	r3, [sp, #12]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	9302      	str	r3, [sp, #8]
 80044f0:	2318      	movs	r3, #24
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	0023      	movs	r3, r4
 80044fc:	f000 f858 	bl	80045b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	0018      	movs	r0, r3
 8004504:	f000 f8e6 	bl	80046d4 <prvAddNewTaskToReadyList>
 8004508:	e001      	b.n	800450e <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800450e:	69bb      	ldr	r3, [r7, #24]
	}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	b009      	add	sp, #36	@ 0x24
 8004516:	bd90      	pop	{r4, r7, pc}

08004518 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b08d      	sub	sp, #52	@ 0x34
 800451c:	af04      	add	r7, sp, #16
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	1dbb      	adds	r3, r7, #6
 8004526:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004528:	1dbb      	adds	r3, r7, #6
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	0018      	movs	r0, r3
 8004530:	f000 ff1e 	bl	8005370 <pvPortMalloc>
 8004534:	0003      	movs	r3, r0
 8004536:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d010      	beq.n	8004560 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800453e:	20a0      	movs	r0, #160	@ 0xa0
 8004540:	f000 ff16 	bl	8005370 <pvPortMalloc>
 8004544:	0003      	movs	r3, r0
 8004546:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
 8004554:	e006      	b.n	8004564 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	0018      	movs	r0, r3
 800455a:	f000 ffb1 	bl	80054c0 <vPortFree>
 800455e:	e001      	b.n	8004564 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01a      	beq.n	80045a0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	229d      	movs	r2, #157	@ 0x9d
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004572:	1dbb      	adds	r3, r7, #6
 8004574:	881a      	ldrh	r2, [r3, #0]
 8004576:	683c      	ldr	r4, [r7, #0]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	2300      	movs	r3, #0
 800457e:	9303      	str	r3, [sp, #12]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	9302      	str	r3, [sp, #8]
 8004584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	0023      	movs	r3, r4
 800458e:	f000 f80f 	bl	80045b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 f89d 	bl	80046d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e002      	b.n	80045a6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045a0:	2301      	movs	r3, #1
 80045a2:	425b      	negs	r3, r3
 80045a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045a6:	69bb      	ldr	r3, [r7, #24]
	}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b009      	add	sp, #36	@ 0x24
 80045ae:	bd90      	pop	{r4, r7, pc}

080045b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80045be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	493f      	ldr	r1, [pc, #252]	@ (80046c4 <prvInitialiseNewTask+0x114>)
 80045c6:	468c      	mov	ip, r1
 80045c8:	4463      	add	r3, ip
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	18d3      	adds	r3, r2, r3
 80045ce:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2207      	movs	r2, #7
 80045d4:	4393      	bics	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2207      	movs	r2, #7
 80045dc:	4013      	ands	r3, r2
 80045de:	d002      	beq.n	80045e6 <prvInitialiseNewTask+0x36>
 80045e0:	b672      	cpsid	i
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	e7fd      	b.n	80045e2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e013      	b.n	8004614 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	18d3      	adds	r3, r2, r3
 80045f2:	7818      	ldrb	r0, [r3, #0]
 80045f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045f6:	2134      	movs	r1, #52	@ 0x34
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	18d3      	adds	r3, r2, r3
 80045fc:	185b      	adds	r3, r3, r1
 80045fe:	1c02      	adds	r2, r0, #0
 8004600:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	18d3      	adds	r3, r2, r3
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	3301      	adds	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b0f      	cmp	r3, #15
 8004618:	d9e8      	bls.n	80045ec <prvInitialiseNewTask+0x3c>
 800461a:	e000      	b.n	800461e <prvInitialiseNewTask+0x6e>
		{
			break;
 800461c:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	2243      	movs	r2, #67	@ 0x43
 8004622:	2100      	movs	r1, #0
 8004624:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	2b06      	cmp	r3, #6
 800462a:	d901      	bls.n	8004630 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800462c:	2306      	movs	r3, #6
 800462e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	6a3a      	ldr	r2, [r7, #32]
 8004634:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004638:	6a3a      	ldr	r2, [r7, #32]
 800463a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800463c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463e:	2200      	movs	r2, #0
 8004640:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	3304      	adds	r3, #4
 8004646:	0018      	movs	r0, r3
 8004648:	f7ff fafa 	bl	8003c40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	3318      	adds	r3, #24
 8004650:	0018      	movs	r0, r3
 8004652:	f7ff faf5 	bl	8003c40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800465a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	2207      	movs	r2, #7
 8004660:	1ad2      	subs	r2, r2, r3
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800466a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	2298      	movs	r2, #152	@ 0x98
 8004670:	2100      	movs	r1, #0
 8004672:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	229c      	movs	r2, #156	@ 0x9c
 8004678:	2100      	movs	r1, #0
 800467a:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467e:	334c      	adds	r3, #76	@ 0x4c
 8004680:	224c      	movs	r2, #76	@ 0x4c
 8004682:	2100      	movs	r1, #0
 8004684:	0018      	movs	r0, r3
 8004686:	f001 f93d 	bl	8005904 <memset>
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	4a0e      	ldr	r2, [pc, #56]	@ (80046c8 <prvInitialiseNewTask+0x118>)
 800468e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	4a0e      	ldr	r2, [pc, #56]	@ (80046cc <prvInitialiseNewTask+0x11c>)
 8004694:	655a      	str	r2, [r3, #84]	@ 0x54
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <prvInitialiseNewTask+0x120>)
 800469a:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 fd30 	bl	8005108 <pxPortInitialiseStack>
 80046a8:	0002      	movs	r2, r0
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	46bd      	mov	sp, r7
 80046be:	b006      	add	sp, #24
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	3fffffff 	.word	0x3fffffff
 80046c8:	200011bc 	.word	0x200011bc
 80046cc:	20001224 	.word	0x20001224
 80046d0:	2000128c 	.word	0x2000128c

080046d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046dc:	f000 fdb0 	bl	8005240 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046e0:	4b28      	ldr	r3, [pc, #160]	@ (8004784 <prvAddNewTaskToReadyList+0xb0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <prvAddNewTaskToReadyList+0xb0>)
 80046e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80046ea:	4b27      	ldr	r3, [pc, #156]	@ (8004788 <prvAddNewTaskToReadyList+0xb4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046f2:	4b25      	ldr	r3, [pc, #148]	@ (8004788 <prvAddNewTaskToReadyList+0xb4>)
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046f8:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <prvAddNewTaskToReadyList+0xb0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d110      	bne.n	8004722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004700:	f000 fb70 	bl	8004de4 <prvInitialiseTaskLists>
 8004704:	e00d      	b.n	8004722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004706:	4b21      	ldr	r3, [pc, #132]	@ (800478c <prvAddNewTaskToReadyList+0xb8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800470e:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <prvAddNewTaskToReadyList+0xb4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	429a      	cmp	r2, r3
 800471a:	d802      	bhi.n	8004722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800471c:	4b1a      	ldr	r3, [pc, #104]	@ (8004788 <prvAddNewTaskToReadyList+0xb4>)
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <prvAddNewTaskToReadyList+0xbc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <prvAddNewTaskToReadyList+0xbc>)
 800472a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004730:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <prvAddNewTaskToReadyList+0xc0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d903      	bls.n	8004740 <prvAddNewTaskToReadyList+0x6c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473c:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <prvAddNewTaskToReadyList+0xc0>)
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004744:	0013      	movs	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	189b      	adds	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4a12      	ldr	r2, [pc, #72]	@ (8004798 <prvAddNewTaskToReadyList+0xc4>)
 800474e:	189a      	adds	r2, r3, r2
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	0019      	movs	r1, r3
 8004756:	0010      	movs	r0, r2
 8004758:	f7ff fa7d 	bl	8003c56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800475c:	f000 fd82 	bl	8005264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004760:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <prvAddNewTaskToReadyList+0xb8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004768:	4b07      	ldr	r3, [pc, #28]	@ (8004788 <prvAddNewTaskToReadyList+0xb4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	429a      	cmp	r2, r3
 8004774:	d201      	bcs.n	800477a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004776:	f000 fd53 	bl	8005220 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800477a:	46c0      	nop			@ (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	20000578 	.word	0x20000578
 8004788:	20000478 	.word	0x20000478
 800478c:	20000584 	.word	0x20000584
 8004790:	20000594 	.word	0x20000594
 8004794:	20000580 	.word	0x20000580
 8004798:	2000047c 	.word	0x2000047c

0800479c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <vTaskDelay+0x48>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <vTaskDelay+0x20>
 80047b6:	b672      	cpsid	i
 80047b8:	46c0      	nop			@ (mov r8, r8)
 80047ba:	e7fd      	b.n	80047b8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80047bc:	f000 f86c 	bl	8004898 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2100      	movs	r1, #0
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 fc4b 	bl	8005060 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047ca:	f000 f871 	bl	80048b0 <xTaskResumeAll>
 80047ce:	0003      	movs	r3, r0
 80047d0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80047d8:	f000 fd22 	bl	8005220 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047dc:	46c0      	nop			@ (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b004      	add	sp, #16
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	200005a0 	.word	0x200005a0

080047e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b089      	sub	sp, #36	@ 0x24
 80047ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047f6:	003a      	movs	r2, r7
 80047f8:	1d39      	adds	r1, r7, #4
 80047fa:	2308      	movs	r3, #8
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	0018      	movs	r0, r3
 8004800:	f7fb fd18 	bl	8000234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004804:	683c      	ldr	r4, [r7, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	491b      	ldr	r1, [pc, #108]	@ (8004878 <vTaskStartScheduler+0x90>)
 800480c:	481b      	ldr	r0, [pc, #108]	@ (800487c <vTaskStartScheduler+0x94>)
 800480e:	9202      	str	r2, [sp, #8]
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	2300      	movs	r3, #0
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	0022      	movs	r2, r4
 800481a:	f7ff fe37 	bl	800448c <xTaskCreateStatic>
 800481e:	0002      	movs	r2, r0
 8004820:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <vTaskStartScheduler+0x98>)
 8004822:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004824:	4b16      	ldr	r3, [pc, #88]	@ (8004880 <vTaskStartScheduler+0x98>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800482c:	2301      	movs	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e001      	b.n	8004836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d113      	bne.n	8004864 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800483c:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800483e:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <vTaskStartScheduler+0x9c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	334c      	adds	r3, #76	@ 0x4c
 8004844:	001a      	movs	r2, r3
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <vTaskStartScheduler+0xa0>)
 8004848:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800484a:	4b10      	ldr	r3, [pc, #64]	@ (800488c <vTaskStartScheduler+0xa4>)
 800484c:	2201      	movs	r2, #1
 800484e:	4252      	negs	r2, r2
 8004850:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004852:	4b0f      	ldr	r3, [pc, #60]	@ (8004890 <vTaskStartScheduler+0xa8>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004858:	4b0e      	ldr	r3, [pc, #56]	@ (8004894 <vTaskStartScheduler+0xac>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800485e:	f000 fcbb 	bl	80051d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004862:	e005      	b.n	8004870 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	d102      	bne.n	8004870 <vTaskStartScheduler+0x88>
 800486a:	b672      	cpsid	i
 800486c:	46c0      	nop			@ (mov r8, r8)
 800486e:	e7fd      	b.n	800486c <vTaskStartScheduler+0x84>
}
 8004870:	46c0      	nop			@ (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b005      	add	sp, #20
 8004876:	bd90      	pop	{r4, r7, pc}
 8004878:	0800670c 	.word	0x0800670c
 800487c:	08004dc5 	.word	0x08004dc5
 8004880:	2000059c 	.word	0x2000059c
 8004884:	20000478 	.word	0x20000478
 8004888:	2000002c 	.word	0x2000002c
 800488c:	20000598 	.word	0x20000598
 8004890:	20000584 	.word	0x20000584
 8004894:	2000057c 	.word	0x2000057c

08004898 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800489c:	4b03      	ldr	r3, [pc, #12]	@ (80048ac <vTaskSuspendAll+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	4b02      	ldr	r3, [pc, #8]	@ (80048ac <vTaskSuspendAll+0x14>)
 80048a4:	601a      	str	r2, [r3, #0]
}
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200005a0 	.word	0x200005a0

080048b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048be:	4b3a      	ldr	r3, [pc, #232]	@ (80049a8 <xTaskResumeAll+0xf8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <xTaskResumeAll+0x1c>
 80048c6:	b672      	cpsid	i
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	e7fd      	b.n	80048c8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048cc:	f000 fcb8 	bl	8005240 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048d0:	4b35      	ldr	r3, [pc, #212]	@ (80049a8 <xTaskResumeAll+0xf8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	4b34      	ldr	r3, [pc, #208]	@ (80049a8 <xTaskResumeAll+0xf8>)
 80048d8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048da:	4b33      	ldr	r3, [pc, #204]	@ (80049a8 <xTaskResumeAll+0xf8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d15b      	bne.n	800499a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048e2:	4b32      	ldr	r3, [pc, #200]	@ (80049ac <xTaskResumeAll+0xfc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d057      	beq.n	800499a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ea:	e02f      	b.n	800494c <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048ec:	4b30      	ldr	r3, [pc, #192]	@ (80049b0 <xTaskResumeAll+0x100>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3318      	adds	r3, #24
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7ff fa04 	bl	8003d06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3304      	adds	r3, #4
 8004902:	0018      	movs	r0, r3
 8004904:	f7ff f9ff 	bl	8003d06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490c:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <xTaskResumeAll+0x104>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d903      	bls.n	800491c <xTaskResumeAll+0x6c>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004918:	4b26      	ldr	r3, [pc, #152]	@ (80049b4 <xTaskResumeAll+0x104>)
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	0013      	movs	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	189b      	adds	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4a23      	ldr	r2, [pc, #140]	@ (80049b8 <xTaskResumeAll+0x108>)
 800492a:	189a      	adds	r2, r3, r2
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3304      	adds	r3, #4
 8004930:	0019      	movs	r1, r3
 8004932:	0010      	movs	r0, r2
 8004934:	f7ff f98f 	bl	8003c56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493c:	4b1f      	ldr	r3, [pc, #124]	@ (80049bc <xTaskResumeAll+0x10c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8004946:	4b1e      	ldr	r3, [pc, #120]	@ (80049c0 <xTaskResumeAll+0x110>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800494c:	4b18      	ldr	r3, [pc, #96]	@ (80049b0 <xTaskResumeAll+0x100>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1cb      	bne.n	80048ec <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800495a:	f000 fae3 	bl	8004f24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800495e:	4b19      	ldr	r3, [pc, #100]	@ (80049c4 <xTaskResumeAll+0x114>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00f      	beq.n	800498a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800496a:	f000 f82d 	bl	80049c8 <xTaskIncrementTick>
 800496e:	1e03      	subs	r3, r0, #0
 8004970:	d002      	beq.n	8004978 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8004972:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <xTaskResumeAll+0x110>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3b01      	subs	r3, #1
 800497c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1f2      	bne.n	800496a <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8004984:	4b0f      	ldr	r3, [pc, #60]	@ (80049c4 <xTaskResumeAll+0x114>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800498a:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <xTaskResumeAll+0x110>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004992:	2301      	movs	r3, #1
 8004994:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004996:	f000 fc43 	bl	8005220 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800499a:	f000 fc63 	bl	8005264 <vPortExitCritical>

	return xAlreadyYielded;
 800499e:	68bb      	ldr	r3, [r7, #8]
}
 80049a0:	0018      	movs	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b004      	add	sp, #16
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200005a0 	.word	0x200005a0
 80049ac:	20000578 	.word	0x20000578
 80049b0:	20000538 	.word	0x20000538
 80049b4:	20000580 	.word	0x20000580
 80049b8:	2000047c 	.word	0x2000047c
 80049bc:	20000478 	.word	0x20000478
 80049c0:	2000058c 	.word	0x2000058c
 80049c4:	20000588 	.word	0x20000588

080049c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004b08 <xTaskIncrementTick+0x140>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d000      	beq.n	80049dc <xTaskIncrementTick+0x14>
 80049da:	e084      	b.n	8004ae6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049dc:	4b4b      	ldr	r3, [pc, #300]	@ (8004b0c <xTaskIncrementTick+0x144>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049e4:	4b49      	ldr	r3, [pc, #292]	@ (8004b0c <xTaskIncrementTick+0x144>)
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d118      	bne.n	8004a22 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049f0:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <xTaskIncrementTick+0x148>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <xTaskIncrementTick+0x38>
 80049fa:	b672      	cpsid	i
 80049fc:	46c0      	nop			@ (mov r8, r8)
 80049fe:	e7fd      	b.n	80049fc <xTaskIncrementTick+0x34>
 8004a00:	4b43      	ldr	r3, [pc, #268]	@ (8004b10 <xTaskIncrementTick+0x148>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <xTaskIncrementTick+0x14c>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b41      	ldr	r3, [pc, #260]	@ (8004b10 <xTaskIncrementTick+0x148>)
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <xTaskIncrementTick+0x14c>)
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	4b40      	ldr	r3, [pc, #256]	@ (8004b18 <xTaskIncrementTick+0x150>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b18 <xTaskIncrementTick+0x150>)
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	f000 fa81 	bl	8004f24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a22:	4b3e      	ldr	r3, [pc, #248]	@ (8004b1c <xTaskIncrementTick+0x154>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d34e      	bcc.n	8004aca <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a2c:	4b38      	ldr	r3, [pc, #224]	@ (8004b10 <xTaskIncrementTick+0x148>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <xTaskIncrementTick+0x72>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xTaskIncrementTick+0x74>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a40:	4b36      	ldr	r3, [pc, #216]	@ (8004b1c <xTaskIncrementTick+0x154>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	4252      	negs	r2, r2
 8004a46:	601a      	str	r2, [r3, #0]
					break;
 8004a48:	e03f      	b.n	8004aca <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a4a:	4b31      	ldr	r3, [pc, #196]	@ (8004b10 <xTaskIncrementTick+0x148>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d203      	bcs.n	8004a6a <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a62:	4b2e      	ldr	r3, [pc, #184]	@ (8004b1c <xTaskIncrementTick+0x154>)
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]
						break;
 8004a68:	e02f      	b.n	8004aca <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7ff f949 	bl	8003d06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	3318      	adds	r3, #24
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7ff f940 	bl	8003d06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8a:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <xTaskIncrementTick+0x158>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d903      	bls.n	8004a9a <xTaskIncrementTick+0xd2>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a96:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <xTaskIncrementTick+0x158>)
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9e:	0013      	movs	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b24 <xTaskIncrementTick+0x15c>)
 8004aa8:	189a      	adds	r2, r3, r2
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3304      	adds	r3, #4
 8004aae:	0019      	movs	r1, r3
 8004ab0:	0010      	movs	r0, r2
 8004ab2:	f7ff f8d0 	bl	8003c56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aba:	4b1b      	ldr	r3, [pc, #108]	@ (8004b28 <xTaskIncrementTick+0x160>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3b3      	bcc.n	8004a2c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac8:	e7b0      	b.n	8004a2c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aca:	4b17      	ldr	r3, [pc, #92]	@ (8004b28 <xTaskIncrementTick+0x160>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad0:	4914      	ldr	r1, [pc, #80]	@ (8004b24 <xTaskIncrementTick+0x15c>)
 8004ad2:	0013      	movs	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	189b      	adds	r3, r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	585b      	ldr	r3, [r3, r1]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d907      	bls.n	8004af0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e004      	b.n	8004af0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ae6:	4b11      	ldr	r3, [pc, #68]	@ (8004b2c <xTaskIncrementTick+0x164>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <xTaskIncrementTick+0x164>)
 8004aee:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004af0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b30 <xTaskIncrementTick+0x168>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004afc:	697b      	ldr	r3, [r7, #20]
}
 8004afe:	0018      	movs	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b006      	add	sp, #24
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	200005a0 	.word	0x200005a0
 8004b0c:	2000057c 	.word	0x2000057c
 8004b10:	20000530 	.word	0x20000530
 8004b14:	20000534 	.word	0x20000534
 8004b18:	20000590 	.word	0x20000590
 8004b1c:	20000598 	.word	0x20000598
 8004b20:	20000580 	.word	0x20000580
 8004b24:	2000047c 	.word	0x2000047c
 8004b28:	20000478 	.word	0x20000478
 8004b2c:	20000588 	.word	0x20000588
 8004b30:	2000058c 	.word	0x2000058c

08004b34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b3a:	4b25      	ldr	r3, [pc, #148]	@ (8004bd0 <vTaskSwitchContext+0x9c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b42:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <vTaskSwitchContext+0xa0>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b48:	e03e      	b.n	8004bc8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004b4a:	4b22      	ldr	r3, [pc, #136]	@ (8004bd4 <vTaskSwitchContext+0xa0>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b50:	4b21      	ldr	r3, [pc, #132]	@ (8004bd8 <vTaskSwitchContext+0xa4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	e008      	b.n	8004b6a <vTaskSwitchContext+0x36>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <vTaskSwitchContext+0x30>
 8004b5e:	b672      	cpsid	i
 8004b60:	46c0      	nop			@ (mov r8, r8)
 8004b62:	e7fd      	b.n	8004b60 <vTaskSwitchContext+0x2c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	491c      	ldr	r1, [pc, #112]	@ (8004bdc <vTaskSwitchContext+0xa8>)
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	0013      	movs	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	585b      	ldr	r3, [r3, r1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0ed      	beq.n	8004b58 <vTaskSwitchContext+0x24>
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	0013      	movs	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4a15      	ldr	r2, [pc, #84]	@ (8004bdc <vTaskSwitchContext+0xa8>)
 8004b88:	189b      	adds	r3, r3, r2
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d104      	bne.n	8004bac <vTaskSwitchContext+0x78>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <vTaskSwitchContext+0xac>)
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	4b08      	ldr	r3, [pc, #32]	@ (8004bd8 <vTaskSwitchContext+0xa4>)
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bbc:	4b08      	ldr	r3, [pc, #32]	@ (8004be0 <vTaskSwitchContext+0xac>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	334c      	adds	r3, #76	@ 0x4c
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <vTaskSwitchContext+0xb0>)
 8004bc6:	601a      	str	r2, [r3, #0]
}
 8004bc8:	46c0      	nop			@ (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	200005a0 	.word	0x200005a0
 8004bd4:	2000058c 	.word	0x2000058c
 8004bd8:	20000580 	.word	0x20000580
 8004bdc:	2000047c 	.word	0x2000047c
 8004be0:	20000478 	.word	0x20000478
 8004be4:	2000002c 	.word	0x2000002c

08004be8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <vTaskPlaceOnEventList+0x16>
 8004bf8:	b672      	cpsid	i
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	e7fd      	b.n	8004bfa <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bfe:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <vTaskPlaceOnEventList+0x3c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3318      	adds	r3, #24
 8004c04:	001a      	movs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0011      	movs	r1, r2
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff f845 	bl	8003c9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2101      	movs	r1, #1
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 fa23 	bl	8005060 <prvAddCurrentTaskToDelayedList>
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	20000478 	.word	0x20000478

08004c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <xTaskRemoveFromEventList+0x1c>
 8004c3e:	b672      	cpsid	i
 8004c40:	46c0      	nop			@ (mov r8, r8)
 8004c42:	e7fd      	b.n	8004c40 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	3318      	adds	r3, #24
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7ff f85c 	bl	8003d06 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ccc <xTaskRemoveFromEventList+0xa4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11d      	bne.n	8004c92 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7ff f853 	bl	8003d06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c64:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd0 <xTaskRemoveFromEventList+0xa8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d903      	bls.n	8004c74 <xTaskRemoveFromEventList+0x4c>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c70:	4b17      	ldr	r3, [pc, #92]	@ (8004cd0 <xTaskRemoveFromEventList+0xa8>)
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	0013      	movs	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4a14      	ldr	r2, [pc, #80]	@ (8004cd4 <xTaskRemoveFromEventList+0xac>)
 8004c82:	189a      	adds	r2, r3, r2
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	3304      	adds	r3, #4
 8004c88:	0019      	movs	r1, r3
 8004c8a:	0010      	movs	r0, r2
 8004c8c:	f7fe ffe3 	bl	8003c56 <vListInsertEnd>
 8004c90:	e007      	b.n	8004ca2 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3318      	adds	r3, #24
 8004c96:	001a      	movs	r2, r3
 8004c98:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <xTaskRemoveFromEventList+0xb0>)
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7fe ffda 	bl	8003c56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <xTaskRemoveFromEventList+0xb4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d905      	bls.n	8004cbc <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <xTaskRemoveFromEventList+0xb8>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e001      	b.n	8004cc0 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b004      	add	sp, #16
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	200005a0 	.word	0x200005a0
 8004cd0:	20000580 	.word	0x20000580
 8004cd4:	2000047c 	.word	0x2000047c
 8004cd8:	20000538 	.word	0x20000538
 8004cdc:	20000478 	.word	0x20000478
 8004ce0:	2000058c 	.word	0x2000058c

08004ce4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <vTaskInternalSetTimeOutState+0x20>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cf4:	4b04      	ldr	r3, [pc, #16]	@ (8004d08 <vTaskInternalSetTimeOutState+0x24>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	605a      	str	r2, [r3, #4]
}
 8004cfc:	46c0      	nop			@ (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b002      	add	sp, #8
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000590 	.word	0x20000590
 8004d08:	2000057c 	.word	0x2000057c

08004d0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <xTaskCheckForTimeOut+0x16>
 8004d1c:	b672      	cpsid	i
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	e7fd      	b.n	8004d1e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <xTaskCheckForTimeOut+0x22>
 8004d28:	b672      	cpsid	i
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	e7fd      	b.n	8004d2a <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8004d2e:	f000 fa87 	bl	8005240 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d32:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <xTaskCheckForTimeOut+0x9c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3301      	adds	r3, #1
 8004d48:	d102      	bne.n	8004d50 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e024      	b.n	8004d9a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <xTaskCheckForTimeOut+0xa0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d007      	beq.n	8004d6c <xTaskCheckForTimeOut+0x60>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e016      	b.n	8004d9a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d20c      	bcs.n	8004d90 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad2      	subs	r2, r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7ff ffad 	bl	8004ce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e004      	b.n	8004d9a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004d9a:	f000 fa63 	bl	8005264 <vPortExitCritical>

	return xReturn;
 8004d9e:	697b      	ldr	r3, [r7, #20]
}
 8004da0:	0018      	movs	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b006      	add	sp, #24
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	2000057c 	.word	0x2000057c
 8004dac:	20000590 	.word	0x20000590

08004db0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004db4:	4b02      	ldr	r3, [pc, #8]	@ (8004dc0 <vTaskMissedYield+0x10>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	2000058c 	.word	0x2000058c

08004dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dcc:	f000 f84e 	bl	8004e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dd0:	4b03      	ldr	r3, [pc, #12]	@ (8004de0 <prvIdleTask+0x1c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d9f9      	bls.n	8004dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dd8:	f000 fa22 	bl	8005220 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004ddc:	e7f6      	b.n	8004dcc <prvIdleTask+0x8>
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	2000047c 	.word	0x2000047c

08004de4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dea:	2300      	movs	r3, #0
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	e00c      	b.n	8004e0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	0013      	movs	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <prvInitialiseTaskLists+0x68>)
 8004dfc:	189b      	adds	r3, r3, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7fe ff00 	bl	8003c04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3301      	adds	r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b06      	cmp	r3, #6
 8004e0e:	d9ef      	bls.n	8004df0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e10:	4b0f      	ldr	r3, [pc, #60]	@ (8004e50 <prvInitialiseTaskLists+0x6c>)
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7fe fef6 	bl	8003c04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e18:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <prvInitialiseTaskLists+0x70>)
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7fe fef2 	bl	8003c04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e20:	4b0d      	ldr	r3, [pc, #52]	@ (8004e58 <prvInitialiseTaskLists+0x74>)
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7fe feee 	bl	8003c04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e28:	4b0c      	ldr	r3, [pc, #48]	@ (8004e5c <prvInitialiseTaskLists+0x78>)
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f7fe feea 	bl	8003c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <prvInitialiseTaskLists+0x7c>)
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7fe fee6 	bl	8003c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <prvInitialiseTaskLists+0x80>)
 8004e3a:	4a05      	ldr	r2, [pc, #20]	@ (8004e50 <prvInitialiseTaskLists+0x6c>)
 8004e3c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <prvInitialiseTaskLists+0x84>)
 8004e40:	4a04      	ldr	r2, [pc, #16]	@ (8004e54 <prvInitialiseTaskLists+0x70>)
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	46c0      	nop			@ (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	2000047c 	.word	0x2000047c
 8004e50:	20000508 	.word	0x20000508
 8004e54:	2000051c 	.word	0x2000051c
 8004e58:	20000538 	.word	0x20000538
 8004e5c:	2000054c 	.word	0x2000054c
 8004e60:	20000564 	.word	0x20000564
 8004e64:	20000530 	.word	0x20000530
 8004e68:	20000534 	.word	0x20000534

08004e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e72:	e01a      	b.n	8004eaa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004e74:	f000 f9e4 	bl	8005240 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e78:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <prvCheckTasksWaitingTermination+0x50>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7fe ff3e 	bl	8003d06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <prvCheckTasksWaitingTermination+0x54>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	1e5a      	subs	r2, r3, #1
 8004e90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <prvCheckTasksWaitingTermination+0x54>)
 8004e92:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <prvCheckTasksWaitingTermination+0x58>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1e5a      	subs	r2, r3, #1
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <prvCheckTasksWaitingTermination+0x58>)
 8004e9c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004e9e:	f000 f9e1 	bl	8005264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f000 f80f 	bl	8004ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <prvCheckTasksWaitingTermination+0x58>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e0      	bne.n	8004e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004eb2:	46c0      	nop			@ (mov r8, r8)
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	2000054c 	.word	0x2000054c
 8004ec0:	20000578 	.word	0x20000578
 8004ec4:	20000560 	.word	0x20000560

08004ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	334c      	adds	r3, #76	@ 0x4c
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f000 fd2f 	bl	8005938 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	229d      	movs	r2, #157	@ 0x9d
 8004ede:	5c9b      	ldrb	r3, [r3, r2]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 fae9 	bl	80054c0 <vPortFree>
				vPortFree( pxTCB );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f000 fae5 	bl	80054c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ef6:	e011      	b.n	8004f1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	229d      	movs	r2, #157	@ 0x9d
 8004efc:	5c9b      	ldrb	r3, [r3, r2]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d104      	bne.n	8004f0c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	0018      	movs	r0, r3
 8004f06:	f000 fadb 	bl	80054c0 <vPortFree>
	}
 8004f0a:	e007      	b.n	8004f1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	229d      	movs	r2, #157	@ 0x9d
 8004f10:	5c9b      	ldrb	r3, [r3, r2]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d002      	beq.n	8004f1c <prvDeleteTCB+0x54>
 8004f16:	b672      	cpsid	i
 8004f18:	46c0      	nop			@ (mov r8, r8)
 8004f1a:	e7fd      	b.n	8004f18 <prvDeleteTCB+0x50>
	}
 8004f1c:	46c0      	nop			@ (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b002      	add	sp, #8
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f64 <prvResetNextTaskUnblockTime+0x40>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <prvResetNextTaskUnblockTime+0x14>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <prvResetNextTaskUnblockTime+0x16>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <prvResetNextTaskUnblockTime+0x44>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	4252      	negs	r2, r2
 8004f44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f46:	e008      	b.n	8004f5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f48:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <prvResetNextTaskUnblockTime+0x40>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <prvResetNextTaskUnblockTime+0x44>)
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b002      	add	sp, #8
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	20000530 	.word	0x20000530
 8004f68:	20000598 	.word	0x20000598

08004f6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f72:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <xTaskGetSchedulerState+0x30>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	e008      	b.n	8004f92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f80:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <xTaskGetSchedulerState+0x34>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	e001      	b.n	8004f92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f92:	687b      	ldr	r3, [r7, #4]
	}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b002      	add	sp, #8
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000584 	.word	0x20000584
 8004fa0:	200005a0 	.word	0x200005a0

08004fa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d046      	beq.n	8005048 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fba:	4b26      	ldr	r3, [pc, #152]	@ (8005054 <xTaskPriorityDisinherit+0xb0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d002      	beq.n	8004fca <xTaskPriorityDisinherit+0x26>
 8004fc4:	b672      	cpsid	i
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	e7fd      	b.n	8004fc6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <xTaskPriorityDisinherit+0x34>
 8004fd2:	b672      	cpsid	i
 8004fd4:	46c0      	nop			@ (mov r8, r8)
 8004fd6:	e7fd      	b.n	8004fd4 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fdc:	1e5a      	subs	r2, r3, #1
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d02c      	beq.n	8005048 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d128      	bne.n	8005048 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7fe fe83 	bl	8003d06 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	2207      	movs	r2, #7
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	4b0f      	ldr	r3, [pc, #60]	@ (8005058 <xTaskPriorityDisinherit+0xb4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d903      	bls.n	8005028 <xTaskPriorityDisinherit+0x84>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005024:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <xTaskPriorityDisinherit+0xb4>)
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502c:	0013      	movs	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	189b      	adds	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4a09      	ldr	r2, [pc, #36]	@ (800505c <xTaskPriorityDisinherit+0xb8>)
 8005036:	189a      	adds	r2, r3, r2
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	3304      	adds	r3, #4
 800503c:	0019      	movs	r1, r3
 800503e:	0010      	movs	r0, r2
 8005040:	f7fe fe09 	bl	8003c56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005044:	2301      	movs	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005048:	68fb      	ldr	r3, [r7, #12]
	}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b004      	add	sp, #16
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	20000478 	.word	0x20000478
 8005058:	20000580 	.word	0x20000580
 800505c:	2000047c 	.word	0x2000047c

08005060 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800506a:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005070:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3304      	adds	r3, #4
 8005076:	0018      	movs	r0, r3
 8005078:	f7fe fe45 	bl	8003d06 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3301      	adds	r3, #1
 8005080:	d10b      	bne.n	800509a <prvAddCurrentTaskToDelayedList+0x3a>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005088:	4b1a      	ldr	r3, [pc, #104]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005090:	0011      	movs	r1, r2
 8005092:	0018      	movs	r0, r3
 8005094:	f7fe fddf 	bl	8003c56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005098:	e026      	b.n	80050e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	18d3      	adds	r3, r2, r3
 80050a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050a2:	4b14      	ldr	r3, [pc, #80]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d209      	bcs.n	80050c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b2:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b0f      	ldr	r3, [pc, #60]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3304      	adds	r3, #4
 80050bc:	0019      	movs	r1, r3
 80050be:	0010      	movs	r0, r2
 80050c0:	f7fe fdeb 	bl	8003c9a <vListInsert>
}
 80050c4:	e010      	b.n	80050e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3304      	adds	r3, #4
 80050d0:	0019      	movs	r1, r3
 80050d2:	0010      	movs	r0, r2
 80050d4:	f7fe fde1 	bl	8003c9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d202      	bcs.n	80050e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050e2:	4b08      	ldr	r3, [pc, #32]	@ (8005104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	601a      	str	r2, [r3, #0]
}
 80050e8:	46c0      	nop			@ (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2000057c 	.word	0x2000057c
 80050f4:	20000478 	.word	0x20000478
 80050f8:	20000564 	.word	0x20000564
 80050fc:	20000534 	.word	0x20000534
 8005100:	20000530 	.word	0x20000530
 8005104:	20000598 	.word	0x20000598

08005108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3b04      	subs	r3, #4
 8005118:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2280      	movs	r2, #128	@ 0x80
 800511e:	0452      	lsls	r2, r2, #17
 8005120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3b04      	subs	r3, #4
 8005126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3b04      	subs	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005134:	4a08      	ldr	r2, [pc, #32]	@ (8005158 <pxPortInitialiseStack+0x50>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3b14      	subs	r3, #20
 800513e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3b20      	subs	r3, #32
 800514a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800514c:	68fb      	ldr	r3, [r7, #12]
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b004      	add	sp, #16
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			@ (mov r8, r8)
 8005158:	0800515d 	.word	0x0800515d

0800515c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005166:	4b08      	ldr	r3, [pc, #32]	@ (8005188 <prvTaskExitError+0x2c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	d002      	beq.n	8005174 <prvTaskExitError+0x18>
 800516e:	b672      	cpsid	i
 8005170:	46c0      	nop			@ (mov r8, r8)
 8005172:	e7fd      	b.n	8005170 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005174:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005176:	46c0      	nop			@ (mov r8, r8)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0fc      	beq.n	8005178 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800517e:	46c0      	nop			@ (mov r8, r8)
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}
 8005188:	2000001c 	.word	0x2000001c

0800518c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005190:	46c0      	nop			@ (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

080051a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80051a0:	4a0b      	ldr	r2, [pc, #44]	@ (80051d0 <pxCurrentTCBConst2>)
 80051a2:	6813      	ldr	r3, [r2, #0]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	3020      	adds	r0, #32
 80051a8:	f380 8809 	msr	PSP, r0
 80051ac:	2002      	movs	r0, #2
 80051ae:	f380 8814 	msr	CONTROL, r0
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80051b8:	46ae      	mov	lr, r5
 80051ba:	bc08      	pop	{r3}
 80051bc:	bc04      	pop	{r2}
 80051be:	b662      	cpsie	i
 80051c0:	4718      	bx	r3
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	46c0      	nop			@ (mov r8, r8)
 80051ce:	46c0      	nop			@ (mov r8, r8)

080051d0 <pxCurrentTCBConst2>:
 80051d0:	20000478 	.word	0x20000478
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80051d4:	46c0      	nop			@ (mov r8, r8)
 80051d6:	46c0      	nop			@ (mov r8, r8)

080051d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80051dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <xPortStartScheduler+0x40>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <xPortStartScheduler+0x40>)
 80051e2:	21ff      	movs	r1, #255	@ 0xff
 80051e4:	0409      	lsls	r1, r1, #16
 80051e6:	430a      	orrs	r2, r1
 80051e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80051ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <xPortStartScheduler+0x40>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <xPortStartScheduler+0x40>)
 80051f0:	21ff      	movs	r1, #255	@ 0xff
 80051f2:	0609      	lsls	r1, r1, #24
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80051f8:	f000 f898 	bl	800532c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051fc:	4b07      	ldr	r3, [pc, #28]	@ (800521c <xPortStartScheduler+0x44>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005202:	f7ff ffcd 	bl	80051a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005206:	f7ff fc95 	bl	8004b34 <vTaskSwitchContext>
	prvTaskExitError();
 800520a:	f7ff ffa7 	bl	800515c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	e000ed20 	.word	0xe000ed20
 800521c:	2000001c 	.word	0x2000001c

08005220 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <vPortYield+0x1c>)
 8005226:	2280      	movs	r2, #128	@ 0x80
 8005228:	0552      	lsls	r2, r2, #21
 800522a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800522c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005230:	f3bf 8f6f 	isb	sy
}
 8005234:	46c0      	nop			@ (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005244:	b672      	cpsid	i
    uxCriticalNesting++;
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <vPortEnterCritical+0x20>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	4b04      	ldr	r3, [pc, #16]	@ (8005260 <vPortEnterCritical+0x20>)
 800524e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005250:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005254:	f3bf 8f6f 	isb	sy
}
 8005258:	46c0      	nop			@ (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			@ (mov r8, r8)
 8005260:	2000001c 	.word	0x2000001c

08005264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005268:	4b09      	ldr	r3, [pc, #36]	@ (8005290 <vPortExitCritical+0x2c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <vPortExitCritical+0x12>
 8005270:	b672      	cpsid	i
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	e7fd      	b.n	8005272 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005276:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <vPortExitCritical+0x2c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	1e5a      	subs	r2, r3, #1
 800527c:	4b04      	ldr	r3, [pc, #16]	@ (8005290 <vPortExitCritical+0x2c>)
 800527e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005280:	4b03      	ldr	r3, [pc, #12]	@ (8005290 <vPortExitCritical+0x2c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d100      	bne.n	800528a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8005288:	b662      	cpsie	i
    }
}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	2000001c 	.word	0x2000001c

08005294 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005294:	f3ef 8010 	mrs	r0, PRIMASK
 8005298:	b672      	cpsid	i
 800529a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800529c:	46c0      	nop			@ (mov r8, r8)
 800529e:	0018      	movs	r0, r3

080052a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80052a0:	f380 8810 	msr	PRIMASK, r0
 80052a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80052a6:	46c0      	nop			@ (mov r8, r8)
	...

080052b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052b0:	f3ef 8009 	mrs	r0, PSP
 80052b4:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <pxCurrentTCBConst>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	3820      	subs	r0, #32
 80052ba:	6010      	str	r0, [r2, #0]
 80052bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80052be:	4644      	mov	r4, r8
 80052c0:	464d      	mov	r5, r9
 80052c2:	4656      	mov	r6, sl
 80052c4:	465f      	mov	r7, fp
 80052c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80052c8:	b508      	push	{r3, lr}
 80052ca:	b672      	cpsid	i
 80052cc:	f7ff fc32 	bl	8004b34 <vTaskSwitchContext>
 80052d0:	b662      	cpsie	i
 80052d2:	bc0c      	pop	{r2, r3}
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	6808      	ldr	r0, [r1, #0]
 80052d8:	3010      	adds	r0, #16
 80052da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052dc:	46a0      	mov	r8, r4
 80052de:	46a9      	mov	r9, r5
 80052e0:	46b2      	mov	sl, r6
 80052e2:	46bb      	mov	fp, r7
 80052e4:	f380 8809 	msr	PSP, r0
 80052e8:	3820      	subs	r0, #32
 80052ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052ec:	4718      	bx	r3
 80052ee:	46c0      	nop			@ (mov r8, r8)

080052f0 <pxCurrentTCBConst>:
 80052f0:	20000478 	.word	0x20000478
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80052f4:	46c0      	nop			@ (mov r8, r8)
 80052f6:	46c0      	nop			@ (mov r8, r8)

080052f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80052fe:	f7ff ffc9 	bl	8005294 <ulSetInterruptMaskFromISR>
 8005302:	0003      	movs	r3, r0
 8005304:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005306:	f7ff fb5f 	bl	80049c8 <xTaskIncrementTick>
 800530a:	1e03      	subs	r3, r0, #0
 800530c:	d003      	beq.n	8005316 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800530e:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <SysTick_Handler+0x30>)
 8005310:	2280      	movs	r2, #128	@ 0x80
 8005312:	0552      	lsls	r2, r2, #21
 8005314:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	0018      	movs	r0, r3
 800531a:	f7ff ffc1 	bl	80052a0 <vClearInterruptMaskFromISR>
}
 800531e:	46c0      	nop			@ (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b002      	add	sp, #8
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005330:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <prvSetupTimerInterrupt+0x34>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005336:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <prvSetupTimerInterrupt+0x38>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <prvSetupTimerInterrupt+0x3c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	22fa      	movs	r2, #250	@ 0xfa
 8005342:	0091      	lsls	r1, r2, #2
 8005344:	0018      	movs	r0, r3
 8005346:	f7fa fee9 	bl	800011c <__udivsi3>
 800534a:	0003      	movs	r3, r0
 800534c:	001a      	movs	r2, r3
 800534e:	4b07      	ldr	r3, [pc, #28]	@ (800536c <prvSetupTimerInterrupt+0x40>)
 8005350:	3a01      	subs	r2, #1
 8005352:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005354:	4b02      	ldr	r3, [pc, #8]	@ (8005360 <prvSetupTimerInterrupt+0x34>)
 8005356:	2207      	movs	r2, #7
 8005358:	601a      	str	r2, [r3, #0]
}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	e000e010 	.word	0xe000e010
 8005364:	e000e018 	.word	0xe000e018
 8005368:	20000010 	.word	0x20000010
 800536c:	e000e014 	.word	0xe000e014

08005370 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800537c:	f7ff fa8c 	bl	8004898 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005380:	4b4a      	ldr	r3, [pc, #296]	@ (80054ac <pvPortMalloc+0x13c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005388:	f000 f8e4 	bl	8005554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800538c:	4b48      	ldr	r3, [pc, #288]	@ (80054b0 <pvPortMalloc+0x140>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4013      	ands	r3, r2
 8005394:	d000      	beq.n	8005398 <pvPortMalloc+0x28>
 8005396:	e07b      	b.n	8005490 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d013      	beq.n	80053c6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800539e:	2208      	movs	r2, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2207      	movs	r2, #7
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2207      	movs	r2, #7
 80053b2:	4393      	bics	r3, r2
 80053b4:	3308      	adds	r3, #8
 80053b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2207      	movs	r2, #7
 80053bc:	4013      	ands	r3, r2
 80053be:	d002      	beq.n	80053c6 <pvPortMalloc+0x56>
 80053c0:	b672      	cpsid	i
 80053c2:	46c0      	nop			@ (mov r8, r8)
 80053c4:	e7fd      	b.n	80053c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d061      	beq.n	8005490 <pvPortMalloc+0x120>
 80053cc:	4b39      	ldr	r3, [pc, #228]	@ (80054b4 <pvPortMalloc+0x144>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d85c      	bhi.n	8005490 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053d6:	4b38      	ldr	r3, [pc, #224]	@ (80054b8 <pvPortMalloc+0x148>)
 80053d8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80053da:	4b37      	ldr	r3, [pc, #220]	@ (80054b8 <pvPortMalloc+0x148>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053e0:	e004      	b.n	80053ec <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d903      	bls.n	80053fe <pvPortMalloc+0x8e>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f1      	bne.n	80053e2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053fe:	4b2b      	ldr	r3, [pc, #172]	@ (80054ac <pvPortMalloc+0x13c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	429a      	cmp	r2, r3
 8005406:	d043      	beq.n	8005490 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2208      	movs	r2, #8
 800540e:	189b      	adds	r3, r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	2308      	movs	r3, #8
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	429a      	cmp	r2, r3
 8005428:	d917      	bls.n	800545a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	18d3      	adds	r3, r2, r3
 8005430:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2207      	movs	r2, #7
 8005436:	4013      	ands	r3, r2
 8005438:	d002      	beq.n	8005440 <pvPortMalloc+0xd0>
 800543a:	b672      	cpsid	i
 800543c:	46c0      	nop			@ (mov r8, r8)
 800543e:	e7fd      	b.n	800543c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f8dd 	bl	8005614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800545a:	4b16      	ldr	r3, [pc, #88]	@ (80054b4 <pvPortMalloc+0x144>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	1ad2      	subs	r2, r2, r3
 8005464:	4b13      	ldr	r3, [pc, #76]	@ (80054b4 <pvPortMalloc+0x144>)
 8005466:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005468:	4b12      	ldr	r3, [pc, #72]	@ (80054b4 <pvPortMalloc+0x144>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b13      	ldr	r3, [pc, #76]	@ (80054bc <pvPortMalloc+0x14c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d203      	bcs.n	800547c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005474:	4b0f      	ldr	r3, [pc, #60]	@ (80054b4 <pvPortMalloc+0x144>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <pvPortMalloc+0x14c>)
 800547a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <pvPortMalloc+0x140>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	431a      	orrs	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005490:	f7ff fa0e 	bl	80048b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2207      	movs	r2, #7
 8005498:	4013      	ands	r3, r2
 800549a:	d002      	beq.n	80054a2 <pvPortMalloc+0x132>
 800549c:	b672      	cpsid	i
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	e7fd      	b.n	800549e <pvPortMalloc+0x12e>
	return pvReturn;
 80054a2:	68fb      	ldr	r3, [r7, #12]
}
 80054a4:	0018      	movs	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b006      	add	sp, #24
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	200011ac 	.word	0x200011ac
 80054b0:	200011b8 	.word	0x200011b8
 80054b4:	200011b0 	.word	0x200011b0
 80054b8:	200011a4 	.word	0x200011a4
 80054bc:	200011b4 	.word	0x200011b4

080054c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d037      	beq.n	8005542 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054d2:	2308      	movs	r3, #8
 80054d4:	425b      	negs	r3, r3
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	18d3      	adds	r3, r2, r3
 80054da:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	4b19      	ldr	r3, [pc, #100]	@ (800554c <vPortFree+0x8c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4013      	ands	r3, r2
 80054ea:	d102      	bne.n	80054f2 <vPortFree+0x32>
 80054ec:	b672      	cpsid	i
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	e7fd      	b.n	80054ee <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <vPortFree+0x40>
 80054fa:	b672      	cpsid	i
 80054fc:	46c0      	nop			@ (mov r8, r8)
 80054fe:	e7fd      	b.n	80054fc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	4b11      	ldr	r3, [pc, #68]	@ (800554c <vPortFree+0x8c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4013      	ands	r3, r2
 800550a:	d01a      	beq.n	8005542 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d116      	bne.n	8005542 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <vPortFree+0x8c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	43db      	mvns	r3, r3
 800551e:	401a      	ands	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005524:	f7ff f9b8 	bl	8004898 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <vPortFree+0x90>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	18d2      	adds	r2, r2, r3
 8005532:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <vPortFree+0x90>)
 8005534:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	0018      	movs	r0, r3
 800553a:	f000 f86b 	bl	8005614 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800553e:	f7ff f9b7 	bl	80048b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	b004      	add	sp, #16
 8005548:	bd80      	pop	{r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	200011b8 	.word	0x200011b8
 8005550:	200011b0 	.word	0x200011b0

08005554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800555a:	23c0      	movs	r3, #192	@ 0xc0
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005560:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <prvHeapInit+0xa8>)
 8005562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2207      	movs	r2, #7
 8005568:	4013      	ands	r3, r2
 800556a:	d00c      	beq.n	8005586 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3307      	adds	r3, #7
 8005570:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2207      	movs	r2, #7
 8005576:	4393      	bics	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	4b1e      	ldr	r3, [pc, #120]	@ (80055fc <prvHeapInit+0xa8>)
 8005582:	18d3      	adds	r3, r2, r3
 8005584:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800558a:	4b1d      	ldr	r3, [pc, #116]	@ (8005600 <prvHeapInit+0xac>)
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005590:	4b1b      	ldr	r3, [pc, #108]	@ (8005600 <prvHeapInit+0xac>)
 8005592:	2200      	movs	r2, #0
 8005594:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	18d3      	adds	r3, r2, r3
 800559c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800559e:	2208      	movs	r2, #8
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2207      	movs	r2, #7
 80055aa:	4393      	bics	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4b14      	ldr	r3, [pc, #80]	@ (8005604 <prvHeapInit+0xb0>)
 80055b2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80055b4:	4b13      	ldr	r3, [pc, #76]	@ (8005604 <prvHeapInit+0xb0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055bc:	4b11      	ldr	r3, [pc, #68]	@ (8005604 <prvHeapInit+0xb0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	1ad2      	subs	r2, r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005604 <prvHeapInit+0xb0>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <prvHeapInit+0xb4>)
 80055e0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b09      	ldr	r3, [pc, #36]	@ (800560c <prvHeapInit+0xb8>)
 80055e8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055ea:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <prvHeapInit+0xbc>)
 80055ec:	2280      	movs	r2, #128	@ 0x80
 80055ee:	0612      	lsls	r2, r2, #24
 80055f0:	601a      	str	r2, [r3, #0]
}
 80055f2:	46c0      	nop			@ (mov r8, r8)
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b004      	add	sp, #16
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	200005a4 	.word	0x200005a4
 8005600:	200011a4 	.word	0x200011a4
 8005604:	200011ac 	.word	0x200011ac
 8005608:	200011b4 	.word	0x200011b4
 800560c:	200011b0 	.word	0x200011b0
 8005610:	200011b8 	.word	0x200011b8

08005614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800561c:	4b27      	ldr	r3, [pc, #156]	@ (80056bc <prvInsertBlockIntoFreeList+0xa8>)
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e002      	b.n	8005628 <prvInsertBlockIntoFreeList+0x14>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	429a      	cmp	r2, r3
 8005630:	d8f7      	bhi.n	8005622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	18d3      	adds	r3, r2, r3
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d108      	bne.n	8005656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	18d2      	adds	r2, r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	18d2      	adds	r2, r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d118      	bne.n	800569c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b14      	ldr	r3, [pc, #80]	@ (80056c0 <prvInsertBlockIntoFreeList+0xac>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d00d      	beq.n	8005692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	18d2      	adds	r2, r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e008      	b.n	80056a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005692:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <prvInsertBlockIntoFreeList+0xac>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e003      	b.n	80056a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d002      	beq.n	80056b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b004      	add	sp, #16
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	200011a4 	.word	0x200011a4
 80056c0:	200011ac 	.word	0x200011ac

080056c4 <std>:
 80056c4:	2300      	movs	r3, #0
 80056c6:	b510      	push	{r4, lr}
 80056c8:	0004      	movs	r4, r0
 80056ca:	6003      	str	r3, [r0, #0]
 80056cc:	6043      	str	r3, [r0, #4]
 80056ce:	6083      	str	r3, [r0, #8]
 80056d0:	8181      	strh	r1, [r0, #12]
 80056d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80056d4:	81c2      	strh	r2, [r0, #14]
 80056d6:	6103      	str	r3, [r0, #16]
 80056d8:	6143      	str	r3, [r0, #20]
 80056da:	6183      	str	r3, [r0, #24]
 80056dc:	0019      	movs	r1, r3
 80056de:	2208      	movs	r2, #8
 80056e0:	305c      	adds	r0, #92	@ 0x5c
 80056e2:	f000 f90f 	bl	8005904 <memset>
 80056e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <std+0x50>)
 80056e8:	6224      	str	r4, [r4, #32]
 80056ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80056ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <std+0x54>)
 80056ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056f0:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <std+0x58>)
 80056f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005720 <std+0x5c>)
 80056f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80056f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005724 <std+0x60>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d005      	beq.n	800570a <std+0x46>
 80056fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <std+0x64>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d002      	beq.n	800570a <std+0x46>
 8005704:	4b09      	ldr	r3, [pc, #36]	@ (800572c <std+0x68>)
 8005706:	429c      	cmp	r4, r3
 8005708:	d103      	bne.n	8005712 <std+0x4e>
 800570a:	0020      	movs	r0, r4
 800570c:	3058      	adds	r0, #88	@ 0x58
 800570e:	f000 f9d9 	bl	8005ac4 <__retarget_lock_init_recursive>
 8005712:	bd10      	pop	{r4, pc}
 8005714:	0800586d 	.word	0x0800586d
 8005718:	08005895 	.word	0x08005895
 800571c:	080058cd 	.word	0x080058cd
 8005720:	080058f9 	.word	0x080058f9
 8005724:	200011bc 	.word	0x200011bc
 8005728:	20001224 	.word	0x20001224
 800572c:	2000128c 	.word	0x2000128c

08005730 <stdio_exit_handler>:
 8005730:	b510      	push	{r4, lr}
 8005732:	4a03      	ldr	r2, [pc, #12]	@ (8005740 <stdio_exit_handler+0x10>)
 8005734:	4903      	ldr	r1, [pc, #12]	@ (8005744 <stdio_exit_handler+0x14>)
 8005736:	4804      	ldr	r0, [pc, #16]	@ (8005748 <stdio_exit_handler+0x18>)
 8005738:	f000 f86c 	bl	8005814 <_fwalk_sglue>
 800573c:	bd10      	pop	{r4, pc}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	20000020 	.word	0x20000020
 8005744:	08006365 	.word	0x08006365
 8005748:	20000030 	.word	0x20000030

0800574c <cleanup_stdio>:
 800574c:	6841      	ldr	r1, [r0, #4]
 800574e:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <cleanup_stdio+0x30>)
 8005750:	b510      	push	{r4, lr}
 8005752:	0004      	movs	r4, r0
 8005754:	4299      	cmp	r1, r3
 8005756:	d001      	beq.n	800575c <cleanup_stdio+0x10>
 8005758:	f000 fe04 	bl	8006364 <_fflush_r>
 800575c:	68a1      	ldr	r1, [r4, #8]
 800575e:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <cleanup_stdio+0x34>)
 8005760:	4299      	cmp	r1, r3
 8005762:	d002      	beq.n	800576a <cleanup_stdio+0x1e>
 8005764:	0020      	movs	r0, r4
 8005766:	f000 fdfd 	bl	8006364 <_fflush_r>
 800576a:	68e1      	ldr	r1, [r4, #12]
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <cleanup_stdio+0x38>)
 800576e:	4299      	cmp	r1, r3
 8005770:	d002      	beq.n	8005778 <cleanup_stdio+0x2c>
 8005772:	0020      	movs	r0, r4
 8005774:	f000 fdf6 	bl	8006364 <_fflush_r>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	200011bc 	.word	0x200011bc
 8005780:	20001224 	.word	0x20001224
 8005784:	2000128c 	.word	0x2000128c

08005788 <global_stdio_init.part.0>:
 8005788:	b510      	push	{r4, lr}
 800578a:	4b09      	ldr	r3, [pc, #36]	@ (80057b0 <global_stdio_init.part.0+0x28>)
 800578c:	4a09      	ldr	r2, [pc, #36]	@ (80057b4 <global_stdio_init.part.0+0x2c>)
 800578e:	2104      	movs	r1, #4
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	4809      	ldr	r0, [pc, #36]	@ (80057b8 <global_stdio_init.part.0+0x30>)
 8005794:	2200      	movs	r2, #0
 8005796:	f7ff ff95 	bl	80056c4 <std>
 800579a:	2201      	movs	r2, #1
 800579c:	2109      	movs	r1, #9
 800579e:	4807      	ldr	r0, [pc, #28]	@ (80057bc <global_stdio_init.part.0+0x34>)
 80057a0:	f7ff ff90 	bl	80056c4 <std>
 80057a4:	2202      	movs	r2, #2
 80057a6:	2112      	movs	r1, #18
 80057a8:	4805      	ldr	r0, [pc, #20]	@ (80057c0 <global_stdio_init.part.0+0x38>)
 80057aa:	f7ff ff8b 	bl	80056c4 <std>
 80057ae:	bd10      	pop	{r4, pc}
 80057b0:	200012f4 	.word	0x200012f4
 80057b4:	08005731 	.word	0x08005731
 80057b8:	200011bc 	.word	0x200011bc
 80057bc:	20001224 	.word	0x20001224
 80057c0:	2000128c 	.word	0x2000128c

080057c4 <__sfp_lock_acquire>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	4802      	ldr	r0, [pc, #8]	@ (80057d0 <__sfp_lock_acquire+0xc>)
 80057c8:	f000 f97d 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	200012fd 	.word	0x200012fd

080057d4 <__sfp_lock_release>:
 80057d4:	b510      	push	{r4, lr}
 80057d6:	4802      	ldr	r0, [pc, #8]	@ (80057e0 <__sfp_lock_release+0xc>)
 80057d8:	f000 f976 	bl	8005ac8 <__retarget_lock_release_recursive>
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	200012fd 	.word	0x200012fd

080057e4 <__sinit>:
 80057e4:	b510      	push	{r4, lr}
 80057e6:	0004      	movs	r4, r0
 80057e8:	f7ff ffec 	bl	80057c4 <__sfp_lock_acquire>
 80057ec:	6a23      	ldr	r3, [r4, #32]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <__sinit+0x14>
 80057f2:	f7ff ffef 	bl	80057d4 <__sfp_lock_release>
 80057f6:	bd10      	pop	{r4, pc}
 80057f8:	4b04      	ldr	r3, [pc, #16]	@ (800580c <__sinit+0x28>)
 80057fa:	6223      	str	r3, [r4, #32]
 80057fc:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <__sinit+0x2c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f6      	bne.n	80057f2 <__sinit+0xe>
 8005804:	f7ff ffc0 	bl	8005788 <global_stdio_init.part.0>
 8005808:	e7f3      	b.n	80057f2 <__sinit+0xe>
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	0800574d 	.word	0x0800574d
 8005810:	200012f4 	.word	0x200012f4

08005814 <_fwalk_sglue>:
 8005814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005816:	0014      	movs	r4, r2
 8005818:	2600      	movs	r6, #0
 800581a:	9000      	str	r0, [sp, #0]
 800581c:	9101      	str	r1, [sp, #4]
 800581e:	68a5      	ldr	r5, [r4, #8]
 8005820:	6867      	ldr	r7, [r4, #4]
 8005822:	3f01      	subs	r7, #1
 8005824:	d504      	bpl.n	8005830 <_fwalk_sglue+0x1c>
 8005826:	6824      	ldr	r4, [r4, #0]
 8005828:	2c00      	cmp	r4, #0
 800582a:	d1f8      	bne.n	800581e <_fwalk_sglue+0xa>
 800582c:	0030      	movs	r0, r6
 800582e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005830:	89ab      	ldrh	r3, [r5, #12]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d908      	bls.n	8005848 <_fwalk_sglue+0x34>
 8005836:	220e      	movs	r2, #14
 8005838:	5eab      	ldrsh	r3, [r5, r2]
 800583a:	3301      	adds	r3, #1
 800583c:	d004      	beq.n	8005848 <_fwalk_sglue+0x34>
 800583e:	0029      	movs	r1, r5
 8005840:	9800      	ldr	r0, [sp, #0]
 8005842:	9b01      	ldr	r3, [sp, #4]
 8005844:	4798      	blx	r3
 8005846:	4306      	orrs	r6, r0
 8005848:	3568      	adds	r5, #104	@ 0x68
 800584a:	e7ea      	b.n	8005822 <_fwalk_sglue+0xe>

0800584c <iprintf>:
 800584c:	b40f      	push	{r0, r1, r2, r3}
 800584e:	b507      	push	{r0, r1, r2, lr}
 8005850:	4905      	ldr	r1, [pc, #20]	@ (8005868 <iprintf+0x1c>)
 8005852:	ab04      	add	r3, sp, #16
 8005854:	6808      	ldr	r0, [r1, #0]
 8005856:	cb04      	ldmia	r3!, {r2}
 8005858:	6881      	ldr	r1, [r0, #8]
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	f000 fa62 	bl	8005d24 <_vfiprintf_r>
 8005860:	b003      	add	sp, #12
 8005862:	bc08      	pop	{r3}
 8005864:	b004      	add	sp, #16
 8005866:	4718      	bx	r3
 8005868:	2000002c 	.word	0x2000002c

0800586c <__sread>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	000c      	movs	r4, r1
 8005870:	250e      	movs	r5, #14
 8005872:	5f49      	ldrsh	r1, [r1, r5]
 8005874:	f000 f8d4 	bl	8005a20 <_read_r>
 8005878:	2800      	cmp	r0, #0
 800587a:	db03      	blt.n	8005884 <__sread+0x18>
 800587c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800587e:	181b      	adds	r3, r3, r0
 8005880:	6563      	str	r3, [r4, #84]	@ 0x54
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	4a02      	ldr	r2, [pc, #8]	@ (8005890 <__sread+0x24>)
 8005888:	4013      	ands	r3, r2
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	e7f9      	b.n	8005882 <__sread+0x16>
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	ffffefff 	.word	0xffffefff

08005894 <__swrite>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	001f      	movs	r7, r3
 8005898:	898b      	ldrh	r3, [r1, #12]
 800589a:	0005      	movs	r5, r0
 800589c:	000c      	movs	r4, r1
 800589e:	0016      	movs	r6, r2
 80058a0:	05db      	lsls	r3, r3, #23
 80058a2:	d505      	bpl.n	80058b0 <__swrite+0x1c>
 80058a4:	230e      	movs	r3, #14
 80058a6:	5ec9      	ldrsh	r1, [r1, r3]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2302      	movs	r3, #2
 80058ac:	f000 f8a4 	bl	80059f8 <_lseek_r>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	4a05      	ldr	r2, [pc, #20]	@ (80058c8 <__swrite+0x34>)
 80058b4:	0028      	movs	r0, r5
 80058b6:	4013      	ands	r3, r2
 80058b8:	81a3      	strh	r3, [r4, #12]
 80058ba:	0032      	movs	r2, r6
 80058bc:	230e      	movs	r3, #14
 80058be:	5ee1      	ldrsh	r1, [r4, r3]
 80058c0:	003b      	movs	r3, r7
 80058c2:	f000 f8c1 	bl	8005a48 <_write_r>
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	ffffefff 	.word	0xffffefff

080058cc <__sseek>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	000c      	movs	r4, r1
 80058d0:	250e      	movs	r5, #14
 80058d2:	5f49      	ldrsh	r1, [r1, r5]
 80058d4:	f000 f890 	bl	80059f8 <_lseek_r>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	1c42      	adds	r2, r0, #1
 80058dc:	d103      	bne.n	80058e6 <__sseek+0x1a>
 80058de:	4a05      	ldr	r2, [pc, #20]	@ (80058f4 <__sseek+0x28>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
 80058e6:	2280      	movs	r2, #128	@ 0x80
 80058e8:	0152      	lsls	r2, r2, #5
 80058ea:	4313      	orrs	r3, r2
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80058f0:	e7f8      	b.n	80058e4 <__sseek+0x18>
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	ffffefff 	.word	0xffffefff

080058f8 <__sclose>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	230e      	movs	r3, #14
 80058fc:	5ec9      	ldrsh	r1, [r1, r3]
 80058fe:	f000 f809 	bl	8005914 <_close_r>
 8005902:	bd10      	pop	{r4, pc}

08005904 <memset>:
 8005904:	0003      	movs	r3, r0
 8005906:	1882      	adds	r2, r0, r2
 8005908:	4293      	cmp	r3, r2
 800590a:	d100      	bne.n	800590e <memset+0xa>
 800590c:	4770      	bx	lr
 800590e:	7019      	strb	r1, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	e7f9      	b.n	8005908 <memset+0x4>

08005914 <_close_r>:
 8005914:	2300      	movs	r3, #0
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	4d06      	ldr	r5, [pc, #24]	@ (8005934 <_close_r+0x20>)
 800591a:	0004      	movs	r4, r0
 800591c:	0008      	movs	r0, r1
 800591e:	602b      	str	r3, [r5, #0]
 8005920:	f7fb fb2b 	bl	8000f7a <_close>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d103      	bne.n	8005930 <_close_r+0x1c>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d000      	beq.n	8005930 <_close_r+0x1c>
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	bd70      	pop	{r4, r5, r6, pc}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	200012f8 	.word	0x200012f8

08005938 <_reclaim_reent>:
 8005938:	4b2e      	ldr	r3, [pc, #184]	@ (80059f4 <_reclaim_reent+0xbc>)
 800593a:	b570      	push	{r4, r5, r6, lr}
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	0004      	movs	r4, r0
 8005940:	4283      	cmp	r3, r0
 8005942:	d04f      	beq.n	80059e4 <_reclaim_reent+0xac>
 8005944:	69c3      	ldr	r3, [r0, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d017      	beq.n	800597a <_reclaim_reent+0x42>
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00d      	beq.n	800596c <_reclaim_reent+0x34>
 8005950:	2500      	movs	r5, #0
 8005952:	69e3      	ldr	r3, [r4, #28]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	5959      	ldr	r1, [r3, r5]
 8005958:	2900      	cmp	r1, #0
 800595a:	d144      	bne.n	80059e6 <_reclaim_reent+0xae>
 800595c:	3504      	adds	r5, #4
 800595e:	2d80      	cmp	r5, #128	@ 0x80
 8005960:	d1f7      	bne.n	8005952 <_reclaim_reent+0x1a>
 8005962:	69e3      	ldr	r3, [r4, #28]
 8005964:	0020      	movs	r0, r4
 8005966:	68d9      	ldr	r1, [r3, #12]
 8005968:	f000 f8b8 	bl	8005adc <_free_r>
 800596c:	69e3      	ldr	r3, [r4, #28]
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	2900      	cmp	r1, #0
 8005972:	d002      	beq.n	800597a <_reclaim_reent+0x42>
 8005974:	0020      	movs	r0, r4
 8005976:	f000 f8b1 	bl	8005adc <_free_r>
 800597a:	6961      	ldr	r1, [r4, #20]
 800597c:	2900      	cmp	r1, #0
 800597e:	d002      	beq.n	8005986 <_reclaim_reent+0x4e>
 8005980:	0020      	movs	r0, r4
 8005982:	f000 f8ab 	bl	8005adc <_free_r>
 8005986:	69e1      	ldr	r1, [r4, #28]
 8005988:	2900      	cmp	r1, #0
 800598a:	d002      	beq.n	8005992 <_reclaim_reent+0x5a>
 800598c:	0020      	movs	r0, r4
 800598e:	f000 f8a5 	bl	8005adc <_free_r>
 8005992:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005994:	2900      	cmp	r1, #0
 8005996:	d002      	beq.n	800599e <_reclaim_reent+0x66>
 8005998:	0020      	movs	r0, r4
 800599a:	f000 f89f 	bl	8005adc <_free_r>
 800599e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059a0:	2900      	cmp	r1, #0
 80059a2:	d002      	beq.n	80059aa <_reclaim_reent+0x72>
 80059a4:	0020      	movs	r0, r4
 80059a6:	f000 f899 	bl	8005adc <_free_r>
 80059aa:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d002      	beq.n	80059b6 <_reclaim_reent+0x7e>
 80059b0:	0020      	movs	r0, r4
 80059b2:	f000 f893 	bl	8005adc <_free_r>
 80059b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80059b8:	2900      	cmp	r1, #0
 80059ba:	d002      	beq.n	80059c2 <_reclaim_reent+0x8a>
 80059bc:	0020      	movs	r0, r4
 80059be:	f000 f88d 	bl	8005adc <_free_r>
 80059c2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d002      	beq.n	80059ce <_reclaim_reent+0x96>
 80059c8:	0020      	movs	r0, r4
 80059ca:	f000 f887 	bl	8005adc <_free_r>
 80059ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d002      	beq.n	80059da <_reclaim_reent+0xa2>
 80059d4:	0020      	movs	r0, r4
 80059d6:	f000 f881 	bl	8005adc <_free_r>
 80059da:	6a23      	ldr	r3, [r4, #32]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <_reclaim_reent+0xac>
 80059e0:	0020      	movs	r0, r4
 80059e2:	4798      	blx	r3
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
 80059e6:	680e      	ldr	r6, [r1, #0]
 80059e8:	0020      	movs	r0, r4
 80059ea:	f000 f877 	bl	8005adc <_free_r>
 80059ee:	0031      	movs	r1, r6
 80059f0:	e7b2      	b.n	8005958 <_reclaim_reent+0x20>
 80059f2:	46c0      	nop			@ (mov r8, r8)
 80059f4:	2000002c 	.word	0x2000002c

080059f8 <_lseek_r>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	0004      	movs	r4, r0
 80059fc:	0008      	movs	r0, r1
 80059fe:	0011      	movs	r1, r2
 8005a00:	001a      	movs	r2, r3
 8005a02:	2300      	movs	r3, #0
 8005a04:	4d05      	ldr	r5, [pc, #20]	@ (8005a1c <_lseek_r+0x24>)
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	f7fb fad8 	bl	8000fbc <_lseek>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d103      	bne.n	8005a18 <_lseek_r+0x20>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d000      	beq.n	8005a18 <_lseek_r+0x20>
 8005a16:	6023      	str	r3, [r4, #0]
 8005a18:	bd70      	pop	{r4, r5, r6, pc}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	200012f8 	.word	0x200012f8

08005a20 <_read_r>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	0004      	movs	r4, r0
 8005a24:	0008      	movs	r0, r1
 8005a26:	0011      	movs	r1, r2
 8005a28:	001a      	movs	r2, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4d05      	ldr	r5, [pc, #20]	@ (8005a44 <_read_r+0x24>)
 8005a2e:	602b      	str	r3, [r5, #0]
 8005a30:	f7fb fa86 	bl	8000f40 <_read>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d103      	bne.n	8005a40 <_read_r+0x20>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d000      	beq.n	8005a40 <_read_r+0x20>
 8005a3e:	6023      	str	r3, [r4, #0]
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	200012f8 	.word	0x200012f8

08005a48 <_write_r>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	0004      	movs	r4, r0
 8005a4c:	0008      	movs	r0, r1
 8005a4e:	0011      	movs	r1, r2
 8005a50:	001a      	movs	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	4d05      	ldr	r5, [pc, #20]	@ (8005a6c <_write_r+0x24>)
 8005a56:	602b      	str	r3, [r5, #0]
 8005a58:	f7fa fe5c 	bl	8000714 <_write>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d103      	bne.n	8005a68 <_write_r+0x20>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d000      	beq.n	8005a68 <_write_r+0x20>
 8005a66:	6023      	str	r3, [r4, #0]
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
 8005a6a:	46c0      	nop			@ (mov r8, r8)
 8005a6c:	200012f8 	.word	0x200012f8

08005a70 <__errno>:
 8005a70:	4b01      	ldr	r3, [pc, #4]	@ (8005a78 <__errno+0x8>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	4770      	bx	lr
 8005a76:	46c0      	nop			@ (mov r8, r8)
 8005a78:	2000002c 	.word	0x2000002c

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	2600      	movs	r6, #0
 8005a80:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab4 <__libc_init_array+0x38>)
 8005a82:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab8 <__libc_init_array+0x3c>)
 8005a84:	1b64      	subs	r4, r4, r5
 8005a86:	10a4      	asrs	r4, r4, #2
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	2600      	movs	r6, #0
 8005a8e:	f000 fde3 	bl	8006658 <_init>
 8005a92:	4c0a      	ldr	r4, [pc, #40]	@ (8005abc <__libc_init_array+0x40>)
 8005a94:	4d0a      	ldr	r5, [pc, #40]	@ (8005ac0 <__libc_init_array+0x44>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	00b3      	lsls	r3, r6, #2
 8005aa2:	58eb      	ldr	r3, [r5, r3]
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	00b3      	lsls	r3, r6, #2
 8005aac:	58eb      	ldr	r3, [r5, r3]
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	08006780 	.word	0x08006780
 8005ab8:	08006780 	.word	0x08006780
 8005abc:	08006784 	.word	0x08006784
 8005ac0:	08006780 	.word	0x08006780

08005ac4 <__retarget_lock_init_recursive>:
 8005ac4:	4770      	bx	lr

08005ac6 <__retarget_lock_acquire_recursive>:
 8005ac6:	4770      	bx	lr

08005ac8 <__retarget_lock_release_recursive>:
 8005ac8:	4770      	bx	lr

08005aca <memcpy>:
 8005aca:	2300      	movs	r3, #0
 8005acc:	b510      	push	{r4, lr}
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d100      	bne.n	8005ad4 <memcpy+0xa>
 8005ad2:	bd10      	pop	{r4, pc}
 8005ad4:	5ccc      	ldrb	r4, [r1, r3]
 8005ad6:	54c4      	strb	r4, [r0, r3]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	e7f8      	b.n	8005ace <memcpy+0x4>

08005adc <_free_r>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	0005      	movs	r5, r0
 8005ae0:	1e0c      	subs	r4, r1, #0
 8005ae2:	d010      	beq.n	8005b06 <_free_r+0x2a>
 8005ae4:	3c04      	subs	r4, #4
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	da00      	bge.n	8005aee <_free_r+0x12>
 8005aec:	18e4      	adds	r4, r4, r3
 8005aee:	0028      	movs	r0, r5
 8005af0:	f000 f8e0 	bl	8005cb4 <__malloc_lock>
 8005af4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b6c <_free_r+0x90>)
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <_free_r+0x2c>
 8005afc:	6063      	str	r3, [r4, #4]
 8005afe:	6014      	str	r4, [r2, #0]
 8005b00:	0028      	movs	r0, r5
 8005b02:	f000 f8df 	bl	8005cc4 <__malloc_unlock>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d908      	bls.n	8005b1e <_free_r+0x42>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	1821      	adds	r1, r4, r0
 8005b10:	428b      	cmp	r3, r1
 8005b12:	d1f3      	bne.n	8005afc <_free_r+0x20>
 8005b14:	6819      	ldr	r1, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	1809      	adds	r1, r1, r0
 8005b1a:	6021      	str	r1, [r4, #0]
 8005b1c:	e7ee      	b.n	8005afc <_free_r+0x20>
 8005b1e:	001a      	movs	r2, r3
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <_free_r+0x4e>
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	d9f9      	bls.n	8005b1e <_free_r+0x42>
 8005b2a:	6811      	ldr	r1, [r2, #0]
 8005b2c:	1850      	adds	r0, r2, r1
 8005b2e:	42a0      	cmp	r0, r4
 8005b30:	d10b      	bne.n	8005b4a <_free_r+0x6e>
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	1809      	adds	r1, r1, r0
 8005b36:	1850      	adds	r0, r2, r1
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	4283      	cmp	r3, r0
 8005b3c:	d1e0      	bne.n	8005b00 <_free_r+0x24>
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	1841      	adds	r1, r0, r1
 8005b44:	6011      	str	r1, [r2, #0]
 8005b46:	6053      	str	r3, [r2, #4]
 8005b48:	e7da      	b.n	8005b00 <_free_r+0x24>
 8005b4a:	42a0      	cmp	r0, r4
 8005b4c:	d902      	bls.n	8005b54 <_free_r+0x78>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	602b      	str	r3, [r5, #0]
 8005b52:	e7d5      	b.n	8005b00 <_free_r+0x24>
 8005b54:	6820      	ldr	r0, [r4, #0]
 8005b56:	1821      	adds	r1, r4, r0
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	d103      	bne.n	8005b64 <_free_r+0x88>
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	1809      	adds	r1, r1, r0
 8005b62:	6021      	str	r1, [r4, #0]
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	6054      	str	r4, [r2, #4]
 8005b68:	e7ca      	b.n	8005b00 <_free_r+0x24>
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	20001304 	.word	0x20001304

08005b70 <sbrk_aligned>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4e0f      	ldr	r6, [pc, #60]	@ (8005bb0 <sbrk_aligned+0x40>)
 8005b74:	000d      	movs	r5, r1
 8005b76:	6831      	ldr	r1, [r6, #0]
 8005b78:	0004      	movs	r4, r0
 8005b7a:	2900      	cmp	r1, #0
 8005b7c:	d102      	bne.n	8005b84 <sbrk_aligned+0x14>
 8005b7e:	f000 fcbd 	bl	80064fc <_sbrk_r>
 8005b82:	6030      	str	r0, [r6, #0]
 8005b84:	0029      	movs	r1, r5
 8005b86:	0020      	movs	r0, r4
 8005b88:	f000 fcb8 	bl	80064fc <_sbrk_r>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d103      	bne.n	8005b98 <sbrk_aligned+0x28>
 8005b90:	2501      	movs	r5, #1
 8005b92:	426d      	negs	r5, r5
 8005b94:	0028      	movs	r0, r5
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	2303      	movs	r3, #3
 8005b9a:	1cc5      	adds	r5, r0, #3
 8005b9c:	439d      	bics	r5, r3
 8005b9e:	42a8      	cmp	r0, r5
 8005ba0:	d0f8      	beq.n	8005b94 <sbrk_aligned+0x24>
 8005ba2:	1a29      	subs	r1, r5, r0
 8005ba4:	0020      	movs	r0, r4
 8005ba6:	f000 fca9 	bl	80064fc <_sbrk_r>
 8005baa:	3001      	adds	r0, #1
 8005bac:	d1f2      	bne.n	8005b94 <sbrk_aligned+0x24>
 8005bae:	e7ef      	b.n	8005b90 <sbrk_aligned+0x20>
 8005bb0:	20001300 	.word	0x20001300

08005bb4 <_malloc_r>:
 8005bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	1ccb      	adds	r3, r1, #3
 8005bba:	4393      	bics	r3, r2
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	0005      	movs	r5, r0
 8005bc0:	001f      	movs	r7, r3
 8005bc2:	2b0c      	cmp	r3, #12
 8005bc4:	d234      	bcs.n	8005c30 <_malloc_r+0x7c>
 8005bc6:	270c      	movs	r7, #12
 8005bc8:	42b9      	cmp	r1, r7
 8005bca:	d833      	bhi.n	8005c34 <_malloc_r+0x80>
 8005bcc:	0028      	movs	r0, r5
 8005bce:	f000 f871 	bl	8005cb4 <__malloc_lock>
 8005bd2:	4e37      	ldr	r6, [pc, #220]	@ (8005cb0 <_malloc_r+0xfc>)
 8005bd4:	6833      	ldr	r3, [r6, #0]
 8005bd6:	001c      	movs	r4, r3
 8005bd8:	2c00      	cmp	r4, #0
 8005bda:	d12f      	bne.n	8005c3c <_malloc_r+0x88>
 8005bdc:	0039      	movs	r1, r7
 8005bde:	0028      	movs	r0, r5
 8005be0:	f7ff ffc6 	bl	8005b70 <sbrk_aligned>
 8005be4:	0004      	movs	r4, r0
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	d15f      	bne.n	8005caa <_malloc_r+0xf6>
 8005bea:	6834      	ldr	r4, [r6, #0]
 8005bec:	9400      	str	r4, [sp, #0]
 8005bee:	9b00      	ldr	r3, [sp, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d14a      	bne.n	8005c8a <_malloc_r+0xd6>
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	d052      	beq.n	8005c9e <_malloc_r+0xea>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	0028      	movs	r0, r5
 8005bfc:	18e3      	adds	r3, r4, r3
 8005bfe:	9900      	ldr	r1, [sp, #0]
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	f000 fc7b 	bl	80064fc <_sbrk_r>
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	4283      	cmp	r3, r0
 8005c0a:	d148      	bne.n	8005c9e <_malloc_r+0xea>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	0028      	movs	r0, r5
 8005c10:	1aff      	subs	r7, r7, r3
 8005c12:	0039      	movs	r1, r7
 8005c14:	f7ff ffac 	bl	8005b70 <sbrk_aligned>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d040      	beq.n	8005c9e <_malloc_r+0xea>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	19db      	adds	r3, r3, r7
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	6833      	ldr	r3, [r6, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	d133      	bne.n	8005c92 <_malloc_r+0xde>
 8005c2a:	9b00      	ldr	r3, [sp, #0]
 8005c2c:	6033      	str	r3, [r6, #0]
 8005c2e:	e019      	b.n	8005c64 <_malloc_r+0xb0>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dac9      	bge.n	8005bc8 <_malloc_r+0x14>
 8005c34:	230c      	movs	r3, #12
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	2000      	movs	r0, #0
 8005c3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c3c:	6821      	ldr	r1, [r4, #0]
 8005c3e:	1bc9      	subs	r1, r1, r7
 8005c40:	d420      	bmi.n	8005c84 <_malloc_r+0xd0>
 8005c42:	290b      	cmp	r1, #11
 8005c44:	d90a      	bls.n	8005c5c <_malloc_r+0xa8>
 8005c46:	19e2      	adds	r2, r4, r7
 8005c48:	6027      	str	r7, [r4, #0]
 8005c4a:	42a3      	cmp	r3, r4
 8005c4c:	d104      	bne.n	8005c58 <_malloc_r+0xa4>
 8005c4e:	6032      	str	r2, [r6, #0]
 8005c50:	6863      	ldr	r3, [r4, #4]
 8005c52:	6011      	str	r1, [r2, #0]
 8005c54:	6053      	str	r3, [r2, #4]
 8005c56:	e005      	b.n	8005c64 <_malloc_r+0xb0>
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	e7f9      	b.n	8005c50 <_malloc_r+0x9c>
 8005c5c:	6862      	ldr	r2, [r4, #4]
 8005c5e:	42a3      	cmp	r3, r4
 8005c60:	d10e      	bne.n	8005c80 <_malloc_r+0xcc>
 8005c62:	6032      	str	r2, [r6, #0]
 8005c64:	0028      	movs	r0, r5
 8005c66:	f000 f82d 	bl	8005cc4 <__malloc_unlock>
 8005c6a:	0020      	movs	r0, r4
 8005c6c:	2207      	movs	r2, #7
 8005c6e:	300b      	adds	r0, #11
 8005c70:	1d23      	adds	r3, r4, #4
 8005c72:	4390      	bics	r0, r2
 8005c74:	1ac2      	subs	r2, r0, r3
 8005c76:	4298      	cmp	r0, r3
 8005c78:	d0df      	beq.n	8005c3a <_malloc_r+0x86>
 8005c7a:	1a1b      	subs	r3, r3, r0
 8005c7c:	50a3      	str	r3, [r4, r2]
 8005c7e:	e7dc      	b.n	8005c3a <_malloc_r+0x86>
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	e7ef      	b.n	8005c64 <_malloc_r+0xb0>
 8005c84:	0023      	movs	r3, r4
 8005c86:	6864      	ldr	r4, [r4, #4]
 8005c88:	e7a6      	b.n	8005bd8 <_malloc_r+0x24>
 8005c8a:	9c00      	ldr	r4, [sp, #0]
 8005c8c:	6863      	ldr	r3, [r4, #4]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	e7ad      	b.n	8005bee <_malloc_r+0x3a>
 8005c92:	001a      	movs	r2, r3
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	42a3      	cmp	r3, r4
 8005c98:	d1fb      	bne.n	8005c92 <_malloc_r+0xde>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e7da      	b.n	8005c54 <_malloc_r+0xa0>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	0028      	movs	r0, r5
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	f000 f80e 	bl	8005cc4 <__malloc_unlock>
 8005ca8:	e7c6      	b.n	8005c38 <_malloc_r+0x84>
 8005caa:	6007      	str	r7, [r0, #0]
 8005cac:	e7da      	b.n	8005c64 <_malloc_r+0xb0>
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	20001304 	.word	0x20001304

08005cb4 <__malloc_lock>:
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	4802      	ldr	r0, [pc, #8]	@ (8005cc0 <__malloc_lock+0xc>)
 8005cb8:	f7ff ff05 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	200012fc 	.word	0x200012fc

08005cc4 <__malloc_unlock>:
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	4802      	ldr	r0, [pc, #8]	@ (8005cd0 <__malloc_unlock+0xc>)
 8005cc8:	f7ff fefe 	bl	8005ac8 <__retarget_lock_release_recursive>
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	46c0      	nop			@ (mov r8, r8)
 8005cd0:	200012fc 	.word	0x200012fc

08005cd4 <__sfputc_r>:
 8005cd4:	6893      	ldr	r3, [r2, #8]
 8005cd6:	b510      	push	{r4, lr}
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	6093      	str	r3, [r2, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da04      	bge.n	8005cea <__sfputc_r+0x16>
 8005ce0:	6994      	ldr	r4, [r2, #24]
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	db07      	blt.n	8005cf6 <__sfputc_r+0x22>
 8005ce6:	290a      	cmp	r1, #10
 8005ce8:	d005      	beq.n	8005cf6 <__sfputc_r+0x22>
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	1c58      	adds	r0, r3, #1
 8005cee:	6010      	str	r0, [r2, #0]
 8005cf0:	7019      	strb	r1, [r3, #0]
 8005cf2:	0008      	movs	r0, r1
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	f000 fb60 	bl	80063ba <__swbuf_r>
 8005cfa:	0001      	movs	r1, r0
 8005cfc:	e7f9      	b.n	8005cf2 <__sfputc_r+0x1e>

08005cfe <__sfputs_r>:
 8005cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d00:	0006      	movs	r6, r0
 8005d02:	000f      	movs	r7, r1
 8005d04:	0014      	movs	r4, r2
 8005d06:	18d5      	adds	r5, r2, r3
 8005d08:	42ac      	cmp	r4, r5
 8005d0a:	d101      	bne.n	8005d10 <__sfputs_r+0x12>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e007      	b.n	8005d20 <__sfputs_r+0x22>
 8005d10:	7821      	ldrb	r1, [r4, #0]
 8005d12:	003a      	movs	r2, r7
 8005d14:	0030      	movs	r0, r6
 8005d16:	f7ff ffdd 	bl	8005cd4 <__sfputc_r>
 8005d1a:	3401      	adds	r4, #1
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d1f3      	bne.n	8005d08 <__sfputs_r+0xa>
 8005d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d24 <_vfiprintf_r>:
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d26:	b0a1      	sub	sp, #132	@ 0x84
 8005d28:	000f      	movs	r7, r1
 8005d2a:	0015      	movs	r5, r2
 8005d2c:	001e      	movs	r6, r3
 8005d2e:	9003      	str	r0, [sp, #12]
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d004      	beq.n	8005d3e <_vfiprintf_r+0x1a>
 8005d34:	6a03      	ldr	r3, [r0, #32]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <_vfiprintf_r+0x1a>
 8005d3a:	f7ff fd53 	bl	80057e4 <__sinit>
 8005d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d40:	07db      	lsls	r3, r3, #31
 8005d42:	d405      	bmi.n	8005d50 <_vfiprintf_r+0x2c>
 8005d44:	89bb      	ldrh	r3, [r7, #12]
 8005d46:	059b      	lsls	r3, r3, #22
 8005d48:	d402      	bmi.n	8005d50 <_vfiprintf_r+0x2c>
 8005d4a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005d4c:	f7ff febb 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 8005d50:	89bb      	ldrh	r3, [r7, #12]
 8005d52:	071b      	lsls	r3, r3, #28
 8005d54:	d502      	bpl.n	8005d5c <_vfiprintf_r+0x38>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d113      	bne.n	8005d84 <_vfiprintf_r+0x60>
 8005d5c:	0039      	movs	r1, r7
 8005d5e:	9803      	ldr	r0, [sp, #12]
 8005d60:	f000 fb6e 	bl	8006440 <__swsetup_r>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d00d      	beq.n	8005d84 <_vfiprintf_r+0x60>
 8005d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d6a:	07db      	lsls	r3, r3, #31
 8005d6c:	d503      	bpl.n	8005d76 <_vfiprintf_r+0x52>
 8005d6e:	2001      	movs	r0, #1
 8005d70:	4240      	negs	r0, r0
 8005d72:	b021      	add	sp, #132	@ 0x84
 8005d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d76:	89bb      	ldrh	r3, [r7, #12]
 8005d78:	059b      	lsls	r3, r3, #22
 8005d7a:	d4f8      	bmi.n	8005d6e <_vfiprintf_r+0x4a>
 8005d7c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005d7e:	f7ff fea3 	bl	8005ac8 <__retarget_lock_release_recursive>
 8005d82:	e7f4      	b.n	8005d6e <_vfiprintf_r+0x4a>
 8005d84:	2300      	movs	r3, #0
 8005d86:	ac08      	add	r4, sp, #32
 8005d88:	6163      	str	r3, [r4, #20]
 8005d8a:	3320      	adds	r3, #32
 8005d8c:	7663      	strb	r3, [r4, #25]
 8005d8e:	3310      	adds	r3, #16
 8005d90:	76a3      	strb	r3, [r4, #26]
 8005d92:	9607      	str	r6, [sp, #28]
 8005d94:	002e      	movs	r6, r5
 8005d96:	7833      	ldrb	r3, [r6, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <_vfiprintf_r+0x7c>
 8005d9c:	2b25      	cmp	r3, #37	@ 0x25
 8005d9e:	d148      	bne.n	8005e32 <_vfiprintf_r+0x10e>
 8005da0:	1b73      	subs	r3, r6, r5
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	42ae      	cmp	r6, r5
 8005da6:	d00b      	beq.n	8005dc0 <_vfiprintf_r+0x9c>
 8005da8:	002a      	movs	r2, r5
 8005daa:	0039      	movs	r1, r7
 8005dac:	9803      	ldr	r0, [sp, #12]
 8005dae:	f7ff ffa6 	bl	8005cfe <__sfputs_r>
 8005db2:	3001      	adds	r0, #1
 8005db4:	d100      	bne.n	8005db8 <_vfiprintf_r+0x94>
 8005db6:	e0ae      	b.n	8005f16 <_vfiprintf_r+0x1f2>
 8005db8:	6963      	ldr	r3, [r4, #20]
 8005dba:	9a05      	ldr	r2, [sp, #20]
 8005dbc:	189b      	adds	r3, r3, r2
 8005dbe:	6163      	str	r3, [r4, #20]
 8005dc0:	7833      	ldrb	r3, [r6, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d100      	bne.n	8005dc8 <_vfiprintf_r+0xa4>
 8005dc6:	e0a6      	b.n	8005f16 <_vfiprintf_r+0x1f2>
 8005dc8:	2201      	movs	r2, #1
 8005dca:	2300      	movs	r3, #0
 8005dcc:	4252      	negs	r2, r2
 8005dce:	6062      	str	r2, [r4, #4]
 8005dd0:	a904      	add	r1, sp, #16
 8005dd2:	3254      	adds	r2, #84	@ 0x54
 8005dd4:	1852      	adds	r2, r2, r1
 8005dd6:	1c75      	adds	r5, r6, #1
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	60e3      	str	r3, [r4, #12]
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	7013      	strb	r3, [r2, #0]
 8005de0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005de2:	4b59      	ldr	r3, [pc, #356]	@ (8005f48 <_vfiprintf_r+0x224>)
 8005de4:	2205      	movs	r2, #5
 8005de6:	0018      	movs	r0, r3
 8005de8:	7829      	ldrb	r1, [r5, #0]
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	f000 fb98 	bl	8006520 <memchr>
 8005df0:	1c6e      	adds	r6, r5, #1
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d11f      	bne.n	8005e36 <_vfiprintf_r+0x112>
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	06d3      	lsls	r3, r2, #27
 8005dfa:	d504      	bpl.n	8005e06 <_vfiprintf_r+0xe2>
 8005dfc:	2353      	movs	r3, #83	@ 0x53
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	185b      	adds	r3, r3, r1
 8005e02:	2120      	movs	r1, #32
 8005e04:	7019      	strb	r1, [r3, #0]
 8005e06:	0713      	lsls	r3, r2, #28
 8005e08:	d504      	bpl.n	8005e14 <_vfiprintf_r+0xf0>
 8005e0a:	2353      	movs	r3, #83	@ 0x53
 8005e0c:	a904      	add	r1, sp, #16
 8005e0e:	185b      	adds	r3, r3, r1
 8005e10:	212b      	movs	r1, #43	@ 0x2b
 8005e12:	7019      	strb	r1, [r3, #0]
 8005e14:	782b      	ldrb	r3, [r5, #0]
 8005e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e18:	d016      	beq.n	8005e48 <_vfiprintf_r+0x124>
 8005e1a:	002e      	movs	r6, r5
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	200a      	movs	r0, #10
 8005e20:	68e3      	ldr	r3, [r4, #12]
 8005e22:	7832      	ldrb	r2, [r6, #0]
 8005e24:	1c75      	adds	r5, r6, #1
 8005e26:	3a30      	subs	r2, #48	@ 0x30
 8005e28:	2a09      	cmp	r2, #9
 8005e2a:	d950      	bls.n	8005ece <_vfiprintf_r+0x1aa>
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d111      	bne.n	8005e54 <_vfiprintf_r+0x130>
 8005e30:	e017      	b.n	8005e62 <_vfiprintf_r+0x13e>
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7af      	b.n	8005d96 <_vfiprintf_r+0x72>
 8005e36:	9b05      	ldr	r3, [sp, #20]
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	1ac0      	subs	r0, r0, r3
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	4083      	lsls	r3, r0
 8005e40:	4313      	orrs	r3, r2
 8005e42:	0035      	movs	r5, r6
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	e7cc      	b.n	8005de2 <_vfiprintf_r+0xbe>
 8005e48:	9b07      	ldr	r3, [sp, #28]
 8005e4a:	1d19      	adds	r1, r3, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	9107      	str	r1, [sp, #28]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	db01      	blt.n	8005e58 <_vfiprintf_r+0x134>
 8005e54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e56:	e004      	b.n	8005e62 <_vfiprintf_r+0x13e>
 8005e58:	425b      	negs	r3, r3
 8005e5a:	60e3      	str	r3, [r4, #12]
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	7833      	ldrb	r3, [r6, #0]
 8005e64:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e66:	d10c      	bne.n	8005e82 <_vfiprintf_r+0x15e>
 8005e68:	7873      	ldrb	r3, [r6, #1]
 8005e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e6c:	d134      	bne.n	8005ed8 <_vfiprintf_r+0x1b4>
 8005e6e:	9b07      	ldr	r3, [sp, #28]
 8005e70:	3602      	adds	r6, #2
 8005e72:	1d1a      	adds	r2, r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	9207      	str	r2, [sp, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	da01      	bge.n	8005e80 <_vfiprintf_r+0x15c>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	425b      	negs	r3, r3
 8005e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e82:	4d32      	ldr	r5, [pc, #200]	@ (8005f4c <_vfiprintf_r+0x228>)
 8005e84:	2203      	movs	r2, #3
 8005e86:	0028      	movs	r0, r5
 8005e88:	7831      	ldrb	r1, [r6, #0]
 8005e8a:	f000 fb49 	bl	8006520 <memchr>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d006      	beq.n	8005ea0 <_vfiprintf_r+0x17c>
 8005e92:	2340      	movs	r3, #64	@ 0x40
 8005e94:	1b40      	subs	r0, r0, r5
 8005e96:	4083      	lsls	r3, r0
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	3601      	adds	r6, #1
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	7831      	ldrb	r1, [r6, #0]
 8005ea2:	2206      	movs	r2, #6
 8005ea4:	482a      	ldr	r0, [pc, #168]	@ (8005f50 <_vfiprintf_r+0x22c>)
 8005ea6:	1c75      	adds	r5, r6, #1
 8005ea8:	7621      	strb	r1, [r4, #24]
 8005eaa:	f000 fb39 	bl	8006520 <memchr>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d040      	beq.n	8005f34 <_vfiprintf_r+0x210>
 8005eb2:	4b28      	ldr	r3, [pc, #160]	@ (8005f54 <_vfiprintf_r+0x230>)
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d122      	bne.n	8005efe <_vfiprintf_r+0x1da>
 8005eb8:	2207      	movs	r2, #7
 8005eba:	9b07      	ldr	r3, [sp, #28]
 8005ebc:	3307      	adds	r3, #7
 8005ebe:	4393      	bics	r3, r2
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	9307      	str	r3, [sp, #28]
 8005ec4:	6963      	ldr	r3, [r4, #20]
 8005ec6:	9a04      	ldr	r2, [sp, #16]
 8005ec8:	189b      	adds	r3, r3, r2
 8005eca:	6163      	str	r3, [r4, #20]
 8005ecc:	e762      	b.n	8005d94 <_vfiprintf_r+0x70>
 8005ece:	4343      	muls	r3, r0
 8005ed0:	002e      	movs	r6, r5
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	189b      	adds	r3, r3, r2
 8005ed6:	e7a4      	b.n	8005e22 <_vfiprintf_r+0xfe>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	200a      	movs	r0, #10
 8005edc:	0019      	movs	r1, r3
 8005ede:	3601      	adds	r6, #1
 8005ee0:	6063      	str	r3, [r4, #4]
 8005ee2:	7832      	ldrb	r2, [r6, #0]
 8005ee4:	1c75      	adds	r5, r6, #1
 8005ee6:	3a30      	subs	r2, #48	@ 0x30
 8005ee8:	2a09      	cmp	r2, #9
 8005eea:	d903      	bls.n	8005ef4 <_vfiprintf_r+0x1d0>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0c8      	beq.n	8005e82 <_vfiprintf_r+0x15e>
 8005ef0:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ef2:	e7c6      	b.n	8005e82 <_vfiprintf_r+0x15e>
 8005ef4:	4341      	muls	r1, r0
 8005ef6:	002e      	movs	r6, r5
 8005ef8:	2301      	movs	r3, #1
 8005efa:	1889      	adds	r1, r1, r2
 8005efc:	e7f1      	b.n	8005ee2 <_vfiprintf_r+0x1be>
 8005efe:	aa07      	add	r2, sp, #28
 8005f00:	9200      	str	r2, [sp, #0]
 8005f02:	0021      	movs	r1, r4
 8005f04:	003a      	movs	r2, r7
 8005f06:	4b14      	ldr	r3, [pc, #80]	@ (8005f58 <_vfiprintf_r+0x234>)
 8005f08:	9803      	ldr	r0, [sp, #12]
 8005f0a:	e000      	b.n	8005f0e <_vfiprintf_r+0x1ea>
 8005f0c:	bf00      	nop
 8005f0e:	9004      	str	r0, [sp, #16]
 8005f10:	9b04      	ldr	r3, [sp, #16]
 8005f12:	3301      	adds	r3, #1
 8005f14:	d1d6      	bne.n	8005ec4 <_vfiprintf_r+0x1a0>
 8005f16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f18:	07db      	lsls	r3, r3, #31
 8005f1a:	d405      	bmi.n	8005f28 <_vfiprintf_r+0x204>
 8005f1c:	89bb      	ldrh	r3, [r7, #12]
 8005f1e:	059b      	lsls	r3, r3, #22
 8005f20:	d402      	bmi.n	8005f28 <_vfiprintf_r+0x204>
 8005f22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005f24:	f7ff fdd0 	bl	8005ac8 <__retarget_lock_release_recursive>
 8005f28:	89bb      	ldrh	r3, [r7, #12]
 8005f2a:	065b      	lsls	r3, r3, #25
 8005f2c:	d500      	bpl.n	8005f30 <_vfiprintf_r+0x20c>
 8005f2e:	e71e      	b.n	8005d6e <_vfiprintf_r+0x4a>
 8005f30:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005f32:	e71e      	b.n	8005d72 <_vfiprintf_r+0x4e>
 8005f34:	aa07      	add	r2, sp, #28
 8005f36:	9200      	str	r2, [sp, #0]
 8005f38:	0021      	movs	r1, r4
 8005f3a:	003a      	movs	r2, r7
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <_vfiprintf_r+0x234>)
 8005f3e:	9803      	ldr	r0, [sp, #12]
 8005f40:	f000 f87c 	bl	800603c <_printf_i>
 8005f44:	e7e3      	b.n	8005f0e <_vfiprintf_r+0x1ea>
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	0800674c 	.word	0x0800674c
 8005f4c:	08006752 	.word	0x08006752
 8005f50:	08006756 	.word	0x08006756
 8005f54:	00000000 	.word	0x00000000
 8005f58:	08005cff 	.word	0x08005cff

08005f5c <_printf_common>:
 8005f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f5e:	0016      	movs	r6, r2
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	688a      	ldr	r2, [r1, #8]
 8005f64:	690b      	ldr	r3, [r1, #16]
 8005f66:	000c      	movs	r4, r1
 8005f68:	9000      	str	r0, [sp, #0]
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	da00      	bge.n	8005f70 <_printf_common+0x14>
 8005f6e:	0013      	movs	r3, r2
 8005f70:	0022      	movs	r2, r4
 8005f72:	6033      	str	r3, [r6, #0]
 8005f74:	3243      	adds	r2, #67	@ 0x43
 8005f76:	7812      	ldrb	r2, [r2, #0]
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	d001      	beq.n	8005f80 <_printf_common+0x24>
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	6033      	str	r3, [r6, #0]
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	069b      	lsls	r3, r3, #26
 8005f84:	d502      	bpl.n	8005f8c <_printf_common+0x30>
 8005f86:	6833      	ldr	r3, [r6, #0]
 8005f88:	3302      	adds	r3, #2
 8005f8a:	6033      	str	r3, [r6, #0]
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	2306      	movs	r3, #6
 8005f90:	0015      	movs	r5, r2
 8005f92:	401d      	ands	r5, r3
 8005f94:	421a      	tst	r2, r3
 8005f96:	d027      	beq.n	8005fe8 <_printf_common+0x8c>
 8005f98:	0023      	movs	r3, r4
 8005f9a:	3343      	adds	r3, #67	@ 0x43
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	1e5a      	subs	r2, r3, #1
 8005fa0:	4193      	sbcs	r3, r2
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	0692      	lsls	r2, r2, #26
 8005fa6:	d430      	bmi.n	800600a <_printf_common+0xae>
 8005fa8:	0022      	movs	r2, r4
 8005faa:	9901      	ldr	r1, [sp, #4]
 8005fac:	9800      	ldr	r0, [sp, #0]
 8005fae:	9d08      	ldr	r5, [sp, #32]
 8005fb0:	3243      	adds	r2, #67	@ 0x43
 8005fb2:	47a8      	blx	r5
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d025      	beq.n	8006004 <_printf_common+0xa8>
 8005fb8:	2206      	movs	r2, #6
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	2500      	movs	r5, #0
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d105      	bne.n	8005fd0 <_printf_common+0x74>
 8005fc4:	6833      	ldr	r3, [r6, #0]
 8005fc6:	68e5      	ldr	r5, [r4, #12]
 8005fc8:	1aed      	subs	r5, r5, r3
 8005fca:	43eb      	mvns	r3, r5
 8005fcc:	17db      	asrs	r3, r3, #31
 8005fce:	401d      	ands	r5, r3
 8005fd0:	68a3      	ldr	r3, [r4, #8]
 8005fd2:	6922      	ldr	r2, [r4, #16]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	dd01      	ble.n	8005fdc <_printf_common+0x80>
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	18ed      	adds	r5, r5, r3
 8005fdc:	2600      	movs	r6, #0
 8005fde:	42b5      	cmp	r5, r6
 8005fe0:	d120      	bne.n	8006024 <_printf_common+0xc8>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e010      	b.n	8006008 <_printf_common+0xac>
 8005fe6:	3501      	adds	r5, #1
 8005fe8:	68e3      	ldr	r3, [r4, #12]
 8005fea:	6832      	ldr	r2, [r6, #0]
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	42ab      	cmp	r3, r5
 8005ff0:	ddd2      	ble.n	8005f98 <_printf_common+0x3c>
 8005ff2:	0022      	movs	r2, r4
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	9901      	ldr	r1, [sp, #4]
 8005ff8:	9800      	ldr	r0, [sp, #0]
 8005ffa:	9f08      	ldr	r7, [sp, #32]
 8005ffc:	3219      	adds	r2, #25
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	d1f0      	bne.n	8005fe6 <_printf_common+0x8a>
 8006004:	2001      	movs	r0, #1
 8006006:	4240      	negs	r0, r0
 8006008:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800600a:	2030      	movs	r0, #48	@ 0x30
 800600c:	18e1      	adds	r1, r4, r3
 800600e:	3143      	adds	r1, #67	@ 0x43
 8006010:	7008      	strb	r0, [r1, #0]
 8006012:	0021      	movs	r1, r4
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	3145      	adds	r1, #69	@ 0x45
 8006018:	7809      	ldrb	r1, [r1, #0]
 800601a:	18a2      	adds	r2, r4, r2
 800601c:	3243      	adds	r2, #67	@ 0x43
 800601e:	3302      	adds	r3, #2
 8006020:	7011      	strb	r1, [r2, #0]
 8006022:	e7c1      	b.n	8005fa8 <_printf_common+0x4c>
 8006024:	0022      	movs	r2, r4
 8006026:	2301      	movs	r3, #1
 8006028:	9901      	ldr	r1, [sp, #4]
 800602a:	9800      	ldr	r0, [sp, #0]
 800602c:	9f08      	ldr	r7, [sp, #32]
 800602e:	321a      	adds	r2, #26
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	d0e6      	beq.n	8006004 <_printf_common+0xa8>
 8006036:	3601      	adds	r6, #1
 8006038:	e7d1      	b.n	8005fde <_printf_common+0x82>
	...

0800603c <_printf_i>:
 800603c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603e:	b08b      	sub	sp, #44	@ 0x2c
 8006040:	9206      	str	r2, [sp, #24]
 8006042:	000a      	movs	r2, r1
 8006044:	3243      	adds	r2, #67	@ 0x43
 8006046:	9307      	str	r3, [sp, #28]
 8006048:	9005      	str	r0, [sp, #20]
 800604a:	9203      	str	r2, [sp, #12]
 800604c:	7e0a      	ldrb	r2, [r1, #24]
 800604e:	000c      	movs	r4, r1
 8006050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006052:	2a78      	cmp	r2, #120	@ 0x78
 8006054:	d809      	bhi.n	800606a <_printf_i+0x2e>
 8006056:	2a62      	cmp	r2, #98	@ 0x62
 8006058:	d80b      	bhi.n	8006072 <_printf_i+0x36>
 800605a:	2a00      	cmp	r2, #0
 800605c:	d100      	bne.n	8006060 <_printf_i+0x24>
 800605e:	e0bc      	b.n	80061da <_printf_i+0x19e>
 8006060:	497b      	ldr	r1, [pc, #492]	@ (8006250 <_printf_i+0x214>)
 8006062:	9104      	str	r1, [sp, #16]
 8006064:	2a58      	cmp	r2, #88	@ 0x58
 8006066:	d100      	bne.n	800606a <_printf_i+0x2e>
 8006068:	e090      	b.n	800618c <_printf_i+0x150>
 800606a:	0025      	movs	r5, r4
 800606c:	3542      	adds	r5, #66	@ 0x42
 800606e:	702a      	strb	r2, [r5, #0]
 8006070:	e022      	b.n	80060b8 <_printf_i+0x7c>
 8006072:	0010      	movs	r0, r2
 8006074:	3863      	subs	r0, #99	@ 0x63
 8006076:	2815      	cmp	r0, #21
 8006078:	d8f7      	bhi.n	800606a <_printf_i+0x2e>
 800607a:	f7fa f845 	bl	8000108 <__gnu_thumb1_case_shi>
 800607e:	0016      	.short	0x0016
 8006080:	fff6001f 	.word	0xfff6001f
 8006084:	fff6fff6 	.word	0xfff6fff6
 8006088:	001ffff6 	.word	0x001ffff6
 800608c:	fff6fff6 	.word	0xfff6fff6
 8006090:	fff6fff6 	.word	0xfff6fff6
 8006094:	003600a1 	.word	0x003600a1
 8006098:	fff60080 	.word	0xfff60080
 800609c:	00b2fff6 	.word	0x00b2fff6
 80060a0:	0036fff6 	.word	0x0036fff6
 80060a4:	fff6fff6 	.word	0xfff6fff6
 80060a8:	0084      	.short	0x0084
 80060aa:	0025      	movs	r5, r4
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	3542      	adds	r5, #66	@ 0x42
 80060b0:	1d11      	adds	r1, r2, #4
 80060b2:	6019      	str	r1, [r3, #0]
 80060b4:	6813      	ldr	r3, [r2, #0]
 80060b6:	702b      	strb	r3, [r5, #0]
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0a0      	b.n	80061fe <_printf_i+0x1c2>
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	6809      	ldr	r1, [r1, #0]
 80060c0:	1d02      	adds	r2, r0, #4
 80060c2:	060d      	lsls	r5, r1, #24
 80060c4:	d50b      	bpl.n	80060de <_printf_i+0xa2>
 80060c6:	6806      	ldr	r6, [r0, #0]
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	da03      	bge.n	80060d6 <_printf_i+0x9a>
 80060ce:	232d      	movs	r3, #45	@ 0x2d
 80060d0:	9a03      	ldr	r2, [sp, #12]
 80060d2:	4276      	negs	r6, r6
 80060d4:	7013      	strb	r3, [r2, #0]
 80060d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006250 <_printf_i+0x214>)
 80060d8:	270a      	movs	r7, #10
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	e018      	b.n	8006110 <_printf_i+0xd4>
 80060de:	6806      	ldr	r6, [r0, #0]
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	0649      	lsls	r1, r1, #25
 80060e4:	d5f1      	bpl.n	80060ca <_printf_i+0x8e>
 80060e6:	b236      	sxth	r6, r6
 80060e8:	e7ef      	b.n	80060ca <_printf_i+0x8e>
 80060ea:	6808      	ldr	r0, [r1, #0]
 80060ec:	6819      	ldr	r1, [r3, #0]
 80060ee:	c940      	ldmia	r1!, {r6}
 80060f0:	0605      	lsls	r5, r0, #24
 80060f2:	d402      	bmi.n	80060fa <_printf_i+0xbe>
 80060f4:	0640      	lsls	r0, r0, #25
 80060f6:	d500      	bpl.n	80060fa <_printf_i+0xbe>
 80060f8:	b2b6      	uxth	r6, r6
 80060fa:	6019      	str	r1, [r3, #0]
 80060fc:	4b54      	ldr	r3, [pc, #336]	@ (8006250 <_printf_i+0x214>)
 80060fe:	270a      	movs	r7, #10
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	2a6f      	cmp	r2, #111	@ 0x6f
 8006104:	d100      	bne.n	8006108 <_printf_i+0xcc>
 8006106:	3f02      	subs	r7, #2
 8006108:	0023      	movs	r3, r4
 800610a:	2200      	movs	r2, #0
 800610c:	3343      	adds	r3, #67	@ 0x43
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	60a3      	str	r3, [r4, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	db03      	blt.n	8006120 <_printf_i+0xe4>
 8006118:	2104      	movs	r1, #4
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	438a      	bics	r2, r1
 800611e:	6022      	str	r2, [r4, #0]
 8006120:	2e00      	cmp	r6, #0
 8006122:	d102      	bne.n	800612a <_printf_i+0xee>
 8006124:	9d03      	ldr	r5, [sp, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <_printf_i+0x108>
 800612a:	9d03      	ldr	r5, [sp, #12]
 800612c:	0030      	movs	r0, r6
 800612e:	0039      	movs	r1, r7
 8006130:	f7fa f87a 	bl	8000228 <__aeabi_uidivmod>
 8006134:	9b04      	ldr	r3, [sp, #16]
 8006136:	3d01      	subs	r5, #1
 8006138:	5c5b      	ldrb	r3, [r3, r1]
 800613a:	702b      	strb	r3, [r5, #0]
 800613c:	0033      	movs	r3, r6
 800613e:	0006      	movs	r6, r0
 8006140:	429f      	cmp	r7, r3
 8006142:	d9f3      	bls.n	800612c <_printf_i+0xf0>
 8006144:	2f08      	cmp	r7, #8
 8006146:	d109      	bne.n	800615c <_printf_i+0x120>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	07db      	lsls	r3, r3, #31
 800614c:	d506      	bpl.n	800615c <_printf_i+0x120>
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	429a      	cmp	r2, r3
 8006154:	dc02      	bgt.n	800615c <_printf_i+0x120>
 8006156:	2330      	movs	r3, #48	@ 0x30
 8006158:	3d01      	subs	r5, #1
 800615a:	702b      	strb	r3, [r5, #0]
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	1b5b      	subs	r3, r3, r5
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	9b07      	ldr	r3, [sp, #28]
 8006164:	0021      	movs	r1, r4
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	9805      	ldr	r0, [sp, #20]
 800616a:	9b06      	ldr	r3, [sp, #24]
 800616c:	aa09      	add	r2, sp, #36	@ 0x24
 800616e:	f7ff fef5 	bl	8005f5c <_printf_common>
 8006172:	3001      	adds	r0, #1
 8006174:	d148      	bne.n	8006208 <_printf_i+0x1cc>
 8006176:	2001      	movs	r0, #1
 8006178:	4240      	negs	r0, r0
 800617a:	b00b      	add	sp, #44	@ 0x2c
 800617c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617e:	2220      	movs	r2, #32
 8006180:	6809      	ldr	r1, [r1, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	6022      	str	r2, [r4, #0]
 8006186:	2278      	movs	r2, #120	@ 0x78
 8006188:	4932      	ldr	r1, [pc, #200]	@ (8006254 <_printf_i+0x218>)
 800618a:	9104      	str	r1, [sp, #16]
 800618c:	0021      	movs	r1, r4
 800618e:	3145      	adds	r1, #69	@ 0x45
 8006190:	700a      	strb	r2, [r1, #0]
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	6822      	ldr	r2, [r4, #0]
 8006196:	c940      	ldmia	r1!, {r6}
 8006198:	0610      	lsls	r0, r2, #24
 800619a:	d402      	bmi.n	80061a2 <_printf_i+0x166>
 800619c:	0650      	lsls	r0, r2, #25
 800619e:	d500      	bpl.n	80061a2 <_printf_i+0x166>
 80061a0:	b2b6      	uxth	r6, r6
 80061a2:	6019      	str	r1, [r3, #0]
 80061a4:	07d3      	lsls	r3, r2, #31
 80061a6:	d502      	bpl.n	80061ae <_printf_i+0x172>
 80061a8:	2320      	movs	r3, #32
 80061aa:	4313      	orrs	r3, r2
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	2e00      	cmp	r6, #0
 80061b0:	d001      	beq.n	80061b6 <_printf_i+0x17a>
 80061b2:	2710      	movs	r7, #16
 80061b4:	e7a8      	b.n	8006108 <_printf_i+0xcc>
 80061b6:	2220      	movs	r2, #32
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	4393      	bics	r3, r2
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	e7f8      	b.n	80061b2 <_printf_i+0x176>
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	680d      	ldr	r5, [r1, #0]
 80061c4:	1d10      	adds	r0, r2, #4
 80061c6:	6949      	ldr	r1, [r1, #20]
 80061c8:	6018      	str	r0, [r3, #0]
 80061ca:	6813      	ldr	r3, [r2, #0]
 80061cc:	062e      	lsls	r6, r5, #24
 80061ce:	d501      	bpl.n	80061d4 <_printf_i+0x198>
 80061d0:	6019      	str	r1, [r3, #0]
 80061d2:	e002      	b.n	80061da <_printf_i+0x19e>
 80061d4:	066d      	lsls	r5, r5, #25
 80061d6:	d5fb      	bpl.n	80061d0 <_printf_i+0x194>
 80061d8:	8019      	strh	r1, [r3, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	9d03      	ldr	r5, [sp, #12]
 80061de:	6123      	str	r3, [r4, #16]
 80061e0:	e7bf      	b.n	8006162 <_printf_i+0x126>
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	1d11      	adds	r1, r2, #4
 80061e6:	6019      	str	r1, [r3, #0]
 80061e8:	6815      	ldr	r5, [r2, #0]
 80061ea:	2100      	movs	r1, #0
 80061ec:	0028      	movs	r0, r5
 80061ee:	6862      	ldr	r2, [r4, #4]
 80061f0:	f000 f996 	bl	8006520 <memchr>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d001      	beq.n	80061fc <_printf_i+0x1c0>
 80061f8:	1b40      	subs	r0, r0, r5
 80061fa:	6060      	str	r0, [r4, #4]
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	2300      	movs	r3, #0
 8006202:	9a03      	ldr	r2, [sp, #12]
 8006204:	7013      	strb	r3, [r2, #0]
 8006206:	e7ac      	b.n	8006162 <_printf_i+0x126>
 8006208:	002a      	movs	r2, r5
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	9906      	ldr	r1, [sp, #24]
 800620e:	9805      	ldr	r0, [sp, #20]
 8006210:	9d07      	ldr	r5, [sp, #28]
 8006212:	47a8      	blx	r5
 8006214:	3001      	adds	r0, #1
 8006216:	d0ae      	beq.n	8006176 <_printf_i+0x13a>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	079b      	lsls	r3, r3, #30
 800621c:	d415      	bmi.n	800624a <_printf_i+0x20e>
 800621e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006220:	68e0      	ldr	r0, [r4, #12]
 8006222:	4298      	cmp	r0, r3
 8006224:	daa9      	bge.n	800617a <_printf_i+0x13e>
 8006226:	0018      	movs	r0, r3
 8006228:	e7a7      	b.n	800617a <_printf_i+0x13e>
 800622a:	0022      	movs	r2, r4
 800622c:	2301      	movs	r3, #1
 800622e:	9906      	ldr	r1, [sp, #24]
 8006230:	9805      	ldr	r0, [sp, #20]
 8006232:	9e07      	ldr	r6, [sp, #28]
 8006234:	3219      	adds	r2, #25
 8006236:	47b0      	blx	r6
 8006238:	3001      	adds	r0, #1
 800623a:	d09c      	beq.n	8006176 <_printf_i+0x13a>
 800623c:	3501      	adds	r5, #1
 800623e:	68e3      	ldr	r3, [r4, #12]
 8006240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	42ab      	cmp	r3, r5
 8006246:	dcf0      	bgt.n	800622a <_printf_i+0x1ee>
 8006248:	e7e9      	b.n	800621e <_printf_i+0x1e2>
 800624a:	2500      	movs	r5, #0
 800624c:	e7f7      	b.n	800623e <_printf_i+0x202>
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	0800675d 	.word	0x0800675d
 8006254:	0800676e 	.word	0x0800676e

08006258 <__sflush_r>:
 8006258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800625a:	220c      	movs	r2, #12
 800625c:	5e8b      	ldrsh	r3, [r1, r2]
 800625e:	0005      	movs	r5, r0
 8006260:	000c      	movs	r4, r1
 8006262:	071a      	lsls	r2, r3, #28
 8006264:	d456      	bmi.n	8006314 <__sflush_r+0xbc>
 8006266:	684a      	ldr	r2, [r1, #4]
 8006268:	2a00      	cmp	r2, #0
 800626a:	dc02      	bgt.n	8006272 <__sflush_r+0x1a>
 800626c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800626e:	2a00      	cmp	r2, #0
 8006270:	dd4e      	ble.n	8006310 <__sflush_r+0xb8>
 8006272:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006274:	2f00      	cmp	r7, #0
 8006276:	d04b      	beq.n	8006310 <__sflush_r+0xb8>
 8006278:	2200      	movs	r2, #0
 800627a:	2080      	movs	r0, #128	@ 0x80
 800627c:	682e      	ldr	r6, [r5, #0]
 800627e:	602a      	str	r2, [r5, #0]
 8006280:	001a      	movs	r2, r3
 8006282:	0140      	lsls	r0, r0, #5
 8006284:	6a21      	ldr	r1, [r4, #32]
 8006286:	4002      	ands	r2, r0
 8006288:	4203      	tst	r3, r0
 800628a:	d033      	beq.n	80062f4 <__sflush_r+0x9c>
 800628c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	075b      	lsls	r3, r3, #29
 8006292:	d506      	bpl.n	80062a2 <__sflush_r+0x4a>
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <__sflush_r+0x4a>
 800629e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062a0:	1ad2      	subs	r2, r2, r3
 80062a2:	2300      	movs	r3, #0
 80062a4:	0028      	movs	r0, r5
 80062a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80062a8:	6a21      	ldr	r1, [r4, #32]
 80062aa:	47b8      	blx	r7
 80062ac:	89a2      	ldrh	r2, [r4, #12]
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	d106      	bne.n	80062c0 <__sflush_r+0x68>
 80062b2:	6829      	ldr	r1, [r5, #0]
 80062b4:	291d      	cmp	r1, #29
 80062b6:	d846      	bhi.n	8006346 <__sflush_r+0xee>
 80062b8:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <__sflush_r+0x108>)
 80062ba:	410b      	asrs	r3, r1
 80062bc:	07db      	lsls	r3, r3, #31
 80062be:	d442      	bmi.n	8006346 <__sflush_r+0xee>
 80062c0:	2300      	movs	r3, #0
 80062c2:	6063      	str	r3, [r4, #4]
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	04d2      	lsls	r2, r2, #19
 80062ca:	d505      	bpl.n	80062d8 <__sflush_r+0x80>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <__sflush_r+0x7e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d100      	bne.n	80062d8 <__sflush_r+0x80>
 80062d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80062d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062da:	602e      	str	r6, [r5, #0]
 80062dc:	2900      	cmp	r1, #0
 80062de:	d017      	beq.n	8006310 <__sflush_r+0xb8>
 80062e0:	0023      	movs	r3, r4
 80062e2:	3344      	adds	r3, #68	@ 0x44
 80062e4:	4299      	cmp	r1, r3
 80062e6:	d002      	beq.n	80062ee <__sflush_r+0x96>
 80062e8:	0028      	movs	r0, r5
 80062ea:	f7ff fbf7 	bl	8005adc <_free_r>
 80062ee:	2300      	movs	r3, #0
 80062f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80062f2:	e00d      	b.n	8006310 <__sflush_r+0xb8>
 80062f4:	2301      	movs	r3, #1
 80062f6:	0028      	movs	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	0002      	movs	r2, r0
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d1c6      	bne.n	800628e <__sflush_r+0x36>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0c3      	beq.n	800628e <__sflush_r+0x36>
 8006306:	2b1d      	cmp	r3, #29
 8006308:	d001      	beq.n	800630e <__sflush_r+0xb6>
 800630a:	2b16      	cmp	r3, #22
 800630c:	d11a      	bne.n	8006344 <__sflush_r+0xec>
 800630e:	602e      	str	r6, [r5, #0]
 8006310:	2000      	movs	r0, #0
 8006312:	e01e      	b.n	8006352 <__sflush_r+0xfa>
 8006314:	690e      	ldr	r6, [r1, #16]
 8006316:	2e00      	cmp	r6, #0
 8006318:	d0fa      	beq.n	8006310 <__sflush_r+0xb8>
 800631a:	680f      	ldr	r7, [r1, #0]
 800631c:	600e      	str	r6, [r1, #0]
 800631e:	1bba      	subs	r2, r7, r6
 8006320:	9201      	str	r2, [sp, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	079b      	lsls	r3, r3, #30
 8006326:	d100      	bne.n	800632a <__sflush_r+0xd2>
 8006328:	694a      	ldr	r2, [r1, #20]
 800632a:	60a2      	str	r2, [r4, #8]
 800632c:	9b01      	ldr	r3, [sp, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	ddee      	ble.n	8006310 <__sflush_r+0xb8>
 8006332:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006334:	0032      	movs	r2, r6
 8006336:	001f      	movs	r7, r3
 8006338:	0028      	movs	r0, r5
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	6a21      	ldr	r1, [r4, #32]
 800633e:	47b8      	blx	r7
 8006340:	2800      	cmp	r0, #0
 8006342:	dc07      	bgt.n	8006354 <__sflush_r+0xfc>
 8006344:	89a2      	ldrh	r2, [r4, #12]
 8006346:	2340      	movs	r3, #64	@ 0x40
 8006348:	2001      	movs	r0, #1
 800634a:	4313      	orrs	r3, r2
 800634c:	b21b      	sxth	r3, r3
 800634e:	81a3      	strh	r3, [r4, #12]
 8006350:	4240      	negs	r0, r0
 8006352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	1836      	adds	r6, r6, r0
 8006358:	1a1b      	subs	r3, r3, r0
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	e7e6      	b.n	800632c <__sflush_r+0xd4>
 800635e:	46c0      	nop			@ (mov r8, r8)
 8006360:	dfbffffe 	.word	0xdfbffffe

08006364 <_fflush_r>:
 8006364:	690b      	ldr	r3, [r1, #16]
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	0005      	movs	r5, r0
 800636a:	000c      	movs	r4, r1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d102      	bne.n	8006376 <_fflush_r+0x12>
 8006370:	2500      	movs	r5, #0
 8006372:	0028      	movs	r0, r5
 8006374:	bd70      	pop	{r4, r5, r6, pc}
 8006376:	2800      	cmp	r0, #0
 8006378:	d004      	beq.n	8006384 <_fflush_r+0x20>
 800637a:	6a03      	ldr	r3, [r0, #32]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <_fflush_r+0x20>
 8006380:	f7ff fa30 	bl	80057e4 <__sinit>
 8006384:	220c      	movs	r2, #12
 8006386:	5ea3      	ldrsh	r3, [r4, r2]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f1      	beq.n	8006370 <_fflush_r+0xc>
 800638c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800638e:	07d2      	lsls	r2, r2, #31
 8006390:	d404      	bmi.n	800639c <_fflush_r+0x38>
 8006392:	059b      	lsls	r3, r3, #22
 8006394:	d402      	bmi.n	800639c <_fflush_r+0x38>
 8006396:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006398:	f7ff fb95 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 800639c:	0028      	movs	r0, r5
 800639e:	0021      	movs	r1, r4
 80063a0:	f7ff ff5a 	bl	8006258 <__sflush_r>
 80063a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063a6:	0005      	movs	r5, r0
 80063a8:	07db      	lsls	r3, r3, #31
 80063aa:	d4e2      	bmi.n	8006372 <_fflush_r+0xe>
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	059b      	lsls	r3, r3, #22
 80063b0:	d4df      	bmi.n	8006372 <_fflush_r+0xe>
 80063b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063b4:	f7ff fb88 	bl	8005ac8 <__retarget_lock_release_recursive>
 80063b8:	e7db      	b.n	8006372 <_fflush_r+0xe>

080063ba <__swbuf_r>:
 80063ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063bc:	0006      	movs	r6, r0
 80063be:	000d      	movs	r5, r1
 80063c0:	0014      	movs	r4, r2
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d004      	beq.n	80063d0 <__swbuf_r+0x16>
 80063c6:	6a03      	ldr	r3, [r0, #32]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <__swbuf_r+0x16>
 80063cc:	f7ff fa0a 	bl	80057e4 <__sinit>
 80063d0:	69a3      	ldr	r3, [r4, #24]
 80063d2:	60a3      	str	r3, [r4, #8]
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	071b      	lsls	r3, r3, #28
 80063d8:	d502      	bpl.n	80063e0 <__swbuf_r+0x26>
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <__swbuf_r+0x3a>
 80063e0:	0021      	movs	r1, r4
 80063e2:	0030      	movs	r0, r6
 80063e4:	f000 f82c 	bl	8006440 <__swsetup_r>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d003      	beq.n	80063f4 <__swbuf_r+0x3a>
 80063ec:	2501      	movs	r5, #1
 80063ee:	426d      	negs	r5, r5
 80063f0:	0028      	movs	r0, r5
 80063f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f4:	6923      	ldr	r3, [r4, #16]
 80063f6:	6820      	ldr	r0, [r4, #0]
 80063f8:	b2ef      	uxtb	r7, r5
 80063fa:	1ac0      	subs	r0, r0, r3
 80063fc:	6963      	ldr	r3, [r4, #20]
 80063fe:	b2ed      	uxtb	r5, r5
 8006400:	4283      	cmp	r3, r0
 8006402:	dc05      	bgt.n	8006410 <__swbuf_r+0x56>
 8006404:	0021      	movs	r1, r4
 8006406:	0030      	movs	r0, r6
 8006408:	f7ff ffac 	bl	8006364 <_fflush_r>
 800640c:	2800      	cmp	r0, #0
 800640e:	d1ed      	bne.n	80063ec <__swbuf_r+0x32>
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	3001      	adds	r0, #1
 8006414:	3b01      	subs	r3, #1
 8006416:	60a3      	str	r3, [r4, #8]
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	701f      	strb	r7, [r3, #0]
 8006420:	6963      	ldr	r3, [r4, #20]
 8006422:	4283      	cmp	r3, r0
 8006424:	d004      	beq.n	8006430 <__swbuf_r+0x76>
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	07db      	lsls	r3, r3, #31
 800642a:	d5e1      	bpl.n	80063f0 <__swbuf_r+0x36>
 800642c:	2d0a      	cmp	r5, #10
 800642e:	d1df      	bne.n	80063f0 <__swbuf_r+0x36>
 8006430:	0021      	movs	r1, r4
 8006432:	0030      	movs	r0, r6
 8006434:	f7ff ff96 	bl	8006364 <_fflush_r>
 8006438:	2800      	cmp	r0, #0
 800643a:	d0d9      	beq.n	80063f0 <__swbuf_r+0x36>
 800643c:	e7d6      	b.n	80063ec <__swbuf_r+0x32>
	...

08006440 <__swsetup_r>:
 8006440:	4b2d      	ldr	r3, [pc, #180]	@ (80064f8 <__swsetup_r+0xb8>)
 8006442:	b570      	push	{r4, r5, r6, lr}
 8006444:	0005      	movs	r5, r0
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	000c      	movs	r4, r1
 800644a:	2800      	cmp	r0, #0
 800644c:	d004      	beq.n	8006458 <__swsetup_r+0x18>
 800644e:	6a03      	ldr	r3, [r0, #32]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <__swsetup_r+0x18>
 8006454:	f7ff f9c6 	bl	80057e4 <__sinit>
 8006458:	230c      	movs	r3, #12
 800645a:	5ee2      	ldrsh	r2, [r4, r3]
 800645c:	0713      	lsls	r3, r2, #28
 800645e:	d423      	bmi.n	80064a8 <__swsetup_r+0x68>
 8006460:	06d3      	lsls	r3, r2, #27
 8006462:	d407      	bmi.n	8006474 <__swsetup_r+0x34>
 8006464:	2309      	movs	r3, #9
 8006466:	602b      	str	r3, [r5, #0]
 8006468:	2340      	movs	r3, #64	@ 0x40
 800646a:	2001      	movs	r0, #1
 800646c:	4313      	orrs	r3, r2
 800646e:	81a3      	strh	r3, [r4, #12]
 8006470:	4240      	negs	r0, r0
 8006472:	e03a      	b.n	80064ea <__swsetup_r+0xaa>
 8006474:	0752      	lsls	r2, r2, #29
 8006476:	d513      	bpl.n	80064a0 <__swsetup_r+0x60>
 8006478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800647a:	2900      	cmp	r1, #0
 800647c:	d008      	beq.n	8006490 <__swsetup_r+0x50>
 800647e:	0023      	movs	r3, r4
 8006480:	3344      	adds	r3, #68	@ 0x44
 8006482:	4299      	cmp	r1, r3
 8006484:	d002      	beq.n	800648c <__swsetup_r+0x4c>
 8006486:	0028      	movs	r0, r5
 8006488:	f7ff fb28 	bl	8005adc <_free_r>
 800648c:	2300      	movs	r3, #0
 800648e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006490:	2224      	movs	r2, #36	@ 0x24
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	4393      	bics	r3, r2
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	2300      	movs	r3, #0
 800649a:	6063      	str	r3, [r4, #4]
 800649c:	6923      	ldr	r3, [r4, #16]
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	2308      	movs	r3, #8
 80064a2:	89a2      	ldrh	r2, [r4, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	81a3      	strh	r3, [r4, #12]
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10b      	bne.n	80064c6 <__swsetup_r+0x86>
 80064ae:	21a0      	movs	r1, #160	@ 0xa0
 80064b0:	2280      	movs	r2, #128	@ 0x80
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	0089      	lsls	r1, r1, #2
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	400b      	ands	r3, r1
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <__swsetup_r+0x86>
 80064be:	0021      	movs	r1, r4
 80064c0:	0028      	movs	r0, r5
 80064c2:	f000 f863 	bl	800658c <__smakebuf_r>
 80064c6:	230c      	movs	r3, #12
 80064c8:	5ee2      	ldrsh	r2, [r4, r3]
 80064ca:	2101      	movs	r1, #1
 80064cc:	0013      	movs	r3, r2
 80064ce:	400b      	ands	r3, r1
 80064d0:	420a      	tst	r2, r1
 80064d2:	d00b      	beq.n	80064ec <__swsetup_r+0xac>
 80064d4:	2300      	movs	r3, #0
 80064d6:	60a3      	str	r3, [r4, #8]
 80064d8:	6963      	ldr	r3, [r4, #20]
 80064da:	425b      	negs	r3, r3
 80064dc:	61a3      	str	r3, [r4, #24]
 80064de:	2000      	movs	r0, #0
 80064e0:	6923      	ldr	r3, [r4, #16]
 80064e2:	4283      	cmp	r3, r0
 80064e4:	d101      	bne.n	80064ea <__swsetup_r+0xaa>
 80064e6:	0613      	lsls	r3, r2, #24
 80064e8:	d4be      	bmi.n	8006468 <__swsetup_r+0x28>
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	0791      	lsls	r1, r2, #30
 80064ee:	d400      	bmi.n	80064f2 <__swsetup_r+0xb2>
 80064f0:	6963      	ldr	r3, [r4, #20]
 80064f2:	60a3      	str	r3, [r4, #8]
 80064f4:	e7f3      	b.n	80064de <__swsetup_r+0x9e>
 80064f6:	46c0      	nop			@ (mov r8, r8)
 80064f8:	2000002c 	.word	0x2000002c

080064fc <_sbrk_r>:
 80064fc:	2300      	movs	r3, #0
 80064fe:	b570      	push	{r4, r5, r6, lr}
 8006500:	4d06      	ldr	r5, [pc, #24]	@ (800651c <_sbrk_r+0x20>)
 8006502:	0004      	movs	r4, r0
 8006504:	0008      	movs	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fa fd64 	bl	8000fd4 <_sbrk>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d103      	bne.n	8006518 <_sbrk_r+0x1c>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d000      	beq.n	8006518 <_sbrk_r+0x1c>
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	bd70      	pop	{r4, r5, r6, pc}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	200012f8 	.word	0x200012f8

08006520 <memchr>:
 8006520:	b2c9      	uxtb	r1, r1
 8006522:	1882      	adds	r2, r0, r2
 8006524:	4290      	cmp	r0, r2
 8006526:	d101      	bne.n	800652c <memchr+0xc>
 8006528:	2000      	movs	r0, #0
 800652a:	4770      	bx	lr
 800652c:	7803      	ldrb	r3, [r0, #0]
 800652e:	428b      	cmp	r3, r1
 8006530:	d0fb      	beq.n	800652a <memchr+0xa>
 8006532:	3001      	adds	r0, #1
 8006534:	e7f6      	b.n	8006524 <memchr+0x4>
	...

08006538 <__swhatbuf_r>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	000e      	movs	r6, r1
 800653c:	001d      	movs	r5, r3
 800653e:	230e      	movs	r3, #14
 8006540:	5ec9      	ldrsh	r1, [r1, r3]
 8006542:	0014      	movs	r4, r2
 8006544:	b096      	sub	sp, #88	@ 0x58
 8006546:	2900      	cmp	r1, #0
 8006548:	da0c      	bge.n	8006564 <__swhatbuf_r+0x2c>
 800654a:	89b2      	ldrh	r2, [r6, #12]
 800654c:	2380      	movs	r3, #128	@ 0x80
 800654e:	0011      	movs	r1, r2
 8006550:	4019      	ands	r1, r3
 8006552:	421a      	tst	r2, r3
 8006554:	d114      	bne.n	8006580 <__swhatbuf_r+0x48>
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	2000      	movs	r0, #0
 800655c:	6029      	str	r1, [r5, #0]
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	b016      	add	sp, #88	@ 0x58
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	466a      	mov	r2, sp
 8006566:	f000 f853 	bl	8006610 <_fstat_r>
 800656a:	2800      	cmp	r0, #0
 800656c:	dbed      	blt.n	800654a <__swhatbuf_r+0x12>
 800656e:	23f0      	movs	r3, #240	@ 0xf0
 8006570:	9901      	ldr	r1, [sp, #4]
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	4019      	ands	r1, r3
 8006576:	4b04      	ldr	r3, [pc, #16]	@ (8006588 <__swhatbuf_r+0x50>)
 8006578:	18c9      	adds	r1, r1, r3
 800657a:	424b      	negs	r3, r1
 800657c:	4159      	adcs	r1, r3
 800657e:	e7ea      	b.n	8006556 <__swhatbuf_r+0x1e>
 8006580:	2100      	movs	r1, #0
 8006582:	2340      	movs	r3, #64	@ 0x40
 8006584:	e7e9      	b.n	800655a <__swhatbuf_r+0x22>
 8006586:	46c0      	nop			@ (mov r8, r8)
 8006588:	ffffe000 	.word	0xffffe000

0800658c <__smakebuf_r>:
 800658c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658e:	2602      	movs	r6, #2
 8006590:	898b      	ldrh	r3, [r1, #12]
 8006592:	0005      	movs	r5, r0
 8006594:	000c      	movs	r4, r1
 8006596:	b085      	sub	sp, #20
 8006598:	4233      	tst	r3, r6
 800659a:	d007      	beq.n	80065ac <__smakebuf_r+0x20>
 800659c:	0023      	movs	r3, r4
 800659e:	3347      	adds	r3, #71	@ 0x47
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	6123      	str	r3, [r4, #16]
 80065a4:	2301      	movs	r3, #1
 80065a6:	6163      	str	r3, [r4, #20]
 80065a8:	b005      	add	sp, #20
 80065aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ac:	ab03      	add	r3, sp, #12
 80065ae:	aa02      	add	r2, sp, #8
 80065b0:	f7ff ffc2 	bl	8006538 <__swhatbuf_r>
 80065b4:	9f02      	ldr	r7, [sp, #8]
 80065b6:	9001      	str	r0, [sp, #4]
 80065b8:	0039      	movs	r1, r7
 80065ba:	0028      	movs	r0, r5
 80065bc:	f7ff fafa 	bl	8005bb4 <_malloc_r>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d108      	bne.n	80065d6 <__smakebuf_r+0x4a>
 80065c4:	220c      	movs	r2, #12
 80065c6:	5ea3      	ldrsh	r3, [r4, r2]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d4ed      	bmi.n	80065a8 <__smakebuf_r+0x1c>
 80065cc:	2203      	movs	r2, #3
 80065ce:	4393      	bics	r3, r2
 80065d0:	431e      	orrs	r6, r3
 80065d2:	81a6      	strh	r6, [r4, #12]
 80065d4:	e7e2      	b.n	800659c <__smakebuf_r+0x10>
 80065d6:	2380      	movs	r3, #128	@ 0x80
 80065d8:	89a2      	ldrh	r2, [r4, #12]
 80065da:	6020      	str	r0, [r4, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	6120      	str	r0, [r4, #16]
 80065e4:	6167      	str	r7, [r4, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00c      	beq.n	8006604 <__smakebuf_r+0x78>
 80065ea:	0028      	movs	r0, r5
 80065ec:	230e      	movs	r3, #14
 80065ee:	5ee1      	ldrsh	r1, [r4, r3]
 80065f0:	f000 f820 	bl	8006634 <_isatty_r>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d005      	beq.n	8006604 <__smakebuf_r+0x78>
 80065f8:	2303      	movs	r3, #3
 80065fa:	89a2      	ldrh	r2, [r4, #12]
 80065fc:	439a      	bics	r2, r3
 80065fe:	3b02      	subs	r3, #2
 8006600:	4313      	orrs	r3, r2
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	9a01      	ldr	r2, [sp, #4]
 8006608:	4313      	orrs	r3, r2
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	e7cc      	b.n	80065a8 <__smakebuf_r+0x1c>
	...

08006610 <_fstat_r>:
 8006610:	2300      	movs	r3, #0
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	4d06      	ldr	r5, [pc, #24]	@ (8006630 <_fstat_r+0x20>)
 8006616:	0004      	movs	r4, r0
 8006618:	0008      	movs	r0, r1
 800661a:	0011      	movs	r1, r2
 800661c:	602b      	str	r3, [r5, #0]
 800661e:	f7fa fcb6 	bl	8000f8e <_fstat>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d103      	bne.n	800662e <_fstat_r+0x1e>
 8006626:	682b      	ldr	r3, [r5, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d000      	beq.n	800662e <_fstat_r+0x1e>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	200012f8 	.word	0x200012f8

08006634 <_isatty_r>:
 8006634:	2300      	movs	r3, #0
 8006636:	b570      	push	{r4, r5, r6, lr}
 8006638:	4d06      	ldr	r5, [pc, #24]	@ (8006654 <_isatty_r+0x20>)
 800663a:	0004      	movs	r4, r0
 800663c:	0008      	movs	r0, r1
 800663e:	602b      	str	r3, [r5, #0]
 8006640:	f7fa fcb3 	bl	8000faa <_isatty>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d103      	bne.n	8006650 <_isatty_r+0x1c>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d000      	beq.n	8006650 <_isatty_r+0x1c>
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	200012f8 	.word	0x200012f8

08006658 <_init>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	46c0      	nop			@ (mov r8, r8)
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr

08006664 <_fini>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr
