
cv11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800886c  0800886c  0000a11c  2**0
                  CONTENTS
  4 .ARM          00000008  0800886c  0800886c  0000986c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008874  08008874  0000a11c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008874  08008874  00009874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008878  08008878  00009878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  0800887c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a11c  2**0
                  CONTENTS
 10 .bss          00000a40  2000011c  2000011c  0000a11c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b5c  20000b5c  0000a11c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a11c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010597  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7e  00000000  00000000  0001a6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  0001d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009eb  00000000  00000000  0001df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253a7  00000000  00000000  0001e973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ba1  00000000  00000000  00043d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d61a5  00000000  00000000  000558bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ba60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003848  00000000  00000000  0012baa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0012f2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008424 	.word	0x08008424

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008424 	.word	0x08008424

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b96a 	b.w	8000d18 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9d08      	ldr	r5, [sp, #32]
 8000a62:	460c      	mov	r4, r1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d14e      	bne.n	8000b06 <__udivmoddi4+0xaa>
 8000a68:	4694      	mov	ip, r2
 8000a6a:	458c      	cmp	ip, r1
 8000a6c:	4686      	mov	lr, r0
 8000a6e:	fab2 f282 	clz	r2, r2
 8000a72:	d962      	bls.n	8000b3a <__udivmoddi4+0xde>
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0320 	rsb	r3, r2, #32
 8000a7a:	4091      	lsls	r1, r2
 8000a7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a84:	4319      	orrs	r1, r3
 8000a86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8e:	fa1f f68c 	uxth.w	r6, ip
 8000a92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa2:	fb04 f106 	mul.w	r1, r4, r6
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x64>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ab2:	f080 8112 	bcs.w	8000cda <__udivmoddi4+0x27e>
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	f240 810f 	bls.w	8000cda <__udivmoddi4+0x27e>
 8000abc:	3c02      	subs	r4, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	1a59      	subs	r1, r3, r1
 8000ac2:	fa1f f38e 	uxth.w	r3, lr
 8000ac6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aca:	fb07 1110 	mls	r1, r7, r0, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb00 f606 	mul.w	r6, r0, r6
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x94>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae2:	f080 80fc 	bcs.w	8000cde <__udivmoddi4+0x282>
 8000ae6:	429e      	cmp	r6, r3
 8000ae8:	f240 80f9 	bls.w	8000cde <__udivmoddi4+0x282>
 8000aec:	4463      	add	r3, ip
 8000aee:	3802      	subs	r0, #2
 8000af0:	1b9b      	subs	r3, r3, r6
 8000af2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000af6:	2100      	movs	r1, #0
 8000af8:	b11d      	cbz	r5, 8000b02 <__udivmoddi4+0xa6>
 8000afa:	40d3      	lsrs	r3, r2
 8000afc:	2200      	movs	r2, #0
 8000afe:	e9c5 3200 	strd	r3, r2, [r5]
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d905      	bls.n	8000b16 <__udivmoddi4+0xba>
 8000b0a:	b10d      	cbz	r5, 8000b10 <__udivmoddi4+0xb4>
 8000b0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b10:	2100      	movs	r1, #0
 8000b12:	4608      	mov	r0, r1
 8000b14:	e7f5      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000b16:	fab3 f183 	clz	r1, r3
 8000b1a:	2900      	cmp	r1, #0
 8000b1c:	d146      	bne.n	8000bac <__udivmoddi4+0x150>
 8000b1e:	42a3      	cmp	r3, r4
 8000b20:	d302      	bcc.n	8000b28 <__udivmoddi4+0xcc>
 8000b22:	4290      	cmp	r0, r2
 8000b24:	f0c0 80f0 	bcc.w	8000d08 <__udivmoddi4+0x2ac>
 8000b28:	1a86      	subs	r6, r0, r2
 8000b2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b2e:	2001      	movs	r0, #1
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d0e6      	beq.n	8000b02 <__udivmoddi4+0xa6>
 8000b34:	e9c5 6300 	strd	r6, r3, [r5]
 8000b38:	e7e3      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	f040 8090 	bne.w	8000c60 <__udivmoddi4+0x204>
 8000b40:	eba1 040c 	sub.w	r4, r1, ip
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	fa1f f78c 	uxth.w	r7, ip
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b56:	fb08 4416 	mls	r4, r8, r6, r4
 8000b5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5e:	fb07 f006 	mul.w	r0, r7, r6
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x11c>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x11a>
 8000b70:	4298      	cmp	r0, r3
 8000b72:	f200 80cd 	bhi.w	8000d10 <__udivmoddi4+0x2b4>
 8000b76:	4626      	mov	r6, r4
 8000b78:	1a1c      	subs	r4, r3, r0
 8000b7a:	fa1f f38e 	uxth.w	r3, lr
 8000b7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b82:	fb08 4410 	mls	r4, r8, r0, r4
 8000b86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8a:	fb00 f707 	mul.w	r7, r0, r7
 8000b8e:	429f      	cmp	r7, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x148>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b9a:	d202      	bcs.n	8000ba2 <__udivmoddi4+0x146>
 8000b9c:	429f      	cmp	r7, r3
 8000b9e:	f200 80b0 	bhi.w	8000d02 <__udivmoddi4+0x2a6>
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	1bdb      	subs	r3, r3, r7
 8000ba6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000baa:	e7a5      	b.n	8000af8 <__udivmoddi4+0x9c>
 8000bac:	f1c1 0620 	rsb	r6, r1, #32
 8000bb0:	408b      	lsls	r3, r1
 8000bb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bb6:	431f      	orrs	r7, r3
 8000bb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000bc0:	ea43 030c 	orr.w	r3, r3, ip
 8000bc4:	40f4      	lsrs	r4, r6
 8000bc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bca:	0c38      	lsrs	r0, r7, #16
 8000bcc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bd4:	fa1f fc87 	uxth.w	ip, r7
 8000bd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000be0:	fb0e f90c 	mul.w	r9, lr, ip
 8000be4:	45a1      	cmp	r9, r4
 8000be6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bea:	d90a      	bls.n	8000c02 <__udivmoddi4+0x1a6>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bf2:	f080 8084 	bcs.w	8000cfe <__udivmoddi4+0x2a2>
 8000bf6:	45a1      	cmp	r9, r4
 8000bf8:	f240 8081 	bls.w	8000cfe <__udivmoddi4+0x2a2>
 8000bfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	eba4 0409 	sub.w	r4, r4, r9
 8000c06:	fa1f f983 	uxth.w	r9, r3
 8000c0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c1a:	45a4      	cmp	ip, r4
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x1d2>
 8000c1e:	193c      	adds	r4, r7, r4
 8000c20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c24:	d267      	bcs.n	8000cf6 <__udivmoddi4+0x29a>
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0x29a>
 8000c2a:	3b02      	subs	r3, #2
 8000c2c:	443c      	add	r4, r7
 8000c2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c32:	fba0 9302 	umull	r9, r3, r0, r2
 8000c36:	eba4 040c 	sub.w	r4, r4, ip
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	46ce      	mov	lr, r9
 8000c3e:	469c      	mov	ip, r3
 8000c40:	d351      	bcc.n	8000ce6 <__udivmoddi4+0x28a>
 8000c42:	d04e      	beq.n	8000ce2 <__udivmoddi4+0x286>
 8000c44:	b155      	cbz	r5, 8000c5c <__udivmoddi4+0x200>
 8000c46:	ebb8 030e 	subs.w	r3, r8, lr
 8000c4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c52:	40cb      	lsrs	r3, r1
 8000c54:	431e      	orrs	r6, r3
 8000c56:	40cc      	lsrs	r4, r1
 8000c58:	e9c5 6400 	strd	r6, r4, [r5]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e750      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000c60:	f1c2 0320 	rsb	r3, r2, #32
 8000c64:	fa20 f103 	lsr.w	r1, r0, r3
 8000c68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c70:	4094      	lsls	r4, r2
 8000c72:	430c      	orrs	r4, r1
 8000c74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7c:	fa1f f78c 	uxth.w	r7, ip
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3110 	mls	r1, r8, r0, r3
 8000c88:	0c23      	lsrs	r3, r4, #16
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f107 	mul.w	r1, r0, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x24c>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c9e:	d22c      	bcs.n	8000cfa <__udivmoddi4+0x29e>
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d92a      	bls.n	8000cfa <__udivmoddi4+0x29e>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cb0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb01 f307 	mul.w	r3, r1, r7
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x276>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cc8:	d213      	bcs.n	8000cf2 <__udivmoddi4+0x296>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d911      	bls.n	8000cf2 <__udivmoddi4+0x296>
 8000cce:	3902      	subs	r1, #2
 8000cd0:	4464      	add	r4, ip
 8000cd2:	1ae4      	subs	r4, r4, r3
 8000cd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cd8:	e739      	b.n	8000b4e <__udivmoddi4+0xf2>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	e6f0      	b.n	8000ac0 <__udivmoddi4+0x64>
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e706      	b.n	8000af0 <__udivmoddi4+0x94>
 8000ce2:	45c8      	cmp	r8, r9
 8000ce4:	d2ae      	bcs.n	8000c44 <__udivmoddi4+0x1e8>
 8000ce6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cee:	3801      	subs	r0, #1
 8000cf0:	e7a8      	b.n	8000c44 <__udivmoddi4+0x1e8>
 8000cf2:	4631      	mov	r1, r6
 8000cf4:	e7ed      	b.n	8000cd2 <__udivmoddi4+0x276>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	e799      	b.n	8000c2e <__udivmoddi4+0x1d2>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e7d4      	b.n	8000ca8 <__udivmoddi4+0x24c>
 8000cfe:	46d6      	mov	lr, sl
 8000d00:	e77f      	b.n	8000c02 <__udivmoddi4+0x1a6>
 8000d02:	4463      	add	r3, ip
 8000d04:	3802      	subs	r0, #2
 8000d06:	e74d      	b.n	8000ba4 <__udivmoddi4+0x148>
 8000d08:	4606      	mov	r6, r0
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	e70f      	b.n	8000b30 <__udivmoddi4+0xd4>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	e730      	b.n	8000b78 <__udivmoddi4+0x11c>
 8000d16:	bf00      	nop

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <step>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void step(int8_t x,int8_t y, bool btn)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	460b      	mov	r3, r1
 8000d28:	71bb      	strb	r3, [r7, #6]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	717b      	strb	r3, [r7, #5]
	uint8_t buff[4];
	buff[0] = btn; // stiskni leve tlacitko
 8000d2e:	797b      	ldrb	r3, [r7, #5]
 8000d30:	733b      	strb	r3, [r7, #12]
	buff[1] = (int8_t)(x); // posun X +10
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	737b      	strb	r3, [r7, #13]
	buff[2] = (int8_t)(y); // posun Y -3
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0; // bez scrollu
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	2204      	movs	r2, #4
 8000d44:	4619      	mov	r1, r3
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <step+0x48>)
 8000d48:	f004 fdde 	bl	8005908 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <step+0x48>)
 8000d4e:	f004 fe0b 	bl	8005968 <USBD_HID_GetPollingInterval>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fc2f 	bl	80015b8 <HAL_Delay>
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000188 	.word	0x20000188

08000d68 <circle>:

void circle(int radius, float start, float length)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	ed2d 8b02 	vpush	{d8}
 8000d6e:	b08c      	sub	sp, #48	@ 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d78:	edc7 0a01 	vstr	s1, [r7, #4]
    float x, y, phi;
    uint16_t sx = 0, sy = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000d80:	2300      	movs	r3, #0
 8000d82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t steps = 50;
 8000d84:	2332      	movs	r3, #50	@ 0x32
 8000d86:	853b      	strh	r3, [r7, #40]	@ 0x28


    float startAngle = 2 * 3.1416 * start;
 8000d88:	68b8      	ldr	r0, [r7, #8]
 8000d8a:	f7ff fb95 	bl	80004b8 <__aeabi_f2d>
 8000d8e:	a36e      	add	r3, pc, #440	@ (adr r3, 8000f48 <circle+0x1e0>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f7ff fbe8 	bl	8000568 <__aeabi_dmul>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f7ff fdf4 	bl	800098c <__aeabi_d2f>
 8000da4:	4603      	mov	r3, r0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
    float endAngle = 2 * 3.1416 * (start + length);
 8000da8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db4:	ee17 0a90 	vmov	r0, s15
 8000db8:	f7ff fb7e 	bl	80004b8 <__aeabi_f2d>
 8000dbc:	a362      	add	r3, pc, #392	@ (adr r3, 8000f48 <circle+0x1e0>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fbd1 	bl	8000568 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fddd 	bl	800098c <__aeabi_d2f>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	623b      	str	r3, [r7, #32]

    for (uint8_t i = 0; i < steps; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000ddc:	e0a2      	b.n	8000f24 <circle+0x1bc>
    {

        phi = 2 * 3.1416 * i / (steps - 1);
 8000dde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fb56 	bl	8000494 <__aeabi_i2d>
 8000de8:	a357      	add	r3, pc, #348	@ (adr r3, 8000f48 <circle+0x1e0>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f7ff fbbb 	bl	8000568 <__aeabi_dmul>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4614      	mov	r4, r2
 8000df8:	461d      	mov	r5, r3
 8000dfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb48 	bl	8000494 <__aeabi_i2d>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4620      	mov	r0, r4
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	f7ff fcd6 	bl	80007bc <__aeabi_ddiv>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fdb8 	bl	800098c <__aeabi_d2f>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	61fb      	str	r3, [r7, #28]


        x = radius * cosf(phi);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e2a:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e2e:	f006 fd7b 	bl	8007928 <cosf>
 8000e32:	eef0 7a40 	vmov.f32	s15, s0
 8000e36:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e3a:	edc7 7a06 	vstr	s15, [r7, #24]
        y = radius * sinf(phi);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e48:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e4c:	f006 fdb0 	bl	80079b0 <sinf>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
 8000e54:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e58:	edc7 7a05 	vstr	s15, [r7, #20]


        if (phi >= startAngle && phi <= endAngle)
 8000e5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e60:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000e64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	db27      	blt.n	8000ebe <circle+0x156>
 8000e6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e72:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	d81e      	bhi.n	8000ebe <circle+0x156>
        {
            step((int16_t)sx + (int16_t)x, (int16_t)sy + (int16_t)y, 1);
 8000e80:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8c:	ee17 3a90 	vmov	r3, s15
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	b258      	sxtb	r0, r3
 8000e9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea6:	ee17 3a90 	vmov	r3, s15
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff ff30 	bl	8000d1c <step>
 8000ebc:	e01d      	b.n	8000efa <circle+0x192>
        }
        else
        {
            step((int16_t)sx + (int16_t)x, (int16_t)sy + (int16_t)y, 0);
 8000ebe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eca:	ee17 3a90 	vmov	r3, s15
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	b258      	sxtb	r0, r3
 8000ed8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee4:	ee17 3a90 	vmov	r3, s15
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff ff11 	bl	8000d1c <step>
        }


        sx = (int16_t)x;
 8000efa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f02:	ee17 3a90 	vmov	r3, s15
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        sy = (int16_t)y;
 8000f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f12:	ee17 3a90 	vmov	r3, s15
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (uint8_t i = 0; i < steps; i++)
 8000f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000f24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f63f af56 	bhi.w	8000dde <circle+0x76>
    }

    step(0, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff fef0 	bl	8000d1c <step>
}
 8000f3c:	bf00      	nop
 8000f3e:	3730      	adds	r7, #48	@ 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	ecbd 8b02 	vpop	{d8}
 8000f46:	bdb0      	pop	{r4, r5, r7, pc}
 8000f48:	2e48e8a7 	.word	0x2e48e8a7
 8000f4c:	401921ff 	.word	0x401921ff

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fabe 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f84a 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f8dc 	bl	8001118 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f60:	f000 f8b0 	bl	80010c4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000f64:	f006 f86e 	bl	8007044 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000f68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6c:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <main+0x90>)
 8000f6e:	f000 fe05 	bl	8001b7c <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f7      	beq.n	8000f68 <main+0x18>
		  {
		  	  circle(7.5,0,1);
 8000f78:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000f7c:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000fe4 <main+0x94>
 8000f80:	2007      	movs	r0, #7
 8000f82:	f7ff fef1 	bl	8000d68 <circle>
		  	  step(-30,35,0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2123      	movs	r1, #35	@ 0x23
 8000f8a:	f06f 001d 	mvn.w	r0, #29
 8000f8e:	f7ff fec5 	bl	8000d1c <step>
		  	  circle(2,0,1);
 8000f92:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000f96:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000fe4 <main+0x94>
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff fee4 	bl	8000d68 <circle>
		  	  step(60,0,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	203c      	movs	r0, #60	@ 0x3c
 8000fa6:	f7ff feb9 	bl	8000d1c <step>
		  	  circle(2,0,1);
 8000faa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000fae:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000fe4 <main+0x94>
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f7ff fed8 	bl	8000d68 <circle>
		  	  step(-35,10,1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	210a      	movs	r1, #10
 8000fbc:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8000fc0:	f7ff feac 	bl	8000d1c <step>
		  	  step(0,30,0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	211e      	movs	r1, #30
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fea7 	bl	8000d1c <step>
		  	  circle(3.5,0.295,0.4);
 8000fce:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000fe8 <main+0x98>
 8000fd2:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000fec <main+0x9c>
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f7ff fec6 	bl	8000d68 <circle>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000fdc:	e7c4      	b.n	8000f68 <main+0x18>
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	00000000 	.word	0x00000000
 8000fe8:	3ecccccd 	.word	0x3ecccccd
 8000fec:	3e970a3d 	.word	0x3e970a3d

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	@ 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	@ 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 fc66 	bl	80078d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b28      	ldr	r3, [pc, #160]	@ (80010bc <SystemClock_Config+0xcc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	4a27      	ldr	r2, [pc, #156]	@ (80010bc <SystemClock_Config+0xcc>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	@ 0x40
 8001024:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <SystemClock_Config+0xcc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <SystemClock_Config+0xd0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <SystemClock_Config+0xd0>)
 800103a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001050:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800105e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001060:	2304      	movs	r3, #4
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001064:	23a8      	movs	r3, #168	@ 0xa8
 8001066:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800106c:	2307      	movs	r3, #7
 800106e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f001 ffed 	bl	8003054 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001080:	f000 f93c 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001090:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2105      	movs	r1, #5
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fa4e 	bl	8003544 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ae:	f000 f925 	bl	80012fc <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3750      	adds	r7, #80	@ 0x50
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <MX_USART3_UART_Init+0x50>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_USART3_UART_Init+0x4c>)
 80010fc:	f002 fc42 	bl	8003984 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001106:	f000 f8f9 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000138 	.word	0x20000138
 8001114:	40004800 	.word	0x40004800

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b6d      	ldr	r3, [pc, #436]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a6c      	ldr	r2, [pc, #432]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	4b66      	ldr	r3, [pc, #408]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a65      	ldr	r2, [pc, #404]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b63      	ldr	r3, [pc, #396]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b5f      	ldr	r3, [pc, #380]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a5e      	ldr	r2, [pc, #376]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b5c      	ldr	r3, [pc, #368]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b58      	ldr	r3, [pc, #352]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a57      	ldr	r2, [pc, #348]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b55      	ldr	r3, [pc, #340]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a50      	ldr	r2, [pc, #320]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b4e      	ldr	r3, [pc, #312]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b4a      	ldr	r3, [pc, #296]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a49      	ldr	r2, [pc, #292]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 80011c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b47      	ldr	r3, [pc, #284]	@ (80012e8 <MX_GPIO_Init+0x1d0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011dc:	4843      	ldr	r0, [pc, #268]	@ (80012ec <MX_GPIO_Init+0x1d4>)
 80011de:	f000 fce5 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2140      	movs	r1, #64	@ 0x40
 80011e6:	4842      	ldr	r0, [pc, #264]	@ (80012f0 <MX_GPIO_Init+0x1d8>)
 80011e8:	f000 fce0 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	483c      	ldr	r0, [pc, #240]	@ (80012f4 <MX_GPIO_Init+0x1dc>)
 8001204:	f000 fb0e 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001208:	2332      	movs	r3, #50	@ 0x32
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001218:	230b      	movs	r3, #11
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4834      	ldr	r0, [pc, #208]	@ (80012f4 <MX_GPIO_Init+0x1dc>)
 8001224:	f000 fafe 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001228:	2386      	movs	r3, #134	@ 0x86
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001238:	230b      	movs	r3, #11
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	482d      	ldr	r0, [pc, #180]	@ (80012f8 <MX_GPIO_Init+0x1e0>)
 8001244:	f000 faee 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001248:	f244 0381 	movw	r3, #16513	@ 0x4081
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4822      	ldr	r0, [pc, #136]	@ (80012ec <MX_GPIO_Init+0x1d4>)
 8001262:	f000 fadf 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001266:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001278:	230b      	movs	r3, #11
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	481a      	ldr	r0, [pc, #104]	@ (80012ec <MX_GPIO_Init+0x1d4>)
 8001284:	f000 face 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001288:	2340      	movs	r3, #64	@ 0x40
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	@ (80012f0 <MX_GPIO_Init+0x1d8>)
 80012a0:	f000 fac0 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	480e      	ldr	r0, [pc, #56]	@ (80012f0 <MX_GPIO_Init+0x1d8>)
 80012b8:	f000 fab4 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012bc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ce:	230b      	movs	r3, #11
 80012d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_GPIO_Init+0x1d8>)
 80012da:	f000 faa3 	bl	8001824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	@ 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020000 	.word	0x40020000

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	@ (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131c:	6453      	str	r3, [r2, #68]	@ 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a19      	ldr	r2, [pc, #100]	@ (80013dc <HAL_UART_MspInit+0x84>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d12c      	bne.n	80013d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <HAL_UART_MspInit+0x88>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <HAL_UART_MspInit+0x88>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001388:	6413      	str	r3, [r2, #64]	@ 0x40
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <HAL_UART_MspInit+0x88>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_UART_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <HAL_UART_MspInit+0x88>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_UART_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c4:	2307      	movs	r3, #7
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <HAL_UART_MspInit+0x8c>)
 80013d0:	f000 fa28 	bl	8001824 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40004800 	.word	0x40004800
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <NMI_Handler+0x4>

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <MemManage_Handler+0x4>

08001400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <UsageFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143e:	f000 f89b 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <OTG_FS_IRQHandler+0x10>)
 800144e:	f000 fd0a 	bl	8001e66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000664 	.word	0x20000664

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001484:	f7ff ffea 	bl	800145c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	@ (80014bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	@ (80014c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	@ (80014cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f006 fa17 	bl	80078e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff fd4d 	bl	8000f50 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80014c4:	0800887c 	.word	0x0800887c
  ldr r2, =_sbss
 80014c8:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80014cc:	20000b5c 	.word	0x20000b5c

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <HAL_Init+0x40>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_Init+0x40>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <HAL_Init+0x40>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f94f 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fefe 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f967 	bl	800180a <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f92f 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	20000180 	.word	0x20000180

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000180 	.word	0x20000180

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	@ (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	@ (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	@ (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff29 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff3e 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff31 	bl	8001664 <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffa2 	bl	800175c <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e177      	b.n	8001b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8166 	bne.w	8001b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	2b02      	cmp	r3, #2
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80c0 	beq.w	8001b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b66      	ldr	r3, [pc, #408]	@ (8001b48 <HAL_GPIO_Init+0x324>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	4a65      	ldr	r2, [pc, #404]	@ (8001b48 <HAL_GPIO_Init+0x324>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ba:	4b63      	ldr	r3, [pc, #396]	@ (8001b48 <HAL_GPIO_Init+0x324>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c6:	4a61      	ldr	r2, [pc, #388]	@ (8001b4c <HAL_GPIO_Init+0x328>)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a58      	ldr	r2, [pc, #352]	@ (8001b50 <HAL_GPIO_Init+0x32c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d037      	beq.n	8001a62 <HAL_GPIO_Init+0x23e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a57      	ldr	r2, [pc, #348]	@ (8001b54 <HAL_GPIO_Init+0x330>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d031      	beq.n	8001a5e <HAL_GPIO_Init+0x23a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a56      	ldr	r2, [pc, #344]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d02b      	beq.n	8001a5a <HAL_GPIO_Init+0x236>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a55      	ldr	r2, [pc, #340]	@ (8001b5c <HAL_GPIO_Init+0x338>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d025      	beq.n	8001a56 <HAL_GPIO_Init+0x232>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a54      	ldr	r2, [pc, #336]	@ (8001b60 <HAL_GPIO_Init+0x33c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01f      	beq.n	8001a52 <HAL_GPIO_Init+0x22e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a53      	ldr	r2, [pc, #332]	@ (8001b64 <HAL_GPIO_Init+0x340>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d019      	beq.n	8001a4e <HAL_GPIO_Init+0x22a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	@ (8001b68 <HAL_GPIO_Init+0x344>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0x226>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a51      	ldr	r2, [pc, #324]	@ (8001b6c <HAL_GPIO_Init+0x348>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00d      	beq.n	8001a46 <HAL_GPIO_Init+0x222>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a50      	ldr	r2, [pc, #320]	@ (8001b70 <HAL_GPIO_Init+0x34c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0x21e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	@ (8001b74 <HAL_GPIO_Init+0x350>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_GPIO_Init+0x21a>
 8001a3a:	2309      	movs	r3, #9
 8001a3c:	e012      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a3e:	230a      	movs	r3, #10
 8001a40:	e010      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a42:	2308      	movs	r3, #8
 8001a44:	e00e      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a46:	2307      	movs	r3, #7
 8001a48:	e00c      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	e00a      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e008      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a52:	2304      	movs	r3, #4
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e004      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x240>
 8001a62:	2300      	movs	r3, #0
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f002 0203 	and.w	r2, r2, #3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a74:	4935      	ldr	r1, [pc, #212]	@ (8001b4c <HAL_GPIO_Init+0x328>)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a82:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <HAL_GPIO_Init+0x354>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa6:	4a34      	ldr	r2, [pc, #208]	@ (8001b78 <HAL_GPIO_Init+0x354>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <HAL_GPIO_Init+0x354>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad0:	4a29      	ldr	r2, [pc, #164]	@ (8001b78 <HAL_GPIO_Init+0x354>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <HAL_GPIO_Init+0x354>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001afa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b78 <HAL_GPIO_Init+0x354>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <HAL_GPIO_Init+0x354>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b24:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <HAL_GPIO_Init+0x354>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	f67f ae84 	bls.w	8001840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3724      	adds	r7, #36	@ 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020c00 	.word	0x40020c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40021400 	.word	0x40021400
 8001b68:	40021800 	.word	0x40021800
 8001b6c:	40021c00 	.word	0x40021c00
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40022400 	.word	0x40022400
 8001b78:	40013c00 	.word	0x40013c00

08001b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af02      	add	r7, sp, #8
 8001be4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e101      	b.n	8001df4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f005 fb50 	bl	80072b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c1e:	d102      	bne.n	8001c26 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fa85 	bl	800413a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7c1a      	ldrb	r2, [r3, #16]
 8001c38:	f88d 2000 	strb.w	r2, [sp]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c40:	f002 f964 	bl	8003f0c <USB_CoreInit>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0ce      	b.n	8001df4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fa7d 	bl	800415c <USB_SetCurrentMode>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0bf      	b.n	8001df4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e04a      	b.n	8001d10 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	3315      	adds	r3, #21
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	b298      	uxth	r0, r3
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	332e      	adds	r3, #46	@ 0x2e
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3318      	adds	r3, #24
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	331c      	adds	r3, #28
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3320      	adds	r3, #32
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3324      	adds	r3, #36	@ 0x24
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	791b      	ldrb	r3, [r3, #4]
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3af      	bcc.n	8001c7a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	e044      	b.n	8001daa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	3301      	adds	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d3b5      	bcc.n	8001d20 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7c1a      	ldrb	r2, [r3, #16]
 8001dbc:	f88d 2000 	strb.w	r2, [sp]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc4:	f002 fa16 	bl	80041f4 <USB_DevInit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00c      	b.n	8001df4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fa60 	bl	80052b2 <USB_DevDisconnect>

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_PCD_Start+0x1c>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e022      	b.n	8001e5e <HAL_PCD_Start+0x62>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d009      	beq.n	8001e40 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f002 f967 	bl	8004118 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fa0e 	bl	8005270 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e66:	b590      	push	{r4, r7, lr}
 8001e68:	b08d      	sub	sp, #52	@ 0x34
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 facc 	bl	800541a <USB_GetMode>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f040 848c 	bne.w	80027a2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fa30 	bl	80052f4 <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8482 	beq.w	80027a0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fa1d 	bl	80052f4 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d107      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f002 0202 	and.w	r2, r2, #2
 8001ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 fa0b 	bl	80052f4 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d161      	bne.n	8001fac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0210 	bic.w	r2, r2, #16
 8001ef6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f003 020f 	and.w	r2, r3, #15
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	0c5b      	lsrs	r3, r3, #17
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d124      	bne.n	8001f6e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d035      	beq.n	8001f9c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	6a38      	ldr	r0, [r7, #32]
 8001f44:	f003 f842 	bl	8004fcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f54:	441a      	add	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f66:	441a      	add	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	615a      	str	r2, [r3, #20]
 8001f6c:	e016      	b.n	8001f9c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	0c5b      	lsrs	r3, r3, #17
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d110      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f80:	2208      	movs	r2, #8
 8001f82:	4619      	mov	r1, r3
 8001f84:	6a38      	ldr	r0, [r7, #32]
 8001f86:	f003 f821 	bl	8004fcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f96:	441a      	add	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0210 	orr.w	r2, r2, #16
 8001faa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 f99f 	bl	80052f4 <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fbc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001fc0:	f040 80a7 	bne.w	8002112 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 f9a4 	bl	800531a <USB_ReadDevAllOutEpInterrupt>
 8001fd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001fd4:	e099      	b.n	800210a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 808e 	beq.w	80020fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 f9c8 	bl	8005382 <USB_ReadDevOutEPInterrupt>
 8001ff2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	2301      	movs	r3, #1
 800200e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002010:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fe8c 	bl	8002d30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800202e:	461a      	mov	r2, r3
 8002030:	2308      	movs	r3, #8
 8002032:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 ff62 	bl	8002f00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002052:	461a      	mov	r2, r3
 8002054:	2310      	movs	r3, #16
 8002056:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d030      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206a:	2b80      	cmp	r3, #128	@ 0x80
 800206c:	d109      	bne.n	8002082 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800207c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002080:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d108      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2200      	movs	r2, #0
 80020a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f005 fa13 	bl	80074d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020be:	461a      	mov	r2, r3
 80020c0:	2302      	movs	r3, #2
 80020c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020da:	461a      	mov	r2, r3
 80020dc:	2320      	movs	r3, #32
 80020de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020f6:	461a      	mov	r2, r3
 80020f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	3301      	adds	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800210a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f af62 	bne.w	8001fd6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 f8ec 	bl	80052f4 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002122:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002126:	f040 80db 	bne.w	80022e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f90d 	bl	800534e <USB_ReadDevAllInEpInterrupt>
 8002134:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800213a:	e0cd      	b.n	80022d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80c2 	beq.w	80022cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f003 f933 	bl	80053be <USB_ReadDevInEPInterrupt>
 8002158:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d057      	beq.n	8002214 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	2201      	movs	r2, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	69f9      	ldr	r1, [r7, #28]
 8002180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002184:	4013      	ands	r3, r2
 8002186:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002194:	461a      	mov	r2, r3
 8002196:	2301      	movs	r3, #1
 8002198:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	799b      	ldrb	r3, [r3, #6]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d132      	bne.n	8002208 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3320      	adds	r3, #32
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4403      	add	r3, r0
 80021c2:	331c      	adds	r3, #28
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4419      	add	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4403      	add	r3, r0
 80021d6:	3320      	adds	r3, #32
 80021d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d113      	bne.n	8002208 <HAL_PCD_IRQHandler+0x3a2>
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	3324      	adds	r3, #36	@ 0x24
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d108      	bne.n	8002208 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002200:	461a      	mov	r2, r3
 8002202:	2101      	movs	r1, #1
 8002204:	f003 f93a 	bl	800547c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f005 f8dd 	bl	80073ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800222a:	461a      	mov	r2, r3
 800222c:	2308      	movs	r3, #8
 800222e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002246:	461a      	mov	r2, r3
 8002248:	2310      	movs	r3, #16
 800224a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002262:	461a      	mov	r2, r3
 8002264:	2340      	movs	r3, #64	@ 0x40
 8002266:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d023      	beq.n	80022ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002272:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002274:	6a38      	ldr	r0, [r7, #32]
 8002276:	f002 f921 	bl	80044bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800227a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	3310      	adds	r3, #16
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	3304      	adds	r3, #4
 800228c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	78db      	ldrb	r3, [r3, #3]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f005 f92a 	bl	80074fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022b4:	461a      	mov	r2, r3
 80022b6:	2302      	movs	r3, #2
 80022b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fca5 	bl	8002c16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	3301      	adds	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f47f af2e 	bne.w	800213c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 f805 	bl	80052f4 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022f4:	d122      	bne.n	800233c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800231c:	2100      	movs	r1, #0
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fe8c 	bl	800303c <HAL_PCDEx_LPM_Callback>
 8002324:	e002      	b.n	800232c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f005 f8c8 	bl	80074bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800233a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f002 ffd7 	bl	80052f4 <USB_ReadInterrupts>
 8002346:	4603      	mov	r3, r0
 8002348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002350:	d112      	bne.n	8002378 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f005 f884 	bl	8007470 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002376:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 ffb9 	bl	80052f4 <USB_ReadInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800238c:	f040 80b7 	bne.w	80024fe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2110      	movs	r1, #16
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 f886 	bl	80044bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023b4:	e046      	b.n	8002444 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023c2:	461a      	mov	r2, r3
 80023c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023da:	0151      	lsls	r1, r2, #5
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	440a      	add	r2, r1
 80023e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80023e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f6:	461a      	mov	r2, r3
 80023f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800240e:	0151      	lsls	r1, r2, #5
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	440a      	add	r2, r1
 8002414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002418:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800241c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800241e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800242e:	0151      	lsls	r1, r2, #5
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	440a      	add	r2, r1
 8002434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002438:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800243c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002440:	3301      	adds	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	791b      	ldrb	r3, [r3, #4]
 8002448:	461a      	mov	r2, r3
 800244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244c:	4293      	cmp	r3, r2
 800244e:	d3b2      	bcc.n	80023b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800245e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002462:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7bdb      	ldrb	r3, [r3, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d016      	beq.n	800249a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800247c:	f043 030b 	orr.w	r3, r3, #11
 8002480:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800248a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002492:	f043 030b 	orr.w	r3, r3, #11
 8002496:	6453      	str	r3, [r2, #68]	@ 0x44
 8002498:	e015      	b.n	80024c6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024ac:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80024b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024c0:	f043 030b 	orr.w	r3, r3, #11
 80024c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024d4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80024d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024e8:	461a      	mov	r2, r3
 80024ea:	f002 ffc7 	bl	800547c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fef6 	bl	80052f4 <USB_ReadInterrupts>
 8002508:	4603      	mov	r3, r0
 800250a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002512:	d123      	bne.n	800255c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f002 ff8c 	bl	8005436 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f002 f843 	bl	80045ae <USB_GetDevSpeed>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	f001 f9f2 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8002538:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800253e:	461a      	mov	r2, r3
 8002540:	4620      	mov	r0, r4
 8002542:	f001 fd47 	bl	8003fd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f004 ff69 	bl	800741e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800255a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f002 fec7 	bl	80052f4 <USB_ReadInterrupts>
 8002566:	4603      	mov	r3, r0
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b08      	cmp	r3, #8
 800256e:	d10a      	bne.n	8002586 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f004 ff46 	bl	8007402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f002 0208 	and.w	r2, r2, #8
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f002 feb2 	bl	80052f4 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002596:	2b80      	cmp	r3, #128	@ 0x80
 8002598:	d123      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025a6:	2301      	movs	r3, #1
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025aa:	e014      	b.n	80025d6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 faf2 	bl	8002bb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	3301      	adds	r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	791b      	ldrb	r3, [r3, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	4293      	cmp	r3, r2
 80025e0:	d3e4      	bcc.n	80025ac <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fe84 	bl	80052f4 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025f6:	d13c      	bne.n	8002672 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025f8:	2301      	movs	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fc:	e02b      	b.n	8002656 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3318      	adds	r3, #24
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d115      	bne.n	8002650 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002624:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	da12      	bge.n	8002650 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3317      	adds	r3, #23
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fab2 	bl	8002bb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	3301      	adds	r3, #1
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	791b      	ldrb	r3, [r3, #4]
 800265a:	461a      	mov	r2, r3
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	4293      	cmp	r3, r2
 8002660:	d3cd      	bcc.n	80025fe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fe3c 	bl	80052f4 <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002686:	d156      	bne.n	8002736 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002688:	2301      	movs	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
 800268c:	e045      	b.n	800271a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d12e      	bne.n	8002714 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da2b      	bge.n	8002714 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80026c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d121      	bne.n	8002714 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800270c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002710:	6053      	str	r3, [r2, #4]
            break;
 8002712:	e008      	b.n	8002726 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	3301      	adds	r3, #1
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	4293      	cmp	r3, r2
 8002724:	d3b3      	bcc.n	800268e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fdda 	bl	80052f4 <USB_ReadInterrupts>
 8002740:	4603      	mov	r3, r0
 8002742:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274a:	d10a      	bne.n	8002762 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f004 fee7 	bl	8007520 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fdc4 	bl	80052f4 <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b04      	cmp	r3, #4
 8002774:	d115      	bne.n	80027a2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f004 fed7 	bl	800753c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	e000      	b.n	80027a2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80027a0:	bf00      	nop
    }
  }
}
 80027a2:	3734      	adds	r7, #52	@ 0x34
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_PCD_SetAddress+0x1a>
 80027be:	2302      	movs	r3, #2
 80027c0:	e012      	b.n	80027e8 <HAL_PCD_SetAddress+0x40>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 fd23 	bl	8005224 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	70fb      	strb	r3, [r7, #3]
 8002802:	460b      	mov	r3, r1
 8002804:	803b      	strh	r3, [r7, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800280e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002812:	2b00      	cmp	r3, #0
 8002814:	da0f      	bge.n	8002836 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	3310      	adds	r3, #16
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	3304      	adds	r3, #4
 800282c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	705a      	strb	r2, [r3, #1]
 8002834:	e00f      	b.n	8002856 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	f003 020f 	and.w	r2, r3, #15
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	4413      	add	r3, r2
 800284c:	3304      	adds	r3, #4
 800284e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002862:	883b      	ldrh	r3, [r7, #0]
 8002864:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	78ba      	ldrb	r2, [r7, #2]
 8002870:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	785b      	ldrb	r3, [r3, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002884:	78bb      	ldrb	r3, [r7, #2]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d102      	bne.n	8002890 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_PCD_EP_Open+0xae>
 800289a:	2302      	movs	r3, #2
 800289c:	e00e      	b.n	80028bc <HAL_PCD_EP_Open+0xcc>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68f9      	ldr	r1, [r7, #12]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 fea3 	bl	80045f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80028ba:	7afb      	ldrb	r3, [r7, #11]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	da0f      	bge.n	80028f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3310      	adds	r3, #16
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	705a      	strb	r2, [r3, #1]
 80028f6:	e00f      	b.n	8002918 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	f003 020f 	and.w	r2, r3, #15
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	3304      	adds	r3, #4
 8002910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_PCD_EP_Close+0x6e>
 800292e:	2302      	movs	r3, #2
 8002930:	e00e      	b.n	8002950 <HAL_PCD_EP_Close+0x8c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fee1 	bl	8004708 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002968:	7afb      	ldrb	r3, [r7, #11]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4413      	add	r3, r2
 800297e:	3304      	adds	r3, #4
 8002980:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	799b      	ldrb	r3, [r3, #6]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	799b      	ldrb	r3, [r3, #6]
 80029bc:	461a      	mov	r2, r3
 80029be:	6979      	ldr	r1, [r7, #20]
 80029c0:	f001 ff7e 	bl	80048c0 <USB_EPStartXfer>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	460b      	mov	r3, r1
 80029dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029de:	7afb      	ldrb	r3, [r7, #11]
 80029e0:	f003 020f 	and.w	r2, r3, #15
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3310      	adds	r3, #16
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	799b      	ldrb	r3, [r3, #6]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d102      	bne.n	8002a28 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	799b      	ldrb	r3, [r3, #6]
 8002a30:	461a      	mov	r2, r3
 8002a32:	6979      	ldr	r1, [r7, #20]
 8002a34:	f001 ff44 	bl	80048c0 <USB_EPStartXfer>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	7912      	ldrb	r2, [r2, #4]
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e04f      	b.n	8002b00 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da0f      	bge.n	8002a88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	f003 020f 	and.w	r2, r3, #15
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	3310      	adds	r3, #16
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	705a      	strb	r2, [r3, #1]
 8002a86:	e00d      	b.n	8002aa4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_PCD_EP_SetStall+0x82>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e01d      	b.n	8002b00 <HAL_PCD_EP_SetStall+0xbe>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68f9      	ldr	r1, [r7, #12]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 fad2 	bl	800507c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7999      	ldrb	r1, [r3, #6]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002af0:	461a      	mov	r2, r3
 8002af2:	f002 fcc3 	bl	800547c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	7912      	ldrb	r2, [r2, #4]
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e042      	b.n	8002bac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	da0f      	bge.n	8002b4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 020f 	and.w	r2, r3, #15
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	3310      	adds	r3, #16
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	3304      	adds	r3, #4
 8002b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	705a      	strb	r2, [r3, #1]
 8002b4c:	e00f      	b.n	8002b6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_EP_ClrStall+0x86>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e00e      	b.n	8002bac <HAL_PCD_EP_ClrStall+0xa4>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fadb 	bl	8005158 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	da0c      	bge.n	8002be2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	3310      	adds	r3, #16
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e00c      	b.n	8002bfc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 020f 	and.w	r2, r3, #15
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 f8fa 	bl	8004dfc <USB_EPStopXfer>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b08a      	sub	sp, #40	@ 0x28
 8002c1a:	af02      	add	r7, sp, #8
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3310      	adds	r3, #16
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d901      	bls.n	8002c4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06b      	b.n	8002d26 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d902      	bls.n	8002c6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3303      	adds	r3, #3
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c72:	e02a      	b.n	8002cca <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d902      	bls.n	8002c90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3303      	adds	r3, #3
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68d9      	ldr	r1, [r3, #12]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4603      	mov	r3, r0
 8002cac:	6978      	ldr	r0, [r7, #20]
 8002cae:	f002 f94f 	bl	8004f50 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	441a      	add	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	441a      	add	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d809      	bhi.n	8002cf4 <PCD_WriteEmptyTxFifo+0xde>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d203      	bcs.n	8002cf4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1bf      	bne.n	8002c74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d811      	bhi.n	8002d24 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	2201      	movs	r2, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	6939      	ldr	r1, [r7, #16]
 8002d1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d20:	4013      	ands	r3, r2
 8002d22:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	333c      	adds	r3, #60	@ 0x3c
 8002d48:	3304      	adds	r3, #4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	799b      	ldrb	r3, [r3, #6]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d17b      	bne.n	8002e5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d015      	beq.n	8002d9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4a61      	ldr	r2, [pc, #388]	@ (8002ef8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	f240 80b9 	bls.w	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80b3 	beq.w	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d92:	461a      	mov	r2, r3
 8002d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d98:	6093      	str	r3, [r2, #8]
 8002d9a:	e0a7      	b.n	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db2:	461a      	mov	r2, r3
 8002db4:	2320      	movs	r3, #32
 8002db6:	6093      	str	r3, [r2, #8]
 8002db8:	e098      	b.n	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 8093 	bne.w	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d90f      	bls.n	8002dee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de4:	461a      	mov	r2, r3
 8002de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dea:	6093      	str	r3, [r2, #8]
 8002dec:	e07e      	b.n	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	4413      	add	r3, r2
 8002e00:	3304      	adds	r3, #4
 8002e02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	0159      	lsls	r1, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	440b      	add	r3, r1
 8002e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1a:	1ad2      	subs	r2, r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d114      	bne.n	8002e50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	f002 fb1e 	bl	800547c <USB_EP0_OutStart>
 8002e40:	e006      	b.n	8002e50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	441a      	add	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f004 fa9e 	bl	8007398 <HAL_PCD_DataOutStageCallback>
 8002e5c:	e046      	b.n	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4a26      	ldr	r2, [pc, #152]	@ (8002efc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d124      	bne.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e82:	6093      	str	r3, [r2, #8]
 8002e84:	e032      	b.n	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f004 fa75 	bl	8007398 <HAL_PCD_DataOutStageCallback>
 8002eae:	e01d      	b.n	8002eec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d114      	bne.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d108      	bne.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2100      	movs	r1, #0
 8002edc:	f002 face 	bl	800547c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f004 fa56 	bl	8007398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	4f54300a 	.word	0x4f54300a
 8002efc:	4f54310a 	.word	0x4f54310a

08002f00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	333c      	adds	r3, #60	@ 0x3c
 8002f18:	3304      	adds	r3, #4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a15      	ldr	r2, [pc, #84]	@ (8002f88 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d90e      	bls.n	8002f54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f004 fa0d 	bl	8007374 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d90c      	bls.n	8002f7c <PCD_EP_OutSetupPacket_int+0x7c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	799b      	ldrb	r3, [r3, #6]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d108      	bne.n	8002f7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f74:	461a      	mov	r2, r3
 8002f76:	2101      	movs	r1, #1
 8002f78:	f002 fa80 	bl	800547c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	4f54300a 	.word	0x4f54300a

08002f8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002faa:	883b      	ldrh	r3, [r7, #0]
 8002fac:	0419      	lsls	r1, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fb8:	e028      	b.n	800300c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	e00d      	b.n	8002fea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	3340      	adds	r3, #64	@ 0x40
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d3ec      	bcc.n	8002fce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ff4:	883b      	ldrh	r3, [r7, #0]
 8002ff6:	0418      	lsls	r0, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6819      	ldr	r1, [r3, #0]
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	4302      	orrs	r2, r0
 8003004:	3340      	adds	r3, #64	@ 0x40
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e267      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d075      	beq.n	800315e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003072:	4b88      	ldr	r3, [pc, #544]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b04      	cmp	r3, #4
 800307c:	d00c      	beq.n	8003098 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307e:	4b85      	ldr	r3, [pc, #532]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003086:	2b08      	cmp	r3, #8
 8003088:	d112      	bne.n	80030b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308a:	4b82      	ldr	r3, [pc, #520]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003096:	d10b      	bne.n	80030b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	4b7e      	ldr	r3, [pc, #504]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d05b      	beq.n	800315c <HAL_RCC_OscConfig+0x108>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d157      	bne.n	800315c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e242      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b8:	d106      	bne.n	80030c8 <HAL_RCC_OscConfig+0x74>
 80030ba:	4b76      	ldr	r3, [pc, #472]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a75      	ldr	r2, [pc, #468]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e01d      	b.n	8003104 <HAL_RCC_OscConfig+0xb0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x98>
 80030d2:	4b70      	ldr	r3, [pc, #448]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b6d      	ldr	r3, [pc, #436]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6c      	ldr	r2, [pc, #432]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0xb0>
 80030ec:	4b69      	ldr	r3, [pc, #420]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a68      	ldr	r2, [pc, #416]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	4b66      	ldr	r3, [pc, #408]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a65      	ldr	r2, [pc, #404]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80030fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d013      	beq.n	8003134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe fa48 	bl	80015a0 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003114:	f7fe fa44 	bl	80015a0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	@ 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e207      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b5b      	ldr	r3, [pc, #364]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0xc0>
 8003132:	e014      	b.n	800315e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe fa34 	bl	80015a0 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fe fa30 	bl	80015a0 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	@ 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1f3      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	4b51      	ldr	r3, [pc, #324]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0xe8>
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d063      	beq.n	8003232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800316a:	4b4a      	ldr	r3, [pc, #296]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003176:	4b47      	ldr	r3, [pc, #284]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800317e:	2b08      	cmp	r3, #8
 8003180:	d11c      	bne.n	80031bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003182:	4b44      	ldr	r3, [pc, #272]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d116      	bne.n	80031bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	4b41      	ldr	r3, [pc, #260]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_RCC_OscConfig+0x152>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e1c7      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4937      	ldr	r1, [pc, #220]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	e03a      	b.n	8003232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c4:	4b34      	ldr	r3, [pc, #208]	@ (8003298 <HAL_RCC_OscConfig+0x244>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe f9e9 	bl	80015a0 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d2:	f7fe f9e5 	bl	80015a0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e1a8      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f0:	4b28      	ldr	r3, [pc, #160]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4925      	ldr	r1, [pc, #148]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
 8003204:	e015      	b.n	8003232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003206:	4b24      	ldr	r3, [pc, #144]	@ (8003298 <HAL_RCC_OscConfig+0x244>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe f9c8 	bl	80015a0 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003214:	f7fe f9c4 	bl	80015a0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e187      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d036      	beq.n	80032ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003246:	4b15      	ldr	r3, [pc, #84]	@ (800329c <HAL_RCC_OscConfig+0x248>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324c:	f7fe f9a8 	bl	80015a0 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003254:	f7fe f9a4 	bl	80015a0 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e167      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <HAL_RCC_OscConfig+0x240>)
 8003268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x200>
 8003272:	e01b      	b.n	80032ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003274:	4b09      	ldr	r3, [pc, #36]	@ (800329c <HAL_RCC_OscConfig+0x248>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fe f991 	bl	80015a0 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	e00e      	b.n	80032a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003282:	f7fe f98d 	bl	80015a0 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d907      	bls.n	80032a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e150      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
 8003294:	40023800 	.word	0x40023800
 8003298:	42470000 	.word	0x42470000
 800329c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a0:	4b88      	ldr	r3, [pc, #544]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80032a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ea      	bne.n	8003282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8097 	beq.w	80033e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032be:	4b81      	ldr	r3, [pc, #516]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	4b7d      	ldr	r3, [pc, #500]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	4a7c      	ldr	r2, [pc, #496]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032da:	4b7a      	ldr	r3, [pc, #488]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b77      	ldr	r3, [pc, #476]	@ (80034c8 <HAL_RCC_OscConfig+0x474>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d118      	bne.n	8003328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f6:	4b74      	ldr	r3, [pc, #464]	@ (80034c8 <HAL_RCC_OscConfig+0x474>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a73      	ldr	r2, [pc, #460]	@ (80034c8 <HAL_RCC_OscConfig+0x474>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7fe f94d 	bl	80015a0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7fe f949 	bl	80015a0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e10c      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	4b6a      	ldr	r3, [pc, #424]	@ (80034c8 <HAL_RCC_OscConfig+0x474>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x2ea>
 8003330:	4b64      	ldr	r3, [pc, #400]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	4a63      	ldr	r2, [pc, #396]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6713      	str	r3, [r2, #112]	@ 0x70
 800333c:	e01c      	b.n	8003378 <HAL_RCC_OscConfig+0x324>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b05      	cmp	r3, #5
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x30c>
 8003346:	4b5f      	ldr	r3, [pc, #380]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	4a5e      	ldr	r2, [pc, #376]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
 8003352:	4b5c      	ldr	r3, [pc, #368]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a5b      	ldr	r2, [pc, #364]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6713      	str	r3, [r2, #112]	@ 0x70
 800335e:	e00b      	b.n	8003378 <HAL_RCC_OscConfig+0x324>
 8003360:	4b58      	ldr	r3, [pc, #352]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	4a57      	ldr	r2, [pc, #348]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	6713      	str	r3, [r2, #112]	@ 0x70
 800336c:	4b55      	ldr	r3, [pc, #340]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003370:	4a54      	ldr	r2, [pc, #336]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003372:	f023 0304 	bic.w	r3, r3, #4
 8003376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d015      	beq.n	80033ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe f90e 	bl	80015a0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fe f90a 	bl	80015a0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0cb      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	4b49      	ldr	r3, [pc, #292]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ee      	beq.n	8003388 <HAL_RCC_OscConfig+0x334>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ac:	f7fe f8f8 	bl	80015a0 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7fe f8f4 	bl	80015a0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0b5      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ca:	4b3e      	ldr	r3, [pc, #248]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ee      	bne.n	80033b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	4b39      	ldr	r3, [pc, #228]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	4a38      	ldr	r2, [pc, #224]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80033e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80a1 	beq.w	8003534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f2:	4b34      	ldr	r3, [pc, #208]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d05c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d141      	bne.n	800348a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b31      	ldr	r3, [pc, #196]	@ (80034cc <HAL_RCC_OscConfig+0x478>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe f8c8 	bl	80015a0 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe f8c4 	bl	80015a0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e087      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	4b27      	ldr	r3, [pc, #156]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	491b      	ldr	r1, [pc, #108]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x478>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fe f89d 	bl	80015a0 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fe f899 	bl	80015a0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e05c      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x416>
 8003488:	e054      	b.n	8003534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <HAL_RCC_OscConfig+0x478>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe f886 	bl	80015a0 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe f882 	bl	80015a0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e045      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_OscConfig+0x470>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x444>
 80034b6:	e03d      	b.n	8003534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e038      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40007000 	.word	0x40007000
 80034cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003540 <HAL_RCC_OscConfig+0x4ec>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d028      	beq.n	8003530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d121      	bne.n	8003530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d11a      	bne.n	8003530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003500:	4013      	ands	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	3b01      	subs	r3, #1
 800351a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0cc      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b68      	ldr	r3, [pc, #416]	@ (80036fc <HAL_RCC_ClockConfig+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d90c      	bls.n	8003580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b65      	ldr	r3, [pc, #404]	@ (80036fc <HAL_RCC_ClockConfig+0x1b8>)
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b63      	ldr	r3, [pc, #396]	@ (80036fc <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0b8      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003598:	4b59      	ldr	r3, [pc, #356]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a58      	ldr	r2, [pc, #352]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b0:	4b53      	ldr	r3, [pc, #332]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a52      	ldr	r2, [pc, #328]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035bc:	4b50      	ldr	r3, [pc, #320]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	494d      	ldr	r1, [pc, #308]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d044      	beq.n	8003664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d119      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e07f      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d003      	beq.n	8003602 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4b3f      	ldr	r3, [pc, #252]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06f      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b3b      	ldr	r3, [pc, #236]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e067      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003622:	4b37      	ldr	r3, [pc, #220]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f023 0203 	bic.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4934      	ldr	r1, [pc, #208]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003634:	f7fd ffb4 	bl	80015a0 <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	e00a      	b.n	8003652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7fd ffb0 	bl	80015a0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e04f      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 020c 	and.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	429a      	cmp	r2, r3
 8003662:	d1eb      	bne.n	800363c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_RCC_ClockConfig+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d20c      	bcs.n	800368c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b22      	ldr	r3, [pc, #136]	@ (80036fc <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e032      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003698:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4916      	ldr	r1, [pc, #88]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	490e      	ldr	r1, [pc, #56]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ca:	f000 f821 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036ce:	4602      	mov	r2, r0
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	490a      	ldr	r1, [pc, #40]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	5ccb      	ldrb	r3, [r1, r3]
 80036de:	fa22 f303 	lsr.w	r3, r2, r3
 80036e2:	4a09      	ldr	r2, [pc, #36]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036e6:	4b09      	ldr	r3, [pc, #36]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd ff14 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023c00 	.word	0x40023c00
 8003700:	40023800 	.word	0x40023800
 8003704:	08008484 	.word	0x08008484
 8003708:	20000000 	.word	0x20000000
 800370c:	20000004 	.word	0x20000004

08003710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003714:	b094      	sub	sp, #80	@ 0x50
 8003716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003728:	4b79      	ldr	r3, [pc, #484]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x200>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	d00d      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x40>
 8003734:	2b08      	cmp	r3, #8
 8003736:	f200 80e1 	bhi.w	80038fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x34>
 800373e:	2b04      	cmp	r3, #4
 8003740:	d003      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x3a>
 8003742:	e0db      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003744:	4b73      	ldr	r3, [pc, #460]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x204>)
 8003746:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003748:	e0db      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800374a:	4b73      	ldr	r3, [pc, #460]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x208>)
 800374c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800374e:	e0d8      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003750:	4b6f      	ldr	r3, [pc, #444]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x200>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003758:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800375a:	4b6d      	ldr	r3, [pc, #436]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x200>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d063      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003766:	4b6a      	ldr	r3, [pc, #424]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x200>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	099b      	lsrs	r3, r3, #6
 800376c:	2200      	movs	r2, #0
 800376e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003770:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003778:	633b      	str	r3, [r7, #48]	@ 0x30
 800377a:	2300      	movs	r3, #0
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
 800377e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003782:	4622      	mov	r2, r4
 8003784:	462b      	mov	r3, r5
 8003786:	f04f 0000 	mov.w	r0, #0
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	0159      	lsls	r1, r3, #5
 8003790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003794:	0150      	lsls	r0, r2, #5
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4621      	mov	r1, r4
 800379c:	1a51      	subs	r1, r2, r1
 800379e:	6139      	str	r1, [r7, #16]
 80037a0:	4629      	mov	r1, r5
 80037a2:	eb63 0301 	sbc.w	r3, r3, r1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b4:	4659      	mov	r1, fp
 80037b6:	018b      	lsls	r3, r1, #6
 80037b8:	4651      	mov	r1, sl
 80037ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037be:	4651      	mov	r1, sl
 80037c0:	018a      	lsls	r2, r1, #6
 80037c2:	4651      	mov	r1, sl
 80037c4:	ebb2 0801 	subs.w	r8, r2, r1
 80037c8:	4659      	mov	r1, fp
 80037ca:	eb63 0901 	sbc.w	r9, r3, r1
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037e2:	4690      	mov	r8, r2
 80037e4:	4699      	mov	r9, r3
 80037e6:	4623      	mov	r3, r4
 80037e8:	eb18 0303 	adds.w	r3, r8, r3
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	462b      	mov	r3, r5
 80037f0:	eb49 0303 	adc.w	r3, r9, r3
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003802:	4629      	mov	r1, r5
 8003804:	024b      	lsls	r3, r1, #9
 8003806:	4621      	mov	r1, r4
 8003808:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800380c:	4621      	mov	r1, r4
 800380e:	024a      	lsls	r2, r1, #9
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003816:	2200      	movs	r2, #0
 8003818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800381a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800381c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003820:	f7fd f904 	bl	8000a2c <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4613      	mov	r3, r2
 800382a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800382c:	e058      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382e:	4b38      	ldr	r3, [pc, #224]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x200>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	2200      	movs	r2, #0
 8003836:	4618      	mov	r0, r3
 8003838:	4611      	mov	r1, r2
 800383a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800383e:	623b      	str	r3, [r7, #32]
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
 8003844:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003848:	4642      	mov	r2, r8
 800384a:	464b      	mov	r3, r9
 800384c:	f04f 0000 	mov.w	r0, #0
 8003850:	f04f 0100 	mov.w	r1, #0
 8003854:	0159      	lsls	r1, r3, #5
 8003856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800385a:	0150      	lsls	r0, r2, #5
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4641      	mov	r1, r8
 8003862:	ebb2 0a01 	subs.w	sl, r2, r1
 8003866:	4649      	mov	r1, r9
 8003868:	eb63 0b01 	sbc.w	fp, r3, r1
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003878:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800387c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003880:	ebb2 040a 	subs.w	r4, r2, sl
 8003884:	eb63 050b 	sbc.w	r5, r3, fp
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	00eb      	lsls	r3, r5, #3
 8003892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003896:	00e2      	lsls	r2, r4, #3
 8003898:	4614      	mov	r4, r2
 800389a:	461d      	mov	r5, r3
 800389c:	4643      	mov	r3, r8
 800389e:	18e3      	adds	r3, r4, r3
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	464b      	mov	r3, r9
 80038a4:	eb45 0303 	adc.w	r3, r5, r3
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038b6:	4629      	mov	r1, r5
 80038b8:	028b      	lsls	r3, r1, #10
 80038ba:	4621      	mov	r1, r4
 80038bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c0:	4621      	mov	r1, r4
 80038c2:	028a      	lsls	r2, r1, #10
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ca:	2200      	movs	r2, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	61fa      	str	r2, [r7, #28]
 80038d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d4:	f7fd f8aa 	bl	8000a2c <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4613      	mov	r3, r2
 80038de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	3301      	adds	r3, #1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038fa:	e002      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x204>)
 80038fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003904:	4618      	mov	r0, r3
 8003906:	3750      	adds	r7, #80	@ 0x50
 8003908:	46bd      	mov	sp, r7
 800390a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	00f42400 	.word	0x00f42400
 8003918:	007a1200 	.word	0x007a1200

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000000 	.word	0x20000000

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a9b      	lsrs	r3, r3, #10
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4903      	ldr	r1, [pc, #12]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800
 8003958:	08008494 	.word	0x08008494

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003960:	f7ff ffdc 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0b5b      	lsrs	r3, r3, #13
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	@ (8003980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	08008494 	.word	0x08008494

08003984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e042      	b.n	8003a1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fcd4 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	@ 0x24
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f82b 	bl	8003a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b0c0      	sub	sp, #256	@ 0x100
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	68d9      	ldr	r1, [r3, #12]
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	ea40 0301 	orr.w	r3, r0, r1
 8003a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a7c:	f021 010c 	bic.w	r1, r1, #12
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9e:	6999      	ldr	r1, [r3, #24]
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	ea40 0301 	orr.w	r3, r0, r1
 8003aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d005      	beq.n	8003ac4 <UART_SetConfig+0xa0>
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b8d      	ldr	r3, [pc, #564]	@ (8003cf4 <UART_SetConfig+0x2d0>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d104      	bne.n	8003ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7ff ff4a 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8003ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003acc:	e003      	b.n	8003ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7ff ff31 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae0:	f040 810c 	bne.w	8003cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003af6:	4622      	mov	r2, r4
 8003af8:	462b      	mov	r3, r5
 8003afa:	1891      	adds	r1, r2, r2
 8003afc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003afe:	415b      	adcs	r3, r3
 8003b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b06:	4621      	mov	r1, r4
 8003b08:	eb12 0801 	adds.w	r8, r2, r1
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	eb43 0901 	adc.w	r9, r3, r1
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b26:	4690      	mov	r8, r2
 8003b28:	4699      	mov	r9, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	eb18 0303 	adds.w	r3, r8, r3
 8003b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b34:	462b      	mov	r3, r5
 8003b36:	eb49 0303 	adc.w	r3, r9, r3
 8003b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b52:	460b      	mov	r3, r1
 8003b54:	18db      	adds	r3, r3, r3
 8003b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b58:	4613      	mov	r3, r2
 8003b5a:	eb42 0303 	adc.w	r3, r2, r3
 8003b5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b68:	f7fc ff60 	bl	8000a2c <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4b61      	ldr	r3, [pc, #388]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	011c      	lsls	r4, r3, #4
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b94:	415b      	adcs	r3, r3
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bbc:	4692      	mov	sl, r2
 8003bbe:	469b      	mov	fp, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003be0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003be8:	460b      	mov	r3, r1
 8003bea:	18db      	adds	r3, r3, r3
 8003bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bee:	4613      	mov	r3, r2
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bfe:	f7fc ff15 	bl	8000a2c <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2264      	movs	r2, #100	@ 0x64
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	1acb      	subs	r3, r1, r3
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 2302 	umull	r2, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c2c:	441c      	add	r4, r3
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c50:	4641      	mov	r1, r8
 8003c52:	1851      	adds	r1, r2, r1
 8003c54:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c56:	4649      	mov	r1, r9
 8003c58:	414b      	adcs	r3, r1
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c68:	4659      	mov	r1, fp
 8003c6a:	00cb      	lsls	r3, r1, #3
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c72:	4651      	mov	r1, sl
 8003c74:	00ca      	lsls	r2, r1, #3
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c84:	464b      	mov	r3, r9
 8003c86:	460a      	mov	r2, r1
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	18db      	adds	r3, r3, r3
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003caa:	4613      	mov	r3, r2
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cba:	f7fc feb7 	bl	8000a2c <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	@ 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	3332      	adds	r3, #50	@ 0x32
 8003cd6:	4a08      	ldr	r2, [pc, #32]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4422      	add	r2, r4
 8003cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cec:	e106      	b.n	8003efc <UART_SetConfig+0x4d8>
 8003cee:	bf00      	nop
 8003cf0:	40011000 	.word	0x40011000
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d0e:	4642      	mov	r2, r8
 8003d10:	464b      	mov	r3, r9
 8003d12:	1891      	adds	r1, r2, r2
 8003d14:	6239      	str	r1, [r7, #32]
 8003d16:	415b      	adcs	r3, r3
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1e:	4641      	mov	r1, r8
 8003d20:	1854      	adds	r4, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb43 0501 	adc.w	r5, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	00eb      	lsls	r3, r5, #3
 8003d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	18e3      	adds	r3, r4, r3
 8003d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d44:	464b      	mov	r3, r9
 8003d46:	eb45 0303 	adc.w	r3, r5, r3
 8003d4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	008b      	lsls	r3, r1, #2
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d74:	4621      	mov	r1, r4
 8003d76:	008a      	lsls	r2, r1, #2
 8003d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d7c:	f7fc fe56 	bl	8000a2c <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4b60      	ldr	r3, [pc, #384]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003d86:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	011c      	lsls	r4, r3, #4
 8003d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	1891      	adds	r1, r2, r2
 8003da6:	61b9      	str	r1, [r7, #24]
 8003da8:	415b      	adcs	r3, r3
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db0:	4641      	mov	r1, r8
 8003db2:	1851      	adds	r1, r2, r1
 8003db4:	6139      	str	r1, [r7, #16]
 8003db6:	4649      	mov	r1, r9
 8003db8:	414b      	adcs	r3, r1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc8:	4659      	mov	r1, fp
 8003dca:	00cb      	lsls	r3, r1, #3
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4642      	mov	r2, r8
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003de4:	464b      	mov	r3, r9
 8003de6:	460a      	mov	r2, r1
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e08:	4649      	mov	r1, r9
 8003e0a:	008b      	lsls	r3, r1, #2
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e12:	4641      	mov	r1, r8
 8003e14:	008a      	lsls	r2, r1, #2
 8003e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e1a:	f7fc fe07 	bl	8000a2c <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	4b38      	ldr	r3, [pc, #224]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003e26:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2264      	movs	r2, #100	@ 0x64
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	1acb      	subs	r3, r1, r3
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	3332      	adds	r3, #50	@ 0x32
 8003e38:	4a33      	ldr	r2, [pc, #204]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e44:	441c      	add	r4, r3
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e54:	4642      	mov	r2, r8
 8003e56:	464b      	mov	r3, r9
 8003e58:	1891      	adds	r1, r2, r2
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	415b      	adcs	r3, r3
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e64:	4641      	mov	r1, r8
 8003e66:	1851      	adds	r1, r2, r1
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	414b      	adcs	r3, r1
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e7c:	4659      	mov	r1, fp
 8003e7e:	00cb      	lsls	r3, r1, #3
 8003e80:	4651      	mov	r1, sl
 8003e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e86:	4651      	mov	r1, sl
 8003e88:	00ca      	lsls	r2, r1, #3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4642      	mov	r2, r8
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e96:	464b      	mov	r3, r9
 8003e98:	460a      	mov	r2, r1
 8003e9a:	eb42 0303 	adc.w	r3, r2, r3
 8003e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003eb8:	4649      	mov	r1, r9
 8003eba:	008b      	lsls	r3, r1, #2
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	008a      	lsls	r2, r1, #2
 8003ec6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eca:	f7fc fdaf 	bl	8000a2c <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	@ 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	3332      	adds	r3, #50	@ 0x32
 8003ee6:	4a08      	ldr	r2, [pc, #32]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4422      	add	r2, r4
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f02:	46bd      	mov	sp, r7
 8003f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f08:	51eb851f 	.word	0x51eb851f

08003f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	f107 001c 	add.w	r0, r7, #28
 8003f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d123      	bne.n	8003f6e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f001 fae8 	bl	8005538 <USB_CoreReset>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e01b      	b.n	8003fa6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 fadc 	bl	8005538 <USB_CoreReset>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f98:	e005      	b.n	8003fa6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fa6:	7fbb      	ldrb	r3, [r7, #30]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10b      	bne.n	8003fc4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f043 0206 	orr.w	r2, r3, #6
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd0:	b004      	add	sp, #16
 8003fd2:	4770      	bx	lr

08003fd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d165      	bne.n	80040b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4a41      	ldr	r2, [pc, #260]	@ (80040f0 <USB_SetTurnaroundTime+0x11c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d906      	bls.n	8003ffe <USB_SetTurnaroundTime+0x2a>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a40      	ldr	r2, [pc, #256]	@ (80040f4 <USB_SetTurnaroundTime+0x120>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d202      	bcs.n	8003ffe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ff8:	230f      	movs	r3, #15
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e062      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4a3c      	ldr	r2, [pc, #240]	@ (80040f4 <USB_SetTurnaroundTime+0x120>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d306      	bcc.n	8004014 <USB_SetTurnaroundTime+0x40>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a3b      	ldr	r2, [pc, #236]	@ (80040f8 <USB_SetTurnaroundTime+0x124>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d202      	bcs.n	8004014 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800400e:	230e      	movs	r3, #14
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e057      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4a38      	ldr	r2, [pc, #224]	@ (80040f8 <USB_SetTurnaroundTime+0x124>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d306      	bcc.n	800402a <USB_SetTurnaroundTime+0x56>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a37      	ldr	r2, [pc, #220]	@ (80040fc <USB_SetTurnaroundTime+0x128>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d202      	bcs.n	800402a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004024:	230d      	movs	r3, #13
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e04c      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4a33      	ldr	r2, [pc, #204]	@ (80040fc <USB_SetTurnaroundTime+0x128>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d306      	bcc.n	8004040 <USB_SetTurnaroundTime+0x6c>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4a32      	ldr	r2, [pc, #200]	@ (8004100 <USB_SetTurnaroundTime+0x12c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d802      	bhi.n	8004040 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800403a:	230c      	movs	r3, #12
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e041      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4a2f      	ldr	r2, [pc, #188]	@ (8004100 <USB_SetTurnaroundTime+0x12c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d906      	bls.n	8004056 <USB_SetTurnaroundTime+0x82>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a2e      	ldr	r2, [pc, #184]	@ (8004104 <USB_SetTurnaroundTime+0x130>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d802      	bhi.n	8004056 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004050:	230b      	movs	r3, #11
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e036      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4a2a      	ldr	r2, [pc, #168]	@ (8004104 <USB_SetTurnaroundTime+0x130>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d906      	bls.n	800406c <USB_SetTurnaroundTime+0x98>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4a29      	ldr	r2, [pc, #164]	@ (8004108 <USB_SetTurnaroundTime+0x134>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d802      	bhi.n	800406c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004066:	230a      	movs	r3, #10
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e02b      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4a26      	ldr	r2, [pc, #152]	@ (8004108 <USB_SetTurnaroundTime+0x134>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d906      	bls.n	8004082 <USB_SetTurnaroundTime+0xae>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a25      	ldr	r2, [pc, #148]	@ (800410c <USB_SetTurnaroundTime+0x138>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d202      	bcs.n	8004082 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800407c:	2309      	movs	r3, #9
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e020      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4a21      	ldr	r2, [pc, #132]	@ (800410c <USB_SetTurnaroundTime+0x138>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d306      	bcc.n	8004098 <USB_SetTurnaroundTime+0xc4>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4a20      	ldr	r2, [pc, #128]	@ (8004110 <USB_SetTurnaroundTime+0x13c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d802      	bhi.n	8004098 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004092:	2308      	movs	r3, #8
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e015      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <USB_SetTurnaroundTime+0x13c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d906      	bls.n	80040ae <USB_SetTurnaroundTime+0xda>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004114 <USB_SetTurnaroundTime+0x140>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d202      	bcs.n	80040ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040a8:	2307      	movs	r3, #7
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	e00a      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040ae:	2306      	movs	r3, #6
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e007      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040ba:	2309      	movs	r3, #9
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e001      	b.n	80040c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040c0:	2309      	movs	r3, #9
 80040c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	00d8acbf 	.word	0x00d8acbf
 80040f4:	00e4e1c0 	.word	0x00e4e1c0
 80040f8:	00f42400 	.word	0x00f42400
 80040fc:	01067380 	.word	0x01067380
 8004100:	011a499f 	.word	0x011a499f
 8004104:	01312cff 	.word	0x01312cff
 8004108:	014ca43f 	.word	0x014ca43f
 800410c:	016e3600 	.word	0x016e3600
 8004110:	01a6ab1f 	.word	0x01a6ab1f
 8004114:	01e84800 	.word	0x01e84800

08004118 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0201 	bic.w	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d115      	bne.n	80041aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800418a:	200a      	movs	r0, #10
 800418c:	f7fd fa14 	bl	80015b8 <HAL_Delay>
      ms += 10U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	330a      	adds	r3, #10
 8004194:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f001 f93f 	bl	800541a <USB_GetMode>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d01e      	beq.n	80041e0 <USB_SetCurrentMode+0x84>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80041a6:	d9f0      	bls.n	800418a <USB_SetCurrentMode+0x2e>
 80041a8:	e01a      	b.n	80041e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d115      	bne.n	80041dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041bc:	200a      	movs	r0, #10
 80041be:	f7fd f9fb 	bl	80015b8 <HAL_Delay>
      ms += 10U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	330a      	adds	r3, #10
 80041c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f001 f926 	bl	800541a <USB_GetMode>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <USB_SetCurrentMode+0x84>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80041d8:	d9f0      	bls.n	80041bc <USB_SetCurrentMode+0x60>
 80041da:	e001      	b.n	80041e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e005      	b.n	80041ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80041e4:	d101      	bne.n	80041ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041f4:	b084      	sub	sp, #16
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	e009      	b.n	8004228 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3340      	adds	r3, #64	@ 0x40
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	2200      	movs	r2, #0
 8004220:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3301      	adds	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b0e      	cmp	r3, #14
 800422c:	d9f2      	bls.n	8004214 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800422e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11c      	bne.n	8004270 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	639a      	str	r2, [r3, #56]	@ 0x38
 800426e:	e00b      	b.n	8004288 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004294:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10d      	bne.n	80042b8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800429c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042a4:	2100      	movs	r1, #0
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f968 	bl	800457c <USB_SetDevSpeed>
 80042ac:	e008      	b.n	80042c0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042ae:	2101      	movs	r1, #1
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f963 	bl	800457c <USB_SetDevSpeed>
 80042b6:	e003      	b.n	80042c0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042b8:	2103      	movs	r1, #3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f95e 	bl	800457c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042c0:	2110      	movs	r1, #16
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f8fa 	bl	80044bc <USB_FlushTxFifo>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f924 	bl	8004520 <USB_FlushRxFifo>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e8:	461a      	mov	r2, r3
 80042ea:	2300      	movs	r3, #0
 80042ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042f4:	461a      	mov	r2, r3
 80042f6:	2300      	movs	r3, #0
 80042f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	e043      	b.n	8004394 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800431e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004322:	d118      	bne.n	8004356 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004336:	461a      	mov	r2, r3
 8004338:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e013      	b.n	8004368 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800434c:	461a      	mov	r2, r3
 800434e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e008      	b.n	8004368 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004362:	461a      	mov	r2, r3
 8004364:	2300      	movs	r3, #0
 8004366:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004386:	461a      	mov	r2, r3
 8004388:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800438c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3301      	adds	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004398:	461a      	mov	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4293      	cmp	r3, r2
 800439e:	d3b5      	bcc.n	800430c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e043      	b.n	800442e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043bc:	d118      	bne.n	80043f0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d0:	461a      	mov	r2, r3
 80043d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	e013      	b.n	8004402 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e6:	461a      	mov	r2, r3
 80043e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e008      	b.n	8004402 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	2300      	movs	r3, #0
 8004400:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440e:	461a      	mov	r2, r3
 8004410:	2300      	movs	r3, #0
 8004412:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004426:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	3301      	adds	r3, #1
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004432:	461a      	mov	r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4293      	cmp	r3, r2
 8004438:	d3b5      	bcc.n	80043a6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800444c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800445a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800445c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f043 0210 	orr.w	r2, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <USB_DevInit+0x2c4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800447c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f043 0208 	orr.w	r2, r3, #8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004490:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044b4:	b004      	add	sp, #16
 80044b6:	4770      	bx	lr
 80044b8:	803c3800 	.word	0x803c3800

080044bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3301      	adds	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044d6:	d901      	bls.n	80044dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e01b      	b.n	8004514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	daf2      	bge.n	80044ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	019b      	lsls	r3, r3, #6
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004500:	d901      	bls.n	8004506 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e006      	b.n	8004514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b20      	cmp	r3, #32
 8004510:	d0f0      	beq.n	80044f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004538:	d901      	bls.n	800453e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e018      	b.n	8004570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	daf2      	bge.n	800452c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2210      	movs	r2, #16
 800454e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3301      	adds	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800455c:	d901      	bls.n	8004562 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e006      	b.n	8004570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b10      	cmp	r3, #16
 800456c:	d0f0      	beq.n	8004550 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b087      	sub	sp, #28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0306 	and.w	r3, r3, #6
 80045c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]
 80045d2:	e00a      	b.n	80045ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d002      	beq.n	80045e0 <USB_GetDevSpeed+0x32>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b06      	cmp	r3, #6
 80045de:	d102      	bne.n	80045e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045e0:	2302      	movs	r3, #2
 80045e2:	75fb      	strb	r3, [r7, #23]
 80045e4:	e001      	b.n	80045ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045e6:	230f      	movs	r3, #15
 80045e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d13a      	bne.n	800468a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	2101      	movs	r1, #1
 8004626:	fa01 f303 	lsl.w	r3, r1, r3
 800462a:	b29b      	uxth	r3, r3
 800462c:	68f9      	ldr	r1, [r7, #12]
 800462e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004632:	4313      	orrs	r3, r2
 8004634:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d155      	bne.n	80046f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	791b      	ldrb	r3, [r3, #4]
 8004666:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004668:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	059b      	lsls	r3, r3, #22
 800466e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004670:	4313      	orrs	r3, r2
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	0151      	lsls	r1, r2, #5
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	440a      	add	r2, r1
 800467a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800467e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	e036      	b.n	80046f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	2101      	movs	r1, #1
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d11a      	bne.n	80046f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046de:	430b      	orrs	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d161      	bne.n	80047e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800473a:	d11f      	bne.n	800477c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004756:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800475a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004776:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800477a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004782:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	2101      	movs	r1, #1
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	b29b      	uxth	r3, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800479c:	4013      	ands	r3, r2
 800479e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f303 	lsl.w	r3, r1, r3
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047c0:	4013      	ands	r3, r2
 80047c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	0159      	lsls	r1, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	440b      	add	r3, r1
 80047da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047de:	4619      	mov	r1, r3
 80047e0:	4b35      	ldr	r3, [pc, #212]	@ (80048b8 <USB_DeactivateEndpoint+0x1b0>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]
 80047e6:	e060      	b.n	80048aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047fe:	d11f      	bne.n	8004840 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800481a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800481e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	440a      	add	r2, r1
 8004836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800483a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800483e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	2101      	movs	r1, #1
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	43db      	mvns	r3, r3
 800485a:	68f9      	ldr	r1, [r7, #12]
 800485c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004860:	4013      	ands	r3, r2
 8004862:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	43db      	mvns	r3, r3
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004884:	4013      	ands	r3, r2
 8004886:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	0159      	lsls	r1, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	440b      	add	r3, r1
 800489e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a2:	4619      	mov	r1, r3
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <USB_DeactivateEndpoint+0x1b4>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	ec337800 	.word	0xec337800
 80048bc:	eff37800 	.word	0xeff37800

080048c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	@ 0x28
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 817f 	bne.w	8004be0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d132      	bne.n	8004950 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004904:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004908:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800490c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	440a      	add	r2, r1
 8004924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004928:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800492c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004948:	0cdb      	lsrs	r3, r3, #19
 800494a:	04db      	lsls	r3, r3, #19
 800494c:	6113      	str	r3, [r2, #16]
 800494e:	e097      	b.n	8004a80 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	0151      	lsls	r1, r2, #5
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	440a      	add	r2, r1
 8004966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800496a:	0cdb      	lsrs	r3, r3, #19
 800496c:	04db      	lsls	r3, r3, #19
 800496e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	440a      	add	r2, r1
 8004986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800498a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800498e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004992:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11a      	bne.n	80049d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d903      	bls.n	80049ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049cc:	6113      	str	r3, [r2, #16]
 80049ce:	e044      	b.n	8004a5a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4413      	add	r3, r2
 80049da:	1e5a      	subs	r2, r3, #1
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	8afb      	ldrh	r3, [r7, #22]
 80049f6:	04d9      	lsls	r1, r3, #19
 80049f8:	4ba4      	ldr	r3, [pc, #656]	@ (8004c8c <USB_EPStartXfer+0x3cc>)
 80049fa:	400b      	ands	r3, r1
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	0148      	lsls	r0, r1, #5
 8004a00:	69f9      	ldr	r1, [r7, #28]
 8004a02:	4401      	add	r1, r0
 8004a04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d122      	bne.n	8004a5a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a2e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004a32:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	8afb      	ldrh	r3, [r7, #22]
 8004a44:	075b      	lsls	r3, r3, #29
 8004a46:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004a4a:	69b9      	ldr	r1, [r7, #24]
 8004a4c:	0148      	lsls	r0, r1, #5
 8004a4e:	69f9      	ldr	r1, [r7, #28]
 8004a50:	4401      	add	r1, r0
 8004a52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a56:	4313      	orrs	r3, r2
 8004a58:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	0148      	lsls	r0, r1, #5
 8004a74:	69f9      	ldr	r1, [r7, #28]
 8004a76:	4401      	add	r1, r0
 8004a78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d14b      	bne.n	8004b1e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	791b      	ldrb	r3, [r3, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d128      	bne.n	8004afc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d110      	bne.n	8004adc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ad4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e00f      	b.n	8004afc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004afa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e166      	b.n	8004dec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b3c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	791b      	ldrb	r3, [r3, #4]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d015      	beq.n	8004b72 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 814e 	beq.w	8004dec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	2101      	movs	r1, #1
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	69f9      	ldr	r1, [r7, #28]
 8004b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004b70:	e13c      	b.n	8004dec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d110      	bne.n	8004ba4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e00f      	b.n	8004bc4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	68d9      	ldr	r1, [r3, #12]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	b298      	uxth	r0, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f9b9 	bl	8004f50 <USB_WritePacket>
 8004bde:	e105      	b.n	8004dec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bfa:	0cdb      	lsrs	r3, r3, #19
 8004bfc:	04db      	lsls	r3, r3, #19
 8004bfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c1a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c1e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c22:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d132      	bne.n	8004c90 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c58:	69b9      	ldr	r1, [r7, #24]
 8004c5a:	0148      	lsls	r0, r1, #5
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	4401      	add	r1, r0
 8004c60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c64:	4313      	orrs	r3, r2
 8004c66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c86:	6113      	str	r3, [r2, #16]
 8004c88:	e062      	b.n	8004d50 <USB_EPStartXfer+0x490>
 8004c8a:	bf00      	nop
 8004c8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d123      	bne.n	8004ce0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cae:	69b9      	ldr	r1, [r7, #24]
 8004cb0:	0148      	lsls	r0, r1, #5
 8004cb2:	69f9      	ldr	r1, [r7, #28]
 8004cb4:	4401      	add	r1, r0
 8004cb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cdc:	6113      	str	r3, [r2, #16]
 8004cde:	e037      	b.n	8004d50 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	1e5a      	subs	r2, r3, #1
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	8afa      	ldrh	r2, [r7, #22]
 8004cfc:	fb03 f202 	mul.w	r2, r3, r2
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	8afb      	ldrh	r3, [r7, #22]
 8004d14:	04d9      	lsls	r1, r3, #19
 8004d16:	4b38      	ldr	r3, [pc, #224]	@ (8004df8 <USB_EPStartXfer+0x538>)
 8004d18:	400b      	ands	r3, r1
 8004d1a:	69b9      	ldr	r1, [r7, #24]
 8004d1c:	0148      	lsls	r0, r1, #5
 8004d1e:	69f9      	ldr	r1, [r7, #28]
 8004d20:	4401      	add	r1, r0
 8004d22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d26:	4313      	orrs	r3, r2
 8004d28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	0148      	lsls	r0, r1, #5
 8004d44:	69f9      	ldr	r1, [r7, #28]
 8004d46:	4401      	add	r1, r0
 8004d48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d10d      	bne.n	8004d72 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68d9      	ldr	r1, [r3, #12]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6e:	460a      	mov	r2, r1
 8004d70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	791b      	ldrb	r3, [r3, #4]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d128      	bne.n	8004dcc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d110      	bne.n	8004dac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004da4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e00f      	b.n	8004dcc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004de6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004dea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	1ff80000 	.word	0x1ff80000

08004dfc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d14a      	bne.n	8004eb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e32:	f040 8086 	bne.w	8004f42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d902      	bls.n	8004e94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
          break;
 8004e92:	e056      	b.n	8004f42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eac:	d0e7      	beq.n	8004e7e <USB_EPStopXfer+0x82>
 8004eae:	e048      	b.n	8004f42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ec8:	d13b      	bne.n	8004f42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ee8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004eec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d902      	bls.n	8004f28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]
          break;
 8004f26:	e00c      	b.n	8004f42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f40:	d0e7      	beq.n	8004f12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	@ 0x24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	460b      	mov	r3, r1
 8004f60:	71fb      	strb	r3, [r7, #7]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d123      	bne.n	8004fbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f76:	88bb      	ldrh	r3, [r7, #4]
 8004f78:	3303      	adds	r3, #3
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	e018      	b.n	8004fb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	031a      	lsls	r2, r3, #12
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f90:	461a      	mov	r2, r3
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3301      	adds	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3e2      	bcc.n	8004f84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3724      	adds	r7, #36	@ 0x24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b08b      	sub	sp, #44	@ 0x2c
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	089b      	lsrs	r3, r3, #2
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	e014      	b.n	8005022 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	601a      	str	r2, [r3, #0]
    pDest++;
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	3301      	adds	r3, #1
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	3301      	adds	r3, #1
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	3301      	adds	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	3301      	adds	r3, #1
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	3301      	adds	r3, #1
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	6a3a      	ldr	r2, [r7, #32]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d3e6      	bcc.n	8004ff8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800502a:	8bfb      	ldrh	r3, [r7, #30]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800503a:	461a      	mov	r2, r3
 800503c:	f107 0310 	add.w	r3, r7, #16
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
 8005050:	b2da      	uxtb	r2, r3
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	701a      	strb	r2, [r3, #0]
      i++;
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	3301      	adds	r3, #1
 800505a:	623b      	str	r3, [r7, #32]
      pDest++;
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	3301      	adds	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005062:	8bfb      	ldrh	r3, [r7, #30]
 8005064:	3b01      	subs	r3, #1
 8005066:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005068:	8bfb      	ldrh	r3, [r7, #30]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1ea      	bne.n	8005044 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005070:	4618      	mov	r0, r3
 8005072:	372c      	adds	r7, #44	@ 0x2c
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d12c      	bne.n	80050f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	db12      	blt.n	80050d0 <USB_EPSetStall+0x54>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00f      	beq.n	80050d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	e02b      	b.n	800514a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	db12      	blt.n	800512a <USB_EPSetStall+0xae>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00f      	beq.n	800512a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005124:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005128:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005144:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005148:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d128      	bne.n	80051c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	440a      	add	r2, r1
 800518a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800518e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005192:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	791b      	ldrb	r3, [r3, #4]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d003      	beq.n	80051a4 <USB_EPClearStall+0x4c>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	791b      	ldrb	r3, [r3, #4]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d138      	bne.n	8005216 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e027      	b.n	8005216 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	791b      	ldrb	r3, [r3, #4]
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d003      	beq.n	80051f6 <USB_EPClearStall+0x9e>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	791b      	ldrb	r3, [r3, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d10f      	bne.n	8005216 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005214:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005242:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005246:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800529e:	f023 0302 	bic.w	r3, r3, #2
 80052a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052cc:	f023 0303 	bic.w	r3, r3, #3
 80052d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e0:	f043 0302 	orr.w	r3, r3, #2
 80052e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4013      	ands	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800530c:	68fb      	ldr	r3, [r7, #12]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	4013      	ands	r3, r2
 800533c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	0c1b      	lsrs	r3, r3, #16
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	4013      	ands	r3, r2
 8005370:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	b29b      	uxth	r3, r3
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053b0:	68bb      	ldr	r3, [r7, #8]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053be:	b480      	push	{r7}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	460b      	mov	r3, r1
 80053c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	fa22 f303 	lsr.w	r3, r2, r3
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4013      	ands	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800540c:	68bb      	ldr	r3, [r7, #8]
}
 800540e:	4618      	mov	r0, r3
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f003 0301 	and.w	r3, r3, #1
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005450:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005454:	f023 0307 	bic.w	r3, r3, #7
 8005458:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800546c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	460b      	mov	r3, r1
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	333c      	adds	r3, #60	@ 0x3c
 8005492:	3304      	adds	r3, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4a26      	ldr	r2, [pc, #152]	@ (8005534 <USB_EP0_OutStart+0xb8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d90a      	bls.n	80054b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054b0:	d101      	bne.n	80054b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e037      	b.n	8005526 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e4:	f043 0318 	orr.w	r3, r3, #24
 80054e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80054fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054fe:	7afb      	ldrb	r3, [r7, #11]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10f      	bne.n	8005524 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550a:	461a      	mov	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800551e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	4f54300a 	.word	0x4f54300a

08005538 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005550:	d901      	bls.n	8005556 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e01b      	b.n	800558e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	daf2      	bge.n	8005544 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f043 0201 	orr.w	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800557a:	d901      	bls.n	8005580 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e006      	b.n	800558e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d0f0      	beq.n	800556e <USB_CoreReset+0x36>

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80055a8:	2010      	movs	r0, #16
 80055aa:	f002 f94d 	bl	8007848 <USBD_static_malloc>
 80055ae:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	32b0      	adds	r2, #176	@ 0xb0
 80055c0:	2100      	movs	r1, #0
 80055c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80055c6:	2302      	movs	r3, #2
 80055c8:	e048      	b.n	800565c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	32b0      	adds	r2, #176	@ 0xb0
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	32b0      	adds	r2, #176	@ 0xb0
 80055e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7c1b      	ldrb	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80055f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005664 <USBD_HID_Init+0xc8>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	f003 020f 	and.w	r2, r3, #15
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	3326      	adds	r3, #38	@ 0x26
 800560c:	2207      	movs	r2, #7
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	e00c      	b.n	800562c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005612:	4b14      	ldr	r3, [pc, #80]	@ (8005664 <USBD_HID_Init+0xc8>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f003 020f 	and.w	r2, r3, #15
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	3326      	adds	r3, #38	@ 0x26
 8005628:	220a      	movs	r2, #10
 800562a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800562c:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <USBD_HID_Init+0xc8>)
 800562e:	7819      	ldrb	r1, [r3, #0]
 8005630:	2304      	movs	r3, #4
 8005632:	2203      	movs	r2, #3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 fff6 	bl	8007626 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800563a:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <USBD_HID_Init+0xc8>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	3324      	adds	r3, #36	@ 0x24
 8005650:	2201      	movs	r2, #1
 8005652:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	200000ca 	.word	0x200000ca

08005668 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005674:	4b1f      	ldr	r3, [pc, #124]	@ (80056f4 <USBD_HID_DeInit+0x8c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 fff9 	bl	8007672 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005680:	4b1c      	ldr	r3, [pc, #112]	@ (80056f4 <USBD_HID_DeInit+0x8c>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f003 020f 	and.w	r2, r3, #15
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3324      	adds	r3, #36	@ 0x24
 8005696:	2200      	movs	r2, #0
 8005698:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800569a:	4b16      	ldr	r3, [pc, #88]	@ (80056f4 <USBD_HID_DeInit+0x8c>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f003 020f 	and.w	r2, r3, #15
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3326      	adds	r3, #38	@ 0x26
 80056b0:	2200      	movs	r2, #0
 80056b2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	32b0      	adds	r2, #176	@ 0xb0
 80056be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d011      	beq.n	80056ea <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	32b0      	adds	r2, #176	@ 0xb0
 80056d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f002 f8c5 	bl	8007864 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	32b0      	adds	r2, #176	@ 0xb0
 80056e4:	2100      	movs	r1, #0
 80056e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	200000ca 	.word	0x200000ca

080056f8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	32b0      	adds	r2, #176	@ 0xb0
 800570c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005710:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005720:	2303      	movs	r3, #3
 8005722:	e0e8      	b.n	80058f6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800572c:	2b00      	cmp	r3, #0
 800572e:	d046      	beq.n	80057be <USBD_HID_Setup+0xc6>
 8005730:	2b20      	cmp	r3, #32
 8005732:	f040 80d8 	bne.w	80058e6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	3b02      	subs	r3, #2
 800573c:	2b09      	cmp	r3, #9
 800573e:	d836      	bhi.n	80057ae <USBD_HID_Setup+0xb6>
 8005740:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <USBD_HID_Setup+0x50>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800579f 	.word	0x0800579f
 800574c:	0800577f 	.word	0x0800577f
 8005750:	080057af 	.word	0x080057af
 8005754:	080057af 	.word	0x080057af
 8005758:	080057af 	.word	0x080057af
 800575c:	080057af 	.word	0x080057af
 8005760:	080057af 	.word	0x080057af
 8005764:	080057af 	.word	0x080057af
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005771 	.word	0x08005771
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	885b      	ldrh	r3, [r3, #2]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]
          break;
 800577c:	e01e      	b.n	80057bc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fbf9 	bl	8006f7c <USBD_CtlSendData>
          break;
 800578a:	e017      	b.n	80057bc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	885b      	ldrh	r3, [r3, #2]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	b29b      	uxth	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	605a      	str	r2, [r3, #4]
          break;
 800579c:	e00e      	b.n	80057bc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3304      	adds	r3, #4
 80057a2:	2201      	movs	r2, #1
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 fbe8 	bl	8006f7c <USBD_CtlSendData>
          break;
 80057ac:	e006      	b.n	80057bc <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fb66 	bl	8006e82 <USBD_CtlError>
          ret = USBD_FAIL;
 80057b6:	2303      	movs	r3, #3
 80057b8:	75fb      	strb	r3, [r7, #23]
          break;
 80057ba:	bf00      	nop
      }
      break;
 80057bc:	e09a      	b.n	80058f4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b0b      	cmp	r3, #11
 80057c4:	f200 8086 	bhi.w	80058d4 <USBD_HID_Setup+0x1dc>
 80057c8:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <USBD_HID_Setup+0xd8>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	08005801 	.word	0x08005801
 80057d4:	080058e3 	.word	0x080058e3
 80057d8:	080058d5 	.word	0x080058d5
 80057dc:	080058d5 	.word	0x080058d5
 80057e0:	080058d5 	.word	0x080058d5
 80057e4:	080058d5 	.word	0x080058d5
 80057e8:	0800582b 	.word	0x0800582b
 80057ec:	080058d5 	.word	0x080058d5
 80057f0:	080058d5 	.word	0x080058d5
 80057f4:	080058d5 	.word	0x080058d5
 80057f8:	08005883 	.word	0x08005883
 80057fc:	080058ad 	.word	0x080058ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b03      	cmp	r3, #3
 800580a:	d107      	bne.n	800581c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800580c:	f107 030a 	add.w	r3, r7, #10
 8005810:	2202      	movs	r2, #2
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 fbb1 	bl	8006f7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800581a:	e063      	b.n	80058e4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 fb2f 	bl	8006e82 <USBD_CtlError>
            ret = USBD_FAIL;
 8005824:	2303      	movs	r3, #3
 8005826:	75fb      	strb	r3, [r7, #23]
          break;
 8005828:	e05c      	b.n	80058e4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	885b      	ldrh	r3, [r3, #2]
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b22      	cmp	r3, #34	@ 0x22
 8005834:	d108      	bne.n	8005848 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	88db      	ldrh	r3, [r3, #6]
 800583a:	2b4a      	cmp	r3, #74	@ 0x4a
 800583c:	bf28      	it	cs
 800583e:	234a      	movcs	r3, #74	@ 0x4a
 8005840:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005842:	4b2f      	ldr	r3, [pc, #188]	@ (8005900 <USBD_HID_Setup+0x208>)
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	e015      	b.n	8005874 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	885b      	ldrh	r3, [r3, #2]
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b21      	cmp	r3, #33	@ 0x21
 8005852:	d108      	bne.n	8005866 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005854:	4b2b      	ldr	r3, [pc, #172]	@ (8005904 <USBD_HID_Setup+0x20c>)
 8005856:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	88db      	ldrh	r3, [r3, #6]
 800585c:	2b09      	cmp	r3, #9
 800585e:	bf28      	it	cs
 8005860:	2309      	movcs	r3, #9
 8005862:	82bb      	strh	r3, [r7, #20]
 8005864:	e006      	b.n	8005874 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 fb0a 	bl	8006e82 <USBD_CtlError>
            ret = USBD_FAIL;
 800586e:	2303      	movs	r3, #3
 8005870:	75fb      	strb	r3, [r7, #23]
            break;
 8005872:	e037      	b.n	80058e4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005874:	8abb      	ldrh	r3, [r7, #20]
 8005876:	461a      	mov	r2, r3
 8005878:	6939      	ldr	r1, [r7, #16]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fb7e 	bl	8006f7c <USBD_CtlSendData>
          break;
 8005880:	e030      	b.n	80058e4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b03      	cmp	r3, #3
 800588c:	d107      	bne.n	800589e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3308      	adds	r3, #8
 8005892:	2201      	movs	r2, #1
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fb70 	bl	8006f7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800589c:	e022      	b.n	80058e4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 faee 	bl	8006e82 <USBD_CtlError>
            ret = USBD_FAIL;
 80058a6:	2303      	movs	r3, #3
 80058a8:	75fb      	strb	r3, [r7, #23]
          break;
 80058aa:	e01b      	b.n	80058e4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d106      	bne.n	80058c6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	885b      	ldrh	r3, [r3, #2]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058c4:	e00e      	b.n	80058e4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 fada 	bl	8006e82 <USBD_CtlError>
            ret = USBD_FAIL;
 80058ce:	2303      	movs	r3, #3
 80058d0:	75fb      	strb	r3, [r7, #23]
          break;
 80058d2:	e007      	b.n	80058e4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fad3 	bl	8006e82 <USBD_CtlError>
          ret = USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	75fb      	strb	r3, [r7, #23]
          break;
 80058e0:	e000      	b.n	80058e4 <USBD_HID_Setup+0x1ec>
          break;
 80058e2:	bf00      	nop
      }
      break;
 80058e4:	e006      	b.n	80058f4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 faca 	bl	8006e82 <USBD_CtlError>
      ret = USBD_FAIL;
 80058ee:	2303      	movs	r3, #3
 80058f0:	75fb      	strb	r3, [r7, #23]
      break;
 80058f2:	bf00      	nop
  }

  return (uint8_t)ret;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000080 	.word	0x20000080
 8005904:	20000068 	.word	0x20000068

08005908 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	32b0      	adds	r2, #176	@ 0xb0
 8005920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005924:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	e014      	b.n	800595a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b03      	cmp	r3, #3
 800593a:	d10d      	bne.n	8005958 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	7b1b      	ldrb	r3, [r3, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2201      	movs	r2, #1
 8005948:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800594a:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <USBD_HID_SendReport+0x5c>)
 800594c:	7819      	ldrb	r1, [r3, #0]
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f001 ff35 	bl	80077c2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200000ca 	.word	0x200000ca

08005968 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	7c1b      	ldrb	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005978:	2308      	movs	r3, #8
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	e001      	b.n	8005982 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 800597e:	230a      	movs	r3, #10
 8005980:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005998:	2181      	movs	r1, #129	@ 0x81
 800599a:	4809      	ldr	r0, [pc, #36]	@ (80059c0 <USBD_HID_GetFSCfgDesc+0x30>)
 800599c:	f000 fc3b 	bl	8006216 <USBD_GetEpDesc>
 80059a0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	220a      	movs	r2, #10
 80059ac:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2222      	movs	r2, #34	@ 0x22
 80059b2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059b4:	4b02      	ldr	r3, [pc, #8]	@ (80059c0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000044 	.word	0x20000044

080059c4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80059cc:	2181      	movs	r1, #129	@ 0x81
 80059ce:	4809      	ldr	r0, [pc, #36]	@ (80059f4 <USBD_HID_GetHSCfgDesc+0x30>)
 80059d0:	f000 fc21 	bl	8006216 <USBD_GetEpDesc>
 80059d4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2207      	movs	r2, #7
 80059e0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2222      	movs	r2, #34	@ 0x22
 80059e6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059e8:	4b02      	ldr	r3, [pc, #8]	@ (80059f4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000044 	.word	0x20000044

080059f8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a00:	2181      	movs	r1, #129	@ 0x81
 8005a02:	4809      	ldr	r0, [pc, #36]	@ (8005a28 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005a04:	f000 fc07 	bl	8006216 <USBD_GetEpDesc>
 8005a08:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	220a      	movs	r2, #10
 8005a14:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2222      	movs	r2, #34	@ 0x22
 8005a1a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005a1c:	4b02      	ldr	r3, [pc, #8]	@ (8005a28 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000044 	.word	0x20000044

08005a2c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	32b0      	adds	r2, #176	@ 0xb0
 8005a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a46:	2200      	movs	r2, #0
 8005a48:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	220a      	movs	r2, #10
 8005a64:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005a66:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	20000074 	.word	0x20000074

08005a78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e01f      	b.n	8005ad0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	79fa      	ldrb	r2, [r7, #7]
 8005ac2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f001 fd47 	bl	8007558 <USBD_LL_Init>
 8005aca:	4603      	mov	r3, r0
 8005acc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e025      	b.n	8005b3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	32ae      	adds	r2, #174	@ 0xae
 8005b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00f      	beq.n	8005b2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	32ae      	adds	r2, #174	@ 0xae
 8005b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1c:	f107 020e 	add.w	r2, r7, #14
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 fd4f 	bl	80075f0 <USBD_LL_Start>
 8005b52:	4603      	mov	r3, r0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	4611      	mov	r1, r2
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	4798      	blx	r3
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 f90c 	bl	8006e0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005c04:	461a      	mov	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d01a      	beq.n	8005c50 <USBD_LL_SetupStage+0x72>
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d822      	bhi.n	8005c64 <USBD_LL_SetupStage+0x86>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <USBD_LL_SetupStage+0x4a>
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d00a      	beq.n	8005c3c <USBD_LL_SetupStage+0x5e>
 8005c26:	e01d      	b.n	8005c64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fb63 	bl	80062fc <USBD_StdDevReq>
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3a:	e020      	b.n	8005c7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fbcb 	bl	80063e0 <USBD_StdItfReq>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c4e:	e016      	b.n	8005c7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fc2d 	bl	80064b8 <USBD_StdEPReq>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	73fb      	strb	r3, [r7, #15]
      break;
 8005c62:	e00c      	b.n	8005c7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fd1c 	bl	80076b0 <USBD_LL_StallEP>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	bf00      	nop
  }

  return ret;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	460b      	mov	r3, r1
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d16e      	bne.n	8005d7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005ca6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	f040 8098 	bne.w	8005de4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d913      	bls.n	8005ce8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	1ad2      	subs	r2, r2, r3
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	bf28      	it	cs
 8005cda:	4613      	movcs	r3, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f001 f977 	bl	8006fd4 <USBD_CtlContinueRx>
 8005ce6:	e07d      	b.n	8005de4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d014      	beq.n	8005d20 <USBD_LL_DataOutStage+0x98>
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d81d      	bhi.n	8005d36 <USBD_LL_DataOutStage+0xae>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <USBD_LL_DataOutStage+0x7c>
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d003      	beq.n	8005d0a <USBD_LL_DataOutStage+0x82>
 8005d02:	e018      	b.n	8005d36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	75bb      	strb	r3, [r7, #22]
            break;
 8005d08:	e018      	b.n	8005d3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	4619      	mov	r1, r3
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fa64 	bl	80061e2 <USBD_CoreFindIF>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75bb      	strb	r3, [r7, #22]
            break;
 8005d1e:	e00d      	b.n	8005d3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	4619      	mov	r1, r3
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fa66 	bl	80061fc <USBD_CoreFindEP>
 8005d30:	4603      	mov	r3, r0
 8005d32:	75bb      	strb	r3, [r7, #22]
            break;
 8005d34:	e002      	b.n	8005d3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75bb      	strb	r3, [r7, #22]
            break;
 8005d3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d3c:	7dbb      	ldrb	r3, [r7, #22]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d119      	bne.n	8005d76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d113      	bne.n	8005d76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d4e:	7dba      	ldrb	r2, [r7, #22]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	32ae      	adds	r2, #174	@ 0xae
 8005d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00b      	beq.n	8005d76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d5e:	7dba      	ldrb	r2, [r7, #22]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d66:	7dba      	ldrb	r2, [r7, #22]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	32ae      	adds	r2, #174	@ 0xae
 8005d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f001 f93d 	bl	8006ff6 <USBD_CtlSendStatus>
 8005d7c:	e032      	b.n	8005de4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	4619      	mov	r1, r3
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fa37 	bl	80061fc <USBD_CoreFindEP>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d92:	7dbb      	ldrb	r3, [r7, #22]
 8005d94:	2bff      	cmp	r3, #255	@ 0xff
 8005d96:	d025      	beq.n	8005de4 <USBD_LL_DataOutStage+0x15c>
 8005d98:	7dbb      	ldrb	r3, [r7, #22]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d122      	bne.n	8005de4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d117      	bne.n	8005dda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005daa:	7dba      	ldrb	r2, [r7, #22]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	32ae      	adds	r2, #174	@ 0xae
 8005db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00f      	beq.n	8005dda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005dba:	7dba      	ldrb	r2, [r7, #22]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005dc2:	7dba      	ldrb	r2, [r7, #22]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	32ae      	adds	r2, #174	@ 0xae
 8005dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	7afa      	ldrb	r2, [r7, #11]
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	4798      	blx	r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	e000      	b.n	8005de6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	460b      	mov	r3, r1
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d16f      	bne.n	8005ee2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3314      	adds	r3, #20
 8005e06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d15a      	bne.n	8005ec8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d914      	bls.n	8005e48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	1ad2      	subs	r2, r2, r3
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 f8bc 	bl	8006fb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2100      	movs	r1, #0
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f001 fcdf 	bl	8007804 <USBD_LL_PrepareReceive>
 8005e46:	e03f      	b.n	8005ec8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d11c      	bne.n	8005e8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d316      	bcc.n	8005e8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d20f      	bcs.n	8005e8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2100      	movs	r1, #0
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f001 f89d 	bl	8006fb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e80:	2300      	movs	r3, #0
 8005e82:	2200      	movs	r2, #0
 8005e84:	2100      	movs	r1, #0
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f001 fcbc 	bl	8007804 <USBD_LL_PrepareReceive>
 8005e8c:	e01c      	b.n	8005ec8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d10f      	bne.n	8005eba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eba:	2180      	movs	r1, #128	@ 0x80
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f001 fbf7 	bl	80076b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f001 f8aa 	bl	800701c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d03a      	beq.n	8005f48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7ff fe42 	bl	8005b5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ee0:	e032      	b.n	8005f48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
 8005ee4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	4619      	mov	r1, r3
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 f985 	bl	80061fc <USBD_CoreFindEP>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2bff      	cmp	r3, #255	@ 0xff
 8005efa:	d025      	beq.n	8005f48 <USBD_LL_DataInStage+0x15a>
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d122      	bne.n	8005f48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d11c      	bne.n	8005f48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f0e:	7dfa      	ldrb	r2, [r7, #23]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	32ae      	adds	r2, #174	@ 0xae
 8005f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d014      	beq.n	8005f48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005f1e:	7dfa      	ldrb	r2, [r7, #23]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f26:	7dfa      	ldrb	r2, [r7, #23]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	32ae      	adds	r2, #174	@ 0xae
 8005f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	7afa      	ldrb	r2, [r7, #11]
 8005f34:	4611      	mov	r1, r2
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	4798      	blx	r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f3e:	7dbb      	ldrb	r3, [r7, #22]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f44:	7dbb      	ldrb	r3, [r7, #22]
 8005f46:	e000      	b.n	8005f4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d014      	beq.n	8005fb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6852      	ldr	r2, [r2, #4]
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	4611      	mov	r1, r2
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fb8:	2340      	movs	r3, #64	@ 0x40
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f001 fb31 	bl	8007626 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2240      	movs	r2, #64	@ 0x40
 8005fd0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fd4:	2340      	movs	r3, #64	@ 0x40
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2180      	movs	r1, #128	@ 0x80
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f001 fb23 	bl	8007626 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2240      	movs	r2, #64	@ 0x40
 8005fea:	621a      	str	r2, [r3, #32]

  return ret;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b04      	cmp	r3, #4
 8006028:	d006      	beq.n	8006038 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006030:	b2da      	uxtb	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2204      	movs	r2, #4
 800603c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b04      	cmp	r3, #4
 8006060:	d106      	bne.n	8006070 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006068:	b2da      	uxtb	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b03      	cmp	r3, #3
 8006090:	d110      	bne.n	80060b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	32ae      	adds	r2, #174	@ 0xae
 80060d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	e01c      	b.n	800611a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d115      	bne.n	8006118 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	32ae      	adds	r2, #174	@ 0xae
 80060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00b      	beq.n	8006118 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	32ae      	adds	r2, #174	@ 0xae
 800610a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	78fa      	ldrb	r2, [r7, #3]
 8006112:	4611      	mov	r1, r2
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	32ae      	adds	r2, #174	@ 0xae
 8006138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006140:	2303      	movs	r3, #3
 8006142:	e01c      	b.n	800617e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b03      	cmp	r3, #3
 800614e:	d115      	bne.n	800617c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	32ae      	adds	r2, #174	@ 0xae
 800615a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	32ae      	adds	r2, #174	@ 0xae
 800616e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	4611      	mov	r1, r2
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00e      	beq.n	80061d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6852      	ldr	r2, [r2, #4]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	4611      	mov	r1, r2
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	460b      	mov	r3, r1
 80061ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006208:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	885b      	ldrh	r3, [r3, #2]
 8006232:	b29b      	uxth	r3, r3
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	7812      	ldrb	r2, [r2, #0]
 8006238:	4293      	cmp	r3, r2
 800623a:	d91f      	bls.n	800627c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006242:	e013      	b.n	800626c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006244:	f107 030a 	add.w	r3, r7, #10
 8006248:	4619      	mov	r1, r3
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	f000 f81b 	bl	8006286 <USBD_GetNextDesc>
 8006250:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	2b05      	cmp	r3, #5
 8006258:	d108      	bne.n	800626c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	789b      	ldrb	r3, [r3, #2]
 8006262:	78fa      	ldrb	r2, [r7, #3]
 8006264:	429a      	cmp	r2, r3
 8006266:	d008      	beq.n	800627a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	885b      	ldrh	r3, [r3, #2]
 8006270:	b29a      	uxth	r2, r3
 8006272:	897b      	ldrh	r3, [r7, #10]
 8006274:	429a      	cmp	r2, r3
 8006276:	d8e5      	bhi.n	8006244 <USBD_GetEpDesc+0x2e>
 8006278:	e000      	b.n	800627c <USBD_GetEpDesc+0x66>
          break;
 800627a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800627c:	693b      	ldr	r3, [r7, #16]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	7812      	ldrb	r2, [r2, #0]
 800629c:	4413      	add	r3, r2
 800629e:	b29a      	uxth	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80062b0:	68fb      	ldr	r3, [r7, #12]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062be:	b480      	push	{r7}
 80062c0:	b087      	sub	sp, #28
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3301      	adds	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062dc:	8a3b      	ldrh	r3, [r7, #16]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	b21a      	sxth	r2, r3
 80062e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	b21b      	sxth	r3, r3
 80062ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062ec:	89fb      	ldrh	r3, [r7, #14]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006312:	2b40      	cmp	r3, #64	@ 0x40
 8006314:	d005      	beq.n	8006322 <USBD_StdDevReq+0x26>
 8006316:	2b40      	cmp	r3, #64	@ 0x40
 8006318:	d857      	bhi.n	80063ca <USBD_StdDevReq+0xce>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00f      	beq.n	800633e <USBD_StdDevReq+0x42>
 800631e:	2b20      	cmp	r3, #32
 8006320:	d153      	bne.n	80063ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	32ae      	adds	r2, #174	@ 0xae
 800632c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
      break;
 800633c:	e04a      	b.n	80063d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2b09      	cmp	r3, #9
 8006344:	d83b      	bhi.n	80063be <USBD_StdDevReq+0xc2>
 8006346:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <USBD_StdDevReq+0x50>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	080063a1 	.word	0x080063a1
 8006350:	080063b5 	.word	0x080063b5
 8006354:	080063bf 	.word	0x080063bf
 8006358:	080063ab 	.word	0x080063ab
 800635c:	080063bf 	.word	0x080063bf
 8006360:	0800637f 	.word	0x0800637f
 8006364:	08006375 	.word	0x08006375
 8006368:	080063bf 	.word	0x080063bf
 800636c:	08006397 	.word	0x08006397
 8006370:	08006389 	.word	0x08006389
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa3c 	bl	80067f4 <USBD_GetDescriptor>
          break;
 800637c:	e024      	b.n	80063c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fba1 	bl	8006ac8 <USBD_SetAddress>
          break;
 8006386:	e01f      	b.n	80063c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fbe0 	bl	8006b50 <USBD_SetConfig>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
          break;
 8006394:	e018      	b.n	80063c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc83 	bl	8006ca4 <USBD_GetConfig>
          break;
 800639e:	e013      	b.n	80063c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fcb4 	bl	8006d10 <USBD_GetStatus>
          break;
 80063a8:	e00e      	b.n	80063c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fce3 	bl	8006d78 <USBD_SetFeature>
          break;
 80063b2:	e009      	b.n	80063c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fd07 	bl	8006dca <USBD_ClrFeature>
          break;
 80063bc:	e004      	b.n	80063c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fd5e 	bl	8006e82 <USBD_CtlError>
          break;
 80063c6:	bf00      	nop
      }
      break;
 80063c8:	e004      	b.n	80063d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fd58 	bl	8006e82 <USBD_CtlError>
      break;
 80063d2:	bf00      	nop
  }

  return ret;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop

080063e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063f6:	2b40      	cmp	r3, #64	@ 0x40
 80063f8:	d005      	beq.n	8006406 <USBD_StdItfReq+0x26>
 80063fa:	2b40      	cmp	r3, #64	@ 0x40
 80063fc:	d852      	bhi.n	80064a4 <USBD_StdItfReq+0xc4>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <USBD_StdItfReq+0x26>
 8006402:	2b20      	cmp	r3, #32
 8006404:	d14e      	bne.n	80064a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800640c:	b2db      	uxtb	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	2b02      	cmp	r3, #2
 8006412:	d840      	bhi.n	8006496 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	889b      	ldrh	r3, [r3, #4]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b01      	cmp	r3, #1
 800641c:	d836      	bhi.n	800648c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	889b      	ldrh	r3, [r3, #4]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fedb 	bl	80061e2 <USBD_CoreFindIF>
 800642c:	4603      	mov	r3, r0
 800642e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2bff      	cmp	r3, #255	@ 0xff
 8006434:	d01d      	beq.n	8006472 <USBD_StdItfReq+0x92>
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d11a      	bne.n	8006472 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800643c:	7bba      	ldrb	r2, [r7, #14]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	32ae      	adds	r2, #174	@ 0xae
 8006442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00f      	beq.n	800646c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800644c:	7bba      	ldrb	r2, [r7, #14]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006454:	7bba      	ldrb	r2, [r7, #14]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	32ae      	adds	r2, #174	@ 0xae
 800645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
 8006466:	4603      	mov	r3, r0
 8006468:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800646a:	e004      	b.n	8006476 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006470:	e001      	b.n	8006476 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006472:	2303      	movs	r3, #3
 8006474:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	88db      	ldrh	r3, [r3, #6]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d110      	bne.n	80064a0 <USBD_StdItfReq+0xc0>
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10d      	bne.n	80064a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fdb6 	bl	8006ff6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800648a:	e009      	b.n	80064a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fcf7 	bl	8006e82 <USBD_CtlError>
          break;
 8006494:	e004      	b.n	80064a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fcf2 	bl	8006e82 <USBD_CtlError>
          break;
 800649e:	e000      	b.n	80064a2 <USBD_StdItfReq+0xc2>
          break;
 80064a0:	bf00      	nop
      }
      break;
 80064a2:	e004      	b.n	80064ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fceb 	bl	8006e82 <USBD_CtlError>
      break;
 80064ac:	bf00      	nop
  }

  return ret;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	889b      	ldrh	r3, [r3, #4]
 80064ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064d4:	2b40      	cmp	r3, #64	@ 0x40
 80064d6:	d007      	beq.n	80064e8 <USBD_StdEPReq+0x30>
 80064d8:	2b40      	cmp	r3, #64	@ 0x40
 80064da:	f200 817f 	bhi.w	80067dc <USBD_StdEPReq+0x324>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d02a      	beq.n	8006538 <USBD_StdEPReq+0x80>
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	f040 817a 	bne.w	80067dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fe85 	bl	80061fc <USBD_CoreFindEP>
 80064f2:	4603      	mov	r3, r0
 80064f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064f6:	7b7b      	ldrb	r3, [r7, #13]
 80064f8:	2bff      	cmp	r3, #255	@ 0xff
 80064fa:	f000 8174 	beq.w	80067e6 <USBD_StdEPReq+0x32e>
 80064fe:	7b7b      	ldrb	r3, [r7, #13]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 8170 	bne.w	80067e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006506:	7b7a      	ldrb	r2, [r7, #13]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800650e:	7b7a      	ldrb	r2, [r7, #13]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	32ae      	adds	r2, #174	@ 0xae
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8163 	beq.w	80067e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006520:	7b7a      	ldrb	r2, [r7, #13]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	32ae      	adds	r2, #174	@ 0xae
 8006526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	4798      	blx	r3
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006536:	e156      	b.n	80067e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d008      	beq.n	8006552 <USBD_StdEPReq+0x9a>
 8006540:	2b03      	cmp	r3, #3
 8006542:	f300 8145 	bgt.w	80067d0 <USBD_StdEPReq+0x318>
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 809b 	beq.w	8006682 <USBD_StdEPReq+0x1ca>
 800654c:	2b01      	cmp	r3, #1
 800654e:	d03c      	beq.n	80065ca <USBD_StdEPReq+0x112>
 8006550:	e13e      	b.n	80067d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d002      	beq.n	8006564 <USBD_StdEPReq+0xac>
 800655e:	2b03      	cmp	r3, #3
 8006560:	d016      	beq.n	8006590 <USBD_StdEPReq+0xd8>
 8006562:	e02c      	b.n	80065be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00d      	beq.n	8006586 <USBD_StdEPReq+0xce>
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	2b80      	cmp	r3, #128	@ 0x80
 800656e:	d00a      	beq.n	8006586 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f89b 	bl	80076b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800657a:	2180      	movs	r1, #128	@ 0x80
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f897 	bl	80076b0 <USBD_LL_StallEP>
 8006582:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006584:	e020      	b.n	80065c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fc7a 	bl	8006e82 <USBD_CtlError>
              break;
 800658e:	e01b      	b.n	80065c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	885b      	ldrh	r3, [r3, #2]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10e      	bne.n	80065b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <USBD_StdEPReq+0xfe>
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	2b80      	cmp	r3, #128	@ 0x80
 80065a2:	d008      	beq.n	80065b6 <USBD_StdEPReq+0xfe>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	88db      	ldrh	r3, [r3, #6]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 f87d 	bl	80076b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fd1d 	bl	8006ff6 <USBD_CtlSendStatus>

              break;
 80065bc:	e004      	b.n	80065c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fc5e 	bl	8006e82 <USBD_CtlError>
              break;
 80065c6:	bf00      	nop
          }
          break;
 80065c8:	e107      	b.n	80067da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d002      	beq.n	80065dc <USBD_StdEPReq+0x124>
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d016      	beq.n	8006608 <USBD_StdEPReq+0x150>
 80065da:	e04b      	b.n	8006674 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00d      	beq.n	80065fe <USBD_StdEPReq+0x146>
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	2b80      	cmp	r3, #128	@ 0x80
 80065e6:	d00a      	beq.n	80065fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 f85f 	bl	80076b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065f2:	2180      	movs	r1, #128	@ 0x80
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f85b 	bl	80076b0 <USBD_LL_StallEP>
 80065fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065fc:	e040      	b.n	8006680 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fc3e 	bl	8006e82 <USBD_CtlError>
              break;
 8006606:	e03b      	b.n	8006680 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	885b      	ldrh	r3, [r3, #2]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d136      	bne.n	800667e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 f865 	bl	80076ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fce6 	bl	8006ff6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fde4 	bl	80061fc <USBD_CoreFindEP>
 8006634:	4603      	mov	r3, r0
 8006636:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006638:	7b7b      	ldrb	r3, [r7, #13]
 800663a:	2bff      	cmp	r3, #255	@ 0xff
 800663c:	d01f      	beq.n	800667e <USBD_StdEPReq+0x1c6>
 800663e:	7b7b      	ldrb	r3, [r7, #13]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d11c      	bne.n	800667e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006644:	7b7a      	ldrb	r2, [r7, #13]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800664c:	7b7a      	ldrb	r2, [r7, #13]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	32ae      	adds	r2, #174	@ 0xae
 8006652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d010      	beq.n	800667e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800665c:	7b7a      	ldrb	r2, [r7, #13]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	32ae      	adds	r2, #174	@ 0xae
 8006662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
 800666e:	4603      	mov	r3, r0
 8006670:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006672:	e004      	b.n	800667e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fc03 	bl	8006e82 <USBD_CtlError>
              break;
 800667c:	e000      	b.n	8006680 <USBD_StdEPReq+0x1c8>
              break;
 800667e:	bf00      	nop
          }
          break;
 8006680:	e0ab      	b.n	80067da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d002      	beq.n	8006694 <USBD_StdEPReq+0x1dc>
 800668e:	2b03      	cmp	r3, #3
 8006690:	d032      	beq.n	80066f8 <USBD_StdEPReq+0x240>
 8006692:	e097      	b.n	80067c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <USBD_StdEPReq+0x1f2>
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	2b80      	cmp	r3, #128	@ 0x80
 800669e:	d004      	beq.n	80066aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fbed 	bl	8006e82 <USBD_CtlError>
                break;
 80066a8:	e091      	b.n	80067ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	da0b      	bge.n	80066ca <USBD_StdEPReq+0x212>
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	3310      	adds	r3, #16
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4413      	add	r3, r2
 80066c6:	3304      	adds	r3, #4
 80066c8:	e00b      	b.n	80066e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	3304      	adds	r3, #4
 80066e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2202      	movs	r2, #2
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fc43 	bl	8006f7c <USBD_CtlSendData>
              break;
 80066f6:	e06a      	b.n	80067ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da11      	bge.n	8006724 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	3324      	adds	r3, #36	@ 0x24
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d117      	bne.n	800674a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fbb0 	bl	8006e82 <USBD_CtlError>
                  break;
 8006722:	e054      	b.n	80067ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	f003 020f 	and.w	r2, r3, #15
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fb9d 	bl	8006e82 <USBD_CtlError>
                  break;
 8006748:	e041      	b.n	80067ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800674a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800674e:	2b00      	cmp	r3, #0
 8006750:	da0b      	bge.n	800676a <USBD_StdEPReq+0x2b2>
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	3310      	adds	r3, #16
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	3304      	adds	r3, #4
 8006768:	e00b      	b.n	8006782 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4413      	add	r3, r2
 8006780:	3304      	adds	r3, #4
 8006782:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <USBD_StdEPReq+0x2d8>
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	2b80      	cmp	r3, #128	@ 0x80
 800678e:	d103      	bne.n	8006798 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	e00e      	b.n	80067b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 ffc5 	bl	800772c <USBD_LL_IsStallEP>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e002      	b.n	80067b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2202      	movs	r2, #2
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fbdd 	bl	8006f7c <USBD_CtlSendData>
              break;
 80067c2:	e004      	b.n	80067ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fb5b 	bl	8006e82 <USBD_CtlError>
              break;
 80067cc:	bf00      	nop
          }
          break;
 80067ce:	e004      	b.n	80067da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fb55 	bl	8006e82 <USBD_CtlError>
          break;
 80067d8:	bf00      	nop
      }
      break;
 80067da:	e005      	b.n	80067e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fb4f 	bl	8006e82 <USBD_CtlError>
      break;
 80067e4:	e000      	b.n	80067e8 <USBD_StdEPReq+0x330>
      break;
 80067e6:	bf00      	nop
  }

  return ret;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	885b      	ldrh	r3, [r3, #2]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	2b06      	cmp	r3, #6
 8006816:	f200 8128 	bhi.w	8006a6a <USBD_GetDescriptor+0x276>
 800681a:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <USBD_GetDescriptor+0x2c>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	0800683d 	.word	0x0800683d
 8006824:	08006855 	.word	0x08006855
 8006828:	08006895 	.word	0x08006895
 800682c:	08006a6b 	.word	0x08006a6b
 8006830:	08006a6b 	.word	0x08006a6b
 8006834:	08006a0b 	.word	0x08006a0b
 8006838:	08006a37 	.word	0x08006a37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	7c12      	ldrb	r2, [r2, #16]
 8006848:	f107 0108 	add.w	r1, r7, #8
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
 8006850:	60f8      	str	r0, [r7, #12]
      break;
 8006852:	e112      	b.n	8006a7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	7c1b      	ldrb	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10d      	bne.n	8006878 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	f107 0208 	add.w	r2, r7, #8
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	2202      	movs	r2, #2
 8006874:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006876:	e100      	b.n	8006a7a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	f107 0208 	add.w	r2, r7, #8
 8006884:	4610      	mov	r0, r2
 8006886:	4798      	blx	r3
 8006888:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	2202      	movs	r2, #2
 8006890:	701a      	strb	r2, [r3, #0]
      break;
 8006892:	e0f2      	b.n	8006a7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	885b      	ldrh	r3, [r3, #2]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b05      	cmp	r3, #5
 800689c:	f200 80ac 	bhi.w	80069f8 <USBD_GetDescriptor+0x204>
 80068a0:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <USBD_GetDescriptor+0xb4>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068c1 	.word	0x080068c1
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	08006929 	.word	0x08006929
 80068b4:	0800695d 	.word	0x0800695d
 80068b8:	08006991 	.word	0x08006991
 80068bc:	080069c5 	.word	0x080069c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	7c12      	ldrb	r2, [r2, #16]
 80068d8:	f107 0108 	add.w	r1, r7, #8
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068e2:	e091      	b.n	8006a08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 facb 	bl	8006e82 <USBD_CtlError>
            err++;
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	3301      	adds	r3, #1
 80068f0:	72fb      	strb	r3, [r7, #11]
          break;
 80068f2:	e089      	b.n	8006a08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	7c12      	ldrb	r2, [r2, #16]
 800690c:	f107 0108 	add.w	r1, r7, #8
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
 8006914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006916:	e077      	b.n	8006a08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fab1 	bl	8006e82 <USBD_CtlError>
            err++;
 8006920:	7afb      	ldrb	r3, [r7, #11]
 8006922:	3301      	adds	r3, #1
 8006924:	72fb      	strb	r3, [r7, #11]
          break;
 8006926:	e06f      	b.n	8006a08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	7c12      	ldrb	r2, [r2, #16]
 8006940:	f107 0108 	add.w	r1, r7, #8
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800694a:	e05d      	b.n	8006a08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa97 	bl	8006e82 <USBD_CtlError>
            err++;
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	3301      	adds	r3, #1
 8006958:	72fb      	strb	r3, [r7, #11]
          break;
 800695a:	e055      	b.n	8006a08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7c12      	ldrb	r2, [r2, #16]
 8006974:	f107 0108 	add.w	r1, r7, #8
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
 800697c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697e:	e043      	b.n	8006a08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa7d 	bl	8006e82 <USBD_CtlError>
            err++;
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	3301      	adds	r3, #1
 800698c:	72fb      	strb	r3, [r7, #11]
          break;
 800698e:	e03b      	b.n	8006a08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	7c12      	ldrb	r2, [r2, #16]
 80069a8:	f107 0108 	add.w	r1, r7, #8
 80069ac:	4610      	mov	r0, r2
 80069ae:	4798      	blx	r3
 80069b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b2:	e029      	b.n	8006a08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa63 	bl	8006e82 <USBD_CtlError>
            err++;
 80069bc:	7afb      	ldrb	r3, [r7, #11]
 80069be:	3301      	adds	r3, #1
 80069c0:	72fb      	strb	r3, [r7, #11]
          break;
 80069c2:	e021      	b.n	8006a08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	7c12      	ldrb	r2, [r2, #16]
 80069dc:	f107 0108 	add.w	r1, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e6:	e00f      	b.n	8006a08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa49 	bl	8006e82 <USBD_CtlError>
            err++;
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	3301      	adds	r3, #1
 80069f4:	72fb      	strb	r3, [r7, #11]
          break;
 80069f6:	e007      	b.n	8006a08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa41 	bl	8006e82 <USBD_CtlError>
          err++;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	3301      	adds	r3, #1
 8006a04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006a06:	bf00      	nop
      }
      break;
 8006a08:	e037      	b.n	8006a7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7c1b      	ldrb	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1a:	f107 0208 	add.w	r2, r7, #8
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4798      	blx	r3
 8006a22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a24:	e029      	b.n	8006a7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fa2a 	bl	8006e82 <USBD_CtlError>
        err++;
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	3301      	adds	r3, #1
 8006a32:	72fb      	strb	r3, [r7, #11]
      break;
 8006a34:	e021      	b.n	8006a7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7c1b      	ldrb	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10d      	bne.n	8006a5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a46:	f107 0208 	add.w	r2, r7, #8
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4798      	blx	r3
 8006a4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	2207      	movs	r2, #7
 8006a56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a58:	e00f      	b.n	8006a7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa10 	bl	8006e82 <USBD_CtlError>
        err++;
 8006a62:	7afb      	ldrb	r3, [r7, #11]
 8006a64:	3301      	adds	r3, #1
 8006a66:	72fb      	strb	r3, [r7, #11]
      break;
 8006a68:	e007      	b.n	8006a7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa08 	bl	8006e82 <USBD_CtlError>
      err++;
 8006a72:	7afb      	ldrb	r3, [r7, #11]
 8006a74:	3301      	adds	r3, #1
 8006a76:	72fb      	strb	r3, [r7, #11]
      break;
 8006a78:	bf00      	nop
  }

  if (err != 0U)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11e      	bne.n	8006abe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	88db      	ldrh	r3, [r3, #6]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d016      	beq.n	8006ab6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a88:	893b      	ldrh	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	88da      	ldrh	r2, [r3, #6]
 8006a92:	893b      	ldrh	r3, [r7, #8]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	bf28      	it	cs
 8006a98:	4613      	movcs	r3, r2
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a9e:	893b      	ldrh	r3, [r7, #8]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fa69 	bl	8006f7c <USBD_CtlSendData>
 8006aaa:	e009      	b.n	8006ac0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9e7 	bl	8006e82 <USBD_CtlError>
 8006ab4:	e004      	b.n	8006ac0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fa9d 	bl	8006ff6 <USBD_CtlSendStatus>
 8006abc:	e000      	b.n	8006ac0 <USBD_GetDescriptor+0x2cc>
    return;
 8006abe:	bf00      	nop
  }
}
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop

08006ac8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	889b      	ldrh	r3, [r3, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d131      	bne.n	8006b3e <USBD_SetAddress+0x76>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	88db      	ldrh	r3, [r3, #6]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d12d      	bne.n	8006b3e <USBD_SetAddress+0x76>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	885b      	ldrh	r3, [r3, #2]
 8006ae6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ae8:	d829      	bhi.n	8006b3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	885b      	ldrh	r3, [r3, #2]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d104      	bne.n	8006b0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9bc 	bl	8006e82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0a:	e01d      	b.n	8006b48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7bfa      	ldrb	r2, [r7, #15]
 8006b10:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fe33 	bl	8007784 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa69 	bl	8006ff6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b32:	e009      	b.n	8006b48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3c:	e004      	b.n	8006b48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f99e 	bl	8006e82 <USBD_CtlError>
  }
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	4b4e      	ldr	r3, [pc, #312]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006b66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b68:	4b4d      	ldr	r3, [pc, #308]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d905      	bls.n	8006b7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f985 	bl	8006e82 <USBD_CtlError>
    return USBD_FAIL;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e08c      	b.n	8006c96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d002      	beq.n	8006b8e <USBD_SetConfig+0x3e>
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d029      	beq.n	8006be0 <USBD_SetConfig+0x90>
 8006b8c:	e075      	b.n	8006c7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b8e:	4b44      	ldr	r3, [pc, #272]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d020      	beq.n	8006bd8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006b96:	4b42      	ldr	r3, [pc, #264]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fe ffe3 	bl	8005b72 <USBD_SetClassConfig>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d008      	beq.n	8006bc8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f962 	bl	8006e82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bc6:	e065      	b.n	8006c94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fa14 	bl	8006ff6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006bd6:	e05d      	b.n	8006c94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fa0c 	bl	8006ff6 <USBD_CtlSendStatus>
      break;
 8006bde:	e059      	b.n	8006c94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006be0:	4b2f      	ldr	r3, [pc, #188]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d112      	bne.n	8006c0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bfa:	4b29      	ldr	r3, [pc, #164]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fe ffd2 	bl	8005baa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f9f5 	bl	8006ff6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c0c:	e042      	b.n	8006c94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006c0e:	4b24      	ldr	r3, [pc, #144]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d02a      	beq.n	8006c72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7fe ffc0 	bl	8005baa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c34:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fe ff99 	bl	8005b72 <USBD_SetClassConfig>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00f      	beq.n	8006c6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f918 	bl	8006e82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fe ffa5 	bl	8005baa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c68:	e014      	b.n	8006c94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f9c3 	bl	8006ff6 <USBD_CtlSendStatus>
      break;
 8006c70:	e010      	b.n	8006c94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f9bf 	bl	8006ff6 <USBD_CtlSendStatus>
      break;
 8006c78:	e00c      	b.n	8006c94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f900 	bl	8006e82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c82:	4b07      	ldr	r3, [pc, #28]	@ (8006ca0 <USBD_SetConfig+0x150>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7fe ff8e 	bl	8005baa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	73fb      	strb	r3, [r7, #15]
      break;
 8006c92:	bf00      	nop
  }

  return ret;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000184 	.word	0x20000184

08006ca4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	88db      	ldrh	r3, [r3, #6]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d004      	beq.n	8006cc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8e2 	bl	8006e82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cbe:	e023      	b.n	8006d08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	dc02      	bgt.n	8006cd2 <USBD_GetConfig+0x2e>
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dc03      	bgt.n	8006cd8 <USBD_GetConfig+0x34>
 8006cd0:	e015      	b.n	8006cfe <USBD_GetConfig+0x5a>
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d00b      	beq.n	8006cee <USBD_GetConfig+0x4a>
 8006cd6:	e012      	b.n	8006cfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f948 	bl	8006f7c <USBD_CtlSendData>
        break;
 8006cec:	e00c      	b.n	8006d08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f940 	bl	8006f7c <USBD_CtlSendData>
        break;
 8006cfc:	e004      	b.n	8006d08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f8be 	bl	8006e82 <USBD_CtlError>
        break;
 8006d06:	bf00      	nop
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d81e      	bhi.n	8006d66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	88db      	ldrh	r3, [r3, #6]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d004      	beq.n	8006d3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f8a5 	bl	8006e82 <USBD_CtlError>
        break;
 8006d38:	e01a      	b.n	8006d70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f043 0202 	orr.w	r2, r3, #2
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f90c 	bl	8006f7c <USBD_CtlSendData>
      break;
 8006d64:	e004      	b.n	8006d70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f88a 	bl	8006e82 <USBD_CtlError>
      break;
 8006d6e:	bf00      	nop
  }
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	885b      	ldrh	r3, [r3, #2]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d107      	bne.n	8006d9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f92f 	bl	8006ff6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006d98:	e013      	b.n	8006dc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	885b      	ldrh	r3, [r3, #2]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d10b      	bne.n	8006dba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	889b      	ldrh	r3, [r3, #4]
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f91f 	bl	8006ff6 <USBD_CtlSendStatus>
}
 8006db8:	e003      	b.n	8006dc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f860 	bl	8006e82 <USBD_CtlError>
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d80b      	bhi.n	8006dfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	885b      	ldrh	r3, [r3, #2]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d10c      	bne.n	8006e04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f8ff 	bl	8006ff6 <USBD_CtlSendStatus>
      }
      break;
 8006df8:	e004      	b.n	8006e04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f840 	bl	8006e82 <USBD_CtlError>
      break;
 8006e02:	e000      	b.n	8006e06 <USBD_ClrFeature+0x3c>
      break;
 8006e04:	bf00      	nop
  }
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fa40 	bl	80062be <SWAPBYTE>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f7ff fa33 	bl	80062be <SWAPBYTE>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f7ff fa26 	bl	80062be <SWAPBYTE>
 8006e72:	4603      	mov	r3, r0
 8006e74:	461a      	mov	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	80da      	strh	r2, [r3, #6]
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e8c:	2180      	movs	r1, #128	@ 0x80
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fc0e 	bl	80076b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc0a 	bl	80076b0 <USBD_LL_StallEP>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d042      	beq.n	8006f40 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006ebe:	6938      	ldr	r0, [r7, #16]
 8006ec0:	f000 f842 	bl	8006f48 <USBD_GetLen>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ece:	d808      	bhi.n	8006ee2 <USBD_GetString+0x3e>
 8006ed0:	6938      	ldr	r0, [r7, #16]
 8006ed2:	f000 f839 	bl	8006f48 <USBD_GetLen>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	e001      	b.n	8006ee6 <USBD_GetString+0x42>
 8006ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	4413      	add	r3, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	2203      	movs	r2, #3
 8006f04:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f0c:	e013      	b.n	8006f36 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	4413      	add	r3, r2
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	613b      	str	r3, [r7, #16]
    idx++;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	3301      	adds	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	3301      	adds	r3, #1
 8006f34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e7      	bne.n	8006f0e <USBD_GetString+0x6a>
 8006f3e:	e000      	b.n	8006f42 <USBD_GetString+0x9e>
    return;
 8006f40:	bf00      	nop
  }
}
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f58:	e005      	b.n	8006f66 <USBD_GetLen+0x1e>
  {
    len++;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	3301      	adds	r3, #1
 8006f64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f5      	bne.n	8006f5a <USBD_GetLen+0x12>
  }

  return len;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 fc0d 	bl	80077c2 <USBD_LL_Transmit>

  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 fbfc 	bl	80077c2 <USBD_LL_Transmit>

  return USBD_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fc0c 	bl	8007804 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007006:	2300      	movs	r3, #0
 8007008:	2200      	movs	r2, #0
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fbd8 	bl	80077c2 <USBD_LL_Transmit>

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2205      	movs	r2, #5
 8007028:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800702c:	2300      	movs	r3, #0
 800702e:	2200      	movs	r2, #0
 8007030:	2100      	movs	r1, #0
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fbe6 	bl	8007804 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007048:	2200      	movs	r2, #0
 800704a:	490e      	ldr	r1, [pc, #56]	@ (8007084 <MX_USB_DEVICE_Init+0x40>)
 800704c:	480e      	ldr	r0, [pc, #56]	@ (8007088 <MX_USB_DEVICE_Init+0x44>)
 800704e:	f7fe fd13 	bl	8005a78 <USBD_Init>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007058:	f7fa f950 	bl	80012fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800705c:	490b      	ldr	r1, [pc, #44]	@ (800708c <MX_USB_DEVICE_Init+0x48>)
 800705e:	480a      	ldr	r0, [pc, #40]	@ (8007088 <MX_USB_DEVICE_Init+0x44>)
 8007060:	f7fe fd3a 	bl	8005ad8 <USBD_RegisterClass>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800706a:	f7fa f947 	bl	80012fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800706e:	4806      	ldr	r0, [pc, #24]	@ (8007088 <MX_USB_DEVICE_Init+0x44>)
 8007070:	f7fe fd68 	bl	8005b44 <USBD_Start>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800707a:	f7fa f93f 	bl	80012fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800707e:	bf00      	nop
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	200000cc 	.word	0x200000cc
 8007088:	20000188 	.word	0x20000188
 800708c:	2000000c 	.word	0x2000000c

08007090 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2212      	movs	r2, #18
 80070a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070a2:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	200000e8 	.word	0x200000e8

080070b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	6039      	str	r1, [r7, #0]
 80070be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2204      	movs	r2, #4
 80070c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070c6:	4b03      	ldr	r3, [pc, #12]	@ (80070d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	200000fc 	.word	0x200000fc

080070d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	6039      	str	r1, [r7, #0]
 80070e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070e4:	79fb      	ldrb	r3, [r7, #7]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	4907      	ldr	r1, [pc, #28]	@ (800710c <USBD_FS_ProductStrDescriptor+0x34>)
 80070ee:	4808      	ldr	r0, [pc, #32]	@ (8007110 <USBD_FS_ProductStrDescriptor+0x38>)
 80070f0:	f7ff fed8 	bl	8006ea4 <USBD_GetString>
 80070f4:	e004      	b.n	8007100 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	4904      	ldr	r1, [pc, #16]	@ (800710c <USBD_FS_ProductStrDescriptor+0x34>)
 80070fa:	4805      	ldr	r0, [pc, #20]	@ (8007110 <USBD_FS_ProductStrDescriptor+0x38>)
 80070fc:	f7ff fed2 	bl	8006ea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007100:	4b02      	ldr	r3, [pc, #8]	@ (800710c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000464 	.word	0x20000464
 8007110:	0800843c 	.word	0x0800843c

08007114 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	4904      	ldr	r1, [pc, #16]	@ (8007134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007124:	4804      	ldr	r0, [pc, #16]	@ (8007138 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007126:	f7ff febd 	bl	8006ea4 <USBD_GetString>
  return USBD_StrDesc;
 800712a:	4b02      	ldr	r3, [pc, #8]	@ (8007134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000464 	.word	0x20000464
 8007138:	08008454 	.word	0x08008454

0800713c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	221a      	movs	r2, #26
 800714c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800714e:	f000 f843 	bl	80071d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007152:	4b02      	ldr	r3, [pc, #8]	@ (800715c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000100 	.word	0x20000100

08007160 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	4907      	ldr	r1, [pc, #28]	@ (8007194 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007176:	4808      	ldr	r0, [pc, #32]	@ (8007198 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007178:	f7ff fe94 	bl	8006ea4 <USBD_GetString>
 800717c:	e004      	b.n	8007188 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	4904      	ldr	r1, [pc, #16]	@ (8007194 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007182:	4805      	ldr	r0, [pc, #20]	@ (8007198 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007184:	f7ff fe8e 	bl	8006ea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007188:	4b02      	ldr	r3, [pc, #8]	@ (8007194 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000464 	.word	0x20000464
 8007198:	08008468 	.word	0x08008468

0800719c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	6039      	str	r1, [r7, #0]
 80071a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4907      	ldr	r1, [pc, #28]	@ (80071d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071b2:	4808      	ldr	r0, [pc, #32]	@ (80071d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071b4:	f7ff fe76 	bl	8006ea4 <USBD_GetString>
 80071b8:	e004      	b.n	80071c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	4904      	ldr	r1, [pc, #16]	@ (80071d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071be:	4805      	ldr	r0, [pc, #20]	@ (80071d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071c0:	f7ff fe70 	bl	8006ea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071c4:	4b02      	ldr	r3, [pc, #8]	@ (80071d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000464 	.word	0x20000464
 80071d4:	08008474 	.word	0x08008474

080071d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071de:	4b0f      	ldr	r3, [pc, #60]	@ (800721c <Get_SerialNum+0x44>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007220 <Get_SerialNum+0x48>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007224 <Get_SerialNum+0x4c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4413      	add	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071fe:	2208      	movs	r2, #8
 8007200:	4909      	ldr	r1, [pc, #36]	@ (8007228 <Get_SerialNum+0x50>)
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f814 	bl	8007230 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007208:	2204      	movs	r2, #4
 800720a:	4908      	ldr	r1, [pc, #32]	@ (800722c <Get_SerialNum+0x54>)
 800720c:	68b8      	ldr	r0, [r7, #8]
 800720e:	f000 f80f 	bl	8007230 <IntToUnicode>
  }
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	1fff7a10 	.word	0x1fff7a10
 8007220:	1fff7a14 	.word	0x1fff7a14
 8007224:	1fff7a18 	.word	0x1fff7a18
 8007228:	20000102 	.word	0x20000102
 800722c:	20000112 	.word	0x20000112

08007230 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]
 8007246:	e027      	b.n	8007298 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	0f1b      	lsrs	r3, r3, #28
 800724c:	2b09      	cmp	r3, #9
 800724e:	d80b      	bhi.n	8007268 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	0f1b      	lsrs	r3, r3, #28
 8007254:	b2da      	uxtb	r2, r3
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4619      	mov	r1, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	440b      	add	r3, r1
 8007260:	3230      	adds	r2, #48	@ 0x30
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e00a      	b.n	800727e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	0f1b      	lsrs	r3, r3, #28
 800726c:	b2da      	uxtb	r2, r3
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	4619      	mov	r1, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	440b      	add	r3, r1
 8007278:	3237      	adds	r2, #55	@ 0x37
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	3301      	adds	r3, #1
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4413      	add	r3, r2
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	3301      	adds	r3, #1
 8007296:	75fb      	strb	r3, [r7, #23]
 8007298:	7dfa      	ldrb	r2, [r7, #23]
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	429a      	cmp	r2, r3
 800729e:	d3d3      	bcc.n	8007248 <IntToUnicode+0x18>
  }
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	@ 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	60da      	str	r2, [r3, #12]
 80072c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072d0:	d147      	bne.n	8007362 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072d2:	2300      	movs	r3, #0
 80072d4:	613b      	str	r3, [r7, #16]
 80072d6:	4b25      	ldr	r3, [pc, #148]	@ (800736c <HAL_PCD_MspInit+0xbc>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072da:	4a24      	ldr	r2, [pc, #144]	@ (800736c <HAL_PCD_MspInit+0xbc>)
 80072dc:	f043 0301 	orr.w	r3, r3, #1
 80072e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80072e2:	4b22      	ldr	r3, [pc, #136]	@ (800736c <HAL_PCD_MspInit+0xbc>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80072ee:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80072f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f4:	2302      	movs	r3, #2
 80072f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072fc:	2303      	movs	r3, #3
 80072fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007300:	230a      	movs	r3, #10
 8007302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007304:	f107 0314 	add.w	r3, r7, #20
 8007308:	4619      	mov	r1, r3
 800730a:	4819      	ldr	r0, [pc, #100]	@ (8007370 <HAL_PCD_MspInit+0xc0>)
 800730c:	f7fa fa8a 	bl	8001824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800731e:	f107 0314 	add.w	r3, r7, #20
 8007322:	4619      	mov	r1, r3
 8007324:	4812      	ldr	r0, [pc, #72]	@ (8007370 <HAL_PCD_MspInit+0xc0>)
 8007326:	f7fa fa7d 	bl	8001824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800732a:	4b10      	ldr	r3, [pc, #64]	@ (800736c <HAL_PCD_MspInit+0xbc>)
 800732c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732e:	4a0f      	ldr	r2, [pc, #60]	@ (800736c <HAL_PCD_MspInit+0xbc>)
 8007330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007334:	6353      	str	r3, [r2, #52]	@ 0x34
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	4b0c      	ldr	r3, [pc, #48]	@ (800736c <HAL_PCD_MspInit+0xbc>)
 800733c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733e:	4a0b      	ldr	r2, [pc, #44]	@ (800736c <HAL_PCD_MspInit+0xbc>)
 8007340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007344:	6453      	str	r3, [r2, #68]	@ 0x44
 8007346:	4b09      	ldr	r3, [pc, #36]	@ (800736c <HAL_PCD_MspInit+0xbc>)
 8007348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800734a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007352:	2200      	movs	r2, #0
 8007354:	2100      	movs	r1, #0
 8007356:	2043      	movs	r0, #67	@ 0x43
 8007358:	f7fa fa2d 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800735c:	2043      	movs	r0, #67	@ 0x43
 800735e:	f7fa fa46 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007362:	bf00      	nop
 8007364:	3728      	adds	r7, #40	@ 0x28
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	40023800 	.word	0x40023800
 8007370:	40020000 	.word	0x40020000

08007374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f7fe fc27 	bl	8005bde <USBD_LL_SetupStage>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80073aa:	78fa      	ldrb	r2, [r7, #3]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	4619      	mov	r1, r3
 80073c2:	f7fe fc61 	bl	8005c88 <USBD_LL_DataOutStage>
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	3320      	adds	r3, #32
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	4619      	mov	r1, r3
 80073f6:	f7fe fcfa 	bl	8005dee <USBD_LL_DataInStage>
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe fe34 	bl	800607e <USBD_LL_SOF>
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007426:	2301      	movs	r3, #1
 8007428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	79db      	ldrb	r3, [r3, #7]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d102      	bne.n	8007438 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	e008      	b.n	800744a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	79db      	ldrb	r3, [r3, #7]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d102      	bne.n	8007446 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007440:	2301      	movs	r3, #1
 8007442:	73fb      	strb	r3, [r7, #15]
 8007444:	e001      	b.n	800744a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007446:	f7f9 ff59 	bl	80012fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007450:	7bfa      	ldrb	r2, [r7, #15]
 8007452:	4611      	mov	r1, r2
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe fdce 	bl	8005ff6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fd76 	bl	8005f52 <USBD_LL_Reset>
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fdc9 	bl	8006016 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007496:	f043 0301 	orr.w	r3, r3, #1
 800749a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7adb      	ldrb	r3, [r3, #11]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074a4:	4b04      	ldr	r3, [pc, #16]	@ (80074b8 <HAL_PCD_SuspendCallback+0x48>)
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	4a03      	ldr	r2, [pc, #12]	@ (80074b8 <HAL_PCD_SuspendCallback+0x48>)
 80074aa:	f043 0306 	orr.w	r3, r3, #6
 80074ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed00 	.word	0xe000ed00

080074bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fdbf 	bl	800604e <USBD_LL_Resume>
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074ea:	78fa      	ldrb	r2, [r7, #3]
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fe17 	bl	8006122 <USBD_LL_IsoOUTIncomplete>
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe fdd3 	bl	80060be <USBD_LL_IsoINIncomplete>
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fe29 	bl	8006186 <USBD_LL_DevConnected>
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fe26 	bl	800619c <USBD_LL_DevDisconnected>
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d13c      	bne.n	80075e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007568:	4a20      	ldr	r2, [pc, #128]	@ (80075ec <USBD_LL_Init+0x94>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a1e      	ldr	r2, [pc, #120]	@ (80075ec <USBD_LL_Init+0x94>)
 8007574:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007578:	4b1c      	ldr	r3, [pc, #112]	@ (80075ec <USBD_LL_Init+0x94>)
 800757a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800757e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007580:	4b1a      	ldr	r3, [pc, #104]	@ (80075ec <USBD_LL_Init+0x94>)
 8007582:	2204      	movs	r2, #4
 8007584:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007586:	4b19      	ldr	r3, [pc, #100]	@ (80075ec <USBD_LL_Init+0x94>)
 8007588:	2202      	movs	r2, #2
 800758a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800758c:	4b17      	ldr	r3, [pc, #92]	@ (80075ec <USBD_LL_Init+0x94>)
 800758e:	2200      	movs	r2, #0
 8007590:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007592:	4b16      	ldr	r3, [pc, #88]	@ (80075ec <USBD_LL_Init+0x94>)
 8007594:	2202      	movs	r2, #2
 8007596:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007598:	4b14      	ldr	r3, [pc, #80]	@ (80075ec <USBD_LL_Init+0x94>)
 800759a:	2201      	movs	r2, #1
 800759c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800759e:	4b13      	ldr	r3, [pc, #76]	@ (80075ec <USBD_LL_Init+0x94>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075a4:	4b11      	ldr	r3, [pc, #68]	@ (80075ec <USBD_LL_Init+0x94>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80075aa:	4b10      	ldr	r3, [pc, #64]	@ (80075ec <USBD_LL_Init+0x94>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075b0:	4b0e      	ldr	r3, [pc, #56]	@ (80075ec <USBD_LL_Init+0x94>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075b6:	480d      	ldr	r0, [pc, #52]	@ (80075ec <USBD_LL_Init+0x94>)
 80075b8:	f7fa fb11 	bl	8001bde <HAL_PCD_Init>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075c2:	f7f9 fe9b 	bl	80012fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075c6:	2180      	movs	r1, #128	@ 0x80
 80075c8:	4808      	ldr	r0, [pc, #32]	@ (80075ec <USBD_LL_Init+0x94>)
 80075ca:	f7fb fd26 	bl	800301a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075ce:	2240      	movs	r2, #64	@ 0x40
 80075d0:	2100      	movs	r1, #0
 80075d2:	4806      	ldr	r0, [pc, #24]	@ (80075ec <USBD_LL_Init+0x94>)
 80075d4:	f7fb fcda 	bl	8002f8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075d8:	2280      	movs	r2, #128	@ 0x80
 80075da:	2101      	movs	r1, #1
 80075dc:	4803      	ldr	r0, [pc, #12]	@ (80075ec <USBD_LL_Init+0x94>)
 80075de:	f7fb fcd5 	bl	8002f8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000664 	.word	0x20000664

080075f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007606:	4618      	mov	r0, r3
 8007608:	f7fa fbf8 	bl	8001dfc <HAL_PCD_Start>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f930 	bl	8007878 <USBD_Get_USB_Status>
 8007618:	4603      	mov	r3, r0
 800761a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800761c:	7bbb      	ldrb	r3, [r7, #14]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	4608      	mov	r0, r1
 8007630:	4611      	mov	r1, r2
 8007632:	461a      	mov	r2, r3
 8007634:	4603      	mov	r3, r0
 8007636:	70fb      	strb	r3, [r7, #3]
 8007638:	460b      	mov	r3, r1
 800763a:	70bb      	strb	r3, [r7, #2]
 800763c:	4613      	mov	r3, r2
 800763e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800764e:	78bb      	ldrb	r3, [r7, #2]
 8007650:	883a      	ldrh	r2, [r7, #0]
 8007652:	78f9      	ldrb	r1, [r7, #3]
 8007654:	f7fb f8cc 	bl	80027f0 <HAL_PCD_EP_Open>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f90a 	bl	8007878 <USBD_Get_USB_Status>
 8007664:	4603      	mov	r3, r0
 8007666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007668:	7bbb      	ldrb	r3, [r7, #14]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f7fb f917 	bl	80028c4 <HAL_PCD_EP_Close>
 8007696:	4603      	mov	r3, r0
 8007698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 f8eb 	bl	8007878 <USBD_Get_USB_Status>
 80076a2:	4603      	mov	r3, r0
 80076a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076ca:	78fa      	ldrb	r2, [r7, #3]
 80076cc:	4611      	mov	r1, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fb f9b7 	bl	8002a42 <HAL_PCD_EP_SetStall>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 f8cc 	bl	8007878 <USBD_Get_USB_Status>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	4611      	mov	r1, r2
 800770c:	4618      	mov	r0, r3
 800770e:	f7fb f9fb 	bl	8002b08 <HAL_PCD_EP_ClrStall>
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	4618      	mov	r0, r3
 800771a:	f000 f8ad 	bl	8007878 <USBD_Get_USB_Status>
 800771e:	4603      	mov	r3, r0
 8007720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007722:	7bbb      	ldrb	r3, [r7, #14]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800773e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007744:	2b00      	cmp	r3, #0
 8007746:	da0b      	bge.n	8007760 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	4613      	mov	r3, r2
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	3316      	adds	r3, #22
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	e00b      	b.n	8007778 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	4613      	mov	r3, r2
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007776:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fb f800 	bl	80027a8 <HAL_PCD_SetAddress>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 f862 	bl	8007878 <USBD_Get_USB_Status>
 80077b4:	4603      	mov	r3, r0
 80077b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b086      	sub	sp, #24
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
 80077ce:	460b      	mov	r3, r1
 80077d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80077e0:	7af9      	ldrb	r1, [r7, #11]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	f7fb f8f2 	bl	80029ce <HAL_PCD_EP_Transmit>
 80077ea:	4603      	mov	r3, r0
 80077ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f841 	bl	8007878 <USBD_Get_USB_Status>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	460b      	mov	r3, r1
 8007812:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007822:	7af9      	ldrb	r1, [r7, #11]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	f7fb f896 	bl	8002958 <HAL_PCD_EP_Receive>
 800782c:	4603      	mov	r3, r0
 800782e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f820 	bl	8007878 <USBD_Get_USB_Status>
 8007838:	4603      	mov	r3, r0
 800783a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800783c:	7dbb      	ldrb	r3, [r7, #22]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007850:	4b03      	ldr	r3, [pc, #12]	@ (8007860 <USBD_static_malloc+0x18>)
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20000b48 	.word	0x20000b48

08007864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]

}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	2b03      	cmp	r3, #3
 800788a:	d817      	bhi.n	80078bc <USBD_Get_USB_Status+0x44>
 800788c:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <USBD_Get_USB_Status+0x1c>)
 800788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007892:	bf00      	nop
 8007894:	080078a5 	.word	0x080078a5
 8007898:	080078ab 	.word	0x080078ab
 800789c:	080078b1 	.word	0x080078b1
 80078a0:	080078b7 	.word	0x080078b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
    break;
 80078a8:	e00b      	b.n	80078c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078aa:	2303      	movs	r3, #3
 80078ac:	73fb      	strb	r3, [r7, #15]
    break;
 80078ae:	e008      	b.n	80078c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078b0:	2301      	movs	r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]
    break;
 80078b4:	e005      	b.n	80078c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078b6:	2303      	movs	r3, #3
 80078b8:	73fb      	strb	r3, [r7, #15]
    break;
 80078ba:	e002      	b.n	80078c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078bc:	2303      	movs	r3, #3
 80078be:	73fb      	strb	r3, [r7, #15]
    break;
 80078c0:	bf00      	nop
  }
  return usb_status;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <memset>:
 80078d0:	4402      	add	r2, r0
 80078d2:	4603      	mov	r3, r0
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d100      	bne.n	80078da <memset+0xa>
 80078d8:	4770      	bx	lr
 80078da:	f803 1b01 	strb.w	r1, [r3], #1
 80078de:	e7f9      	b.n	80078d4 <memset+0x4>

080078e0 <__libc_init_array>:
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007918 <__libc_init_array+0x38>)
 80078e4:	4c0d      	ldr	r4, [pc, #52]	@ (800791c <__libc_init_array+0x3c>)
 80078e6:	1b64      	subs	r4, r4, r5
 80078e8:	10a4      	asrs	r4, r4, #2
 80078ea:	2600      	movs	r6, #0
 80078ec:	42a6      	cmp	r6, r4
 80078ee:	d109      	bne.n	8007904 <__libc_init_array+0x24>
 80078f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007920 <__libc_init_array+0x40>)
 80078f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007924 <__libc_init_array+0x44>)
 80078f4:	f000 fd96 	bl	8008424 <_init>
 80078f8:	1b64      	subs	r4, r4, r5
 80078fa:	10a4      	asrs	r4, r4, #2
 80078fc:	2600      	movs	r6, #0
 80078fe:	42a6      	cmp	r6, r4
 8007900:	d105      	bne.n	800790e <__libc_init_array+0x2e>
 8007902:	bd70      	pop	{r4, r5, r6, pc}
 8007904:	f855 3b04 	ldr.w	r3, [r5], #4
 8007908:	4798      	blx	r3
 800790a:	3601      	adds	r6, #1
 800790c:	e7ee      	b.n	80078ec <__libc_init_array+0xc>
 800790e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007912:	4798      	blx	r3
 8007914:	3601      	adds	r6, #1
 8007916:	e7f2      	b.n	80078fe <__libc_init_array+0x1e>
 8007918:	08008874 	.word	0x08008874
 800791c:	08008874 	.word	0x08008874
 8007920:	08008874 	.word	0x08008874
 8007924:	08008878 	.word	0x08008878

08007928 <cosf>:
 8007928:	ee10 3a10 	vmov	r3, s0
 800792c:	b507      	push	{r0, r1, r2, lr}
 800792e:	4a1e      	ldr	r2, [pc, #120]	@ (80079a8 <cosf+0x80>)
 8007930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007934:	4293      	cmp	r3, r2
 8007936:	d806      	bhi.n	8007946 <cosf+0x1e>
 8007938:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80079ac <cosf+0x84>
 800793c:	b003      	add	sp, #12
 800793e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007942:	f000 b87b 	b.w	8007a3c <__kernel_cosf>
 8007946:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800794a:	d304      	bcc.n	8007956 <cosf+0x2e>
 800794c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007950:	b003      	add	sp, #12
 8007952:	f85d fb04 	ldr.w	pc, [sp], #4
 8007956:	4668      	mov	r0, sp
 8007958:	f000 f910 	bl	8007b7c <__ieee754_rem_pio2f>
 800795c:	f000 0003 	and.w	r0, r0, #3
 8007960:	2801      	cmp	r0, #1
 8007962:	d009      	beq.n	8007978 <cosf+0x50>
 8007964:	2802      	cmp	r0, #2
 8007966:	d010      	beq.n	800798a <cosf+0x62>
 8007968:	b9b0      	cbnz	r0, 8007998 <cosf+0x70>
 800796a:	eddd 0a01 	vldr	s1, [sp, #4]
 800796e:	ed9d 0a00 	vldr	s0, [sp]
 8007972:	f000 f863 	bl	8007a3c <__kernel_cosf>
 8007976:	e7eb      	b.n	8007950 <cosf+0x28>
 8007978:	eddd 0a01 	vldr	s1, [sp, #4]
 800797c:	ed9d 0a00 	vldr	s0, [sp]
 8007980:	f000 f8b4 	bl	8007aec <__kernel_sinf>
 8007984:	eeb1 0a40 	vneg.f32	s0, s0
 8007988:	e7e2      	b.n	8007950 <cosf+0x28>
 800798a:	eddd 0a01 	vldr	s1, [sp, #4]
 800798e:	ed9d 0a00 	vldr	s0, [sp]
 8007992:	f000 f853 	bl	8007a3c <__kernel_cosf>
 8007996:	e7f5      	b.n	8007984 <cosf+0x5c>
 8007998:	eddd 0a01 	vldr	s1, [sp, #4]
 800799c:	ed9d 0a00 	vldr	s0, [sp]
 80079a0:	2001      	movs	r0, #1
 80079a2:	f000 f8a3 	bl	8007aec <__kernel_sinf>
 80079a6:	e7d3      	b.n	8007950 <cosf+0x28>
 80079a8:	3f490fd8 	.word	0x3f490fd8
 80079ac:	00000000 	.word	0x00000000

080079b0 <sinf>:
 80079b0:	ee10 3a10 	vmov	r3, s0
 80079b4:	b507      	push	{r0, r1, r2, lr}
 80079b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a34 <sinf+0x84>)
 80079b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079bc:	4293      	cmp	r3, r2
 80079be:	d807      	bhi.n	80079d0 <sinf+0x20>
 80079c0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007a38 <sinf+0x88>
 80079c4:	2000      	movs	r0, #0
 80079c6:	b003      	add	sp, #12
 80079c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079cc:	f000 b88e 	b.w	8007aec <__kernel_sinf>
 80079d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80079d4:	d304      	bcc.n	80079e0 <sinf+0x30>
 80079d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80079da:	b003      	add	sp, #12
 80079dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80079e0:	4668      	mov	r0, sp
 80079e2:	f000 f8cb 	bl	8007b7c <__ieee754_rem_pio2f>
 80079e6:	f000 0003 	and.w	r0, r0, #3
 80079ea:	2801      	cmp	r0, #1
 80079ec:	d00a      	beq.n	8007a04 <sinf+0x54>
 80079ee:	2802      	cmp	r0, #2
 80079f0:	d00f      	beq.n	8007a12 <sinf+0x62>
 80079f2:	b9c0      	cbnz	r0, 8007a26 <sinf+0x76>
 80079f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80079f8:	ed9d 0a00 	vldr	s0, [sp]
 80079fc:	2001      	movs	r0, #1
 80079fe:	f000 f875 	bl	8007aec <__kernel_sinf>
 8007a02:	e7ea      	b.n	80079da <sinf+0x2a>
 8007a04:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a08:	ed9d 0a00 	vldr	s0, [sp]
 8007a0c:	f000 f816 	bl	8007a3c <__kernel_cosf>
 8007a10:	e7e3      	b.n	80079da <sinf+0x2a>
 8007a12:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a16:	ed9d 0a00 	vldr	s0, [sp]
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	f000 f866 	bl	8007aec <__kernel_sinf>
 8007a20:	eeb1 0a40 	vneg.f32	s0, s0
 8007a24:	e7d9      	b.n	80079da <sinf+0x2a>
 8007a26:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a2a:	ed9d 0a00 	vldr	s0, [sp]
 8007a2e:	f000 f805 	bl	8007a3c <__kernel_cosf>
 8007a32:	e7f5      	b.n	8007a20 <sinf+0x70>
 8007a34:	3f490fd8 	.word	0x3f490fd8
 8007a38:	00000000 	.word	0x00000000

08007a3c <__kernel_cosf>:
 8007a3c:	ee10 3a10 	vmov	r3, s0
 8007a40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a44:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007a48:	eef0 6a40 	vmov.f32	s13, s0
 8007a4c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007a50:	d204      	bcs.n	8007a5c <__kernel_cosf+0x20>
 8007a52:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8007a56:	ee17 2a90 	vmov	r2, s15
 8007a5a:	b342      	cbz	r2, 8007aae <__kernel_cosf+0x72>
 8007a5c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007a60:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8007acc <__kernel_cosf+0x90>
 8007a64:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007ad0 <__kernel_cosf+0x94>
 8007a68:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad4 <__kernel_cosf+0x98>)
 8007a6a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007ad8 <__kernel_cosf+0x9c>
 8007a74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007a78:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8007adc <__kernel_cosf+0xa0>
 8007a7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007a80:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007ae0 <__kernel_cosf+0xa4>
 8007a84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007a88:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8007ae4 <__kernel_cosf+0xa8>
 8007a8c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007a90:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8007a94:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007a98:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007a9c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa4:	d804      	bhi.n	8007ab0 <__kernel_cosf+0x74>
 8007aa6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007aaa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007aae:	4770      	bx	lr
 8007ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8007ae8 <__kernel_cosf+0xac>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	bf9a      	itte	ls
 8007ab6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8007aba:	ee07 3a10 	vmovls	s14, r3
 8007abe:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8007ac2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007ac6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007aca:	e7ec      	b.n	8007aa6 <__kernel_cosf+0x6a>
 8007acc:	ad47d74e 	.word	0xad47d74e
 8007ad0:	310f74f6 	.word	0x310f74f6
 8007ad4:	3e999999 	.word	0x3e999999
 8007ad8:	b493f27c 	.word	0xb493f27c
 8007adc:	37d00d01 	.word	0x37d00d01
 8007ae0:	bab60b61 	.word	0xbab60b61
 8007ae4:	3d2aaaab 	.word	0x3d2aaaab
 8007ae8:	3f480000 	.word	0x3f480000

08007aec <__kernel_sinf>:
 8007aec:	ee10 3a10 	vmov	r3, s0
 8007af0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007af4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007af8:	d204      	bcs.n	8007b04 <__kernel_sinf+0x18>
 8007afa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007afe:	ee17 3a90 	vmov	r3, s15
 8007b02:	b35b      	cbz	r3, 8007b5c <__kernel_sinf+0x70>
 8007b04:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007b08:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007b60 <__kernel_sinf+0x74>
 8007b0c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8007b64 <__kernel_sinf+0x78>
 8007b10:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b14:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8007b68 <__kernel_sinf+0x7c>
 8007b18:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b1c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8007b6c <__kernel_sinf+0x80>
 8007b20:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007b24:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8007b70 <__kernel_sinf+0x84>
 8007b28:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007b2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b30:	b930      	cbnz	r0, 8007b40 <__kernel_sinf+0x54>
 8007b32:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007b74 <__kernel_sinf+0x88>
 8007b36:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b3a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007b3e:	4770      	bx	lr
 8007b40:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007b44:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007b48:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007b4c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007b50:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8007b78 <__kernel_sinf+0x8c>
 8007b54:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007b58:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	2f2ec9d3 	.word	0x2f2ec9d3
 8007b64:	b2d72f34 	.word	0xb2d72f34
 8007b68:	3638ef1b 	.word	0x3638ef1b
 8007b6c:	b9500d01 	.word	0xb9500d01
 8007b70:	3c088889 	.word	0x3c088889
 8007b74:	be2aaaab 	.word	0xbe2aaaab
 8007b78:	3e2aaaab 	.word	0x3e2aaaab

08007b7c <__ieee754_rem_pio2f>:
 8007b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b7e:	ee10 6a10 	vmov	r6, s0
 8007b82:	4b88      	ldr	r3, [pc, #544]	@ (8007da4 <__ieee754_rem_pio2f+0x228>)
 8007b84:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	d805      	bhi.n	8007b9c <__ieee754_rem_pio2f+0x20>
 8007b90:	2300      	movs	r3, #0
 8007b92:	ed80 0a00 	vstr	s0, [r0]
 8007b96:	6043      	str	r3, [r0, #4]
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e022      	b.n	8007be2 <__ieee754_rem_pio2f+0x66>
 8007b9c:	4b82      	ldr	r3, [pc, #520]	@ (8007da8 <__ieee754_rem_pio2f+0x22c>)
 8007b9e:	429d      	cmp	r5, r3
 8007ba0:	d83a      	bhi.n	8007c18 <__ieee754_rem_pio2f+0x9c>
 8007ba2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007dac <__ieee754_rem_pio2f+0x230>
 8007bac:	4a80      	ldr	r2, [pc, #512]	@ (8007db0 <__ieee754_rem_pio2f+0x234>)
 8007bae:	f023 030f 	bic.w	r3, r3, #15
 8007bb2:	dd18      	ble.n	8007be6 <__ieee754_rem_pio2f+0x6a>
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007bba:	bf09      	itett	eq
 8007bbc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8007db4 <__ieee754_rem_pio2f+0x238>
 8007bc0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8007db8 <__ieee754_rem_pio2f+0x23c>
 8007bc4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8007dbc <__ieee754_rem_pio2f+0x240>
 8007bc8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007bcc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007bd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bd4:	ed80 7a00 	vstr	s14, [r0]
 8007bd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007bdc:	edc0 7a01 	vstr	s15, [r0, #4]
 8007be0:	2001      	movs	r0, #1
 8007be2:	b007      	add	sp, #28
 8007be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be6:	4293      	cmp	r3, r2
 8007be8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007bec:	bf09      	itett	eq
 8007bee:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8007db4 <__ieee754_rem_pio2f+0x238>
 8007bf2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8007db8 <__ieee754_rem_pio2f+0x23c>
 8007bf6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8007dbc <__ieee754_rem_pio2f+0x240>
 8007bfa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007bfe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007c02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c06:	ed80 7a00 	vstr	s14, [r0]
 8007c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0e:	edc0 7a01 	vstr	s15, [r0, #4]
 8007c12:	f04f 30ff 	mov.w	r0, #4294967295
 8007c16:	e7e4      	b.n	8007be2 <__ieee754_rem_pio2f+0x66>
 8007c18:	4b69      	ldr	r3, [pc, #420]	@ (8007dc0 <__ieee754_rem_pio2f+0x244>)
 8007c1a:	429d      	cmp	r5, r3
 8007c1c:	d873      	bhi.n	8007d06 <__ieee754_rem_pio2f+0x18a>
 8007c1e:	f000 f8dd 	bl	8007ddc <fabsf>
 8007c22:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007dc4 <__ieee754_rem_pio2f+0x248>
 8007c26:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007c2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c36:	ee17 0a90 	vmov	r0, s15
 8007c3a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007dac <__ieee754_rem_pio2f+0x230>
 8007c3e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007c42:	281f      	cmp	r0, #31
 8007c44:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007db8 <__ieee754_rem_pio2f+0x23c>
 8007c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4c:	eeb1 6a47 	vneg.f32	s12, s14
 8007c50:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007c54:	ee16 1a90 	vmov	r1, s13
 8007c58:	dc09      	bgt.n	8007c6e <__ieee754_rem_pio2f+0xf2>
 8007c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8007dc8 <__ieee754_rem_pio2f+0x24c>)
 8007c5c:	1e47      	subs	r7, r0, #1
 8007c5e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007c62:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007c66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d107      	bne.n	8007c7e <__ieee754_rem_pio2f+0x102>
 8007c6e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8007c72:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007c76:	2a08      	cmp	r2, #8
 8007c78:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007c7c:	dc14      	bgt.n	8007ca8 <__ieee754_rem_pio2f+0x12c>
 8007c7e:	6021      	str	r1, [r4, #0]
 8007c80:	ed94 7a00 	vldr	s14, [r4]
 8007c84:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007c88:	2e00      	cmp	r6, #0
 8007c8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c8e:	ed84 0a01 	vstr	s0, [r4, #4]
 8007c92:	daa6      	bge.n	8007be2 <__ieee754_rem_pio2f+0x66>
 8007c94:	eeb1 7a47 	vneg.f32	s14, s14
 8007c98:	eeb1 0a40 	vneg.f32	s0, s0
 8007c9c:	ed84 7a00 	vstr	s14, [r4]
 8007ca0:	ed84 0a01 	vstr	s0, [r4, #4]
 8007ca4:	4240      	negs	r0, r0
 8007ca6:	e79c      	b.n	8007be2 <__ieee754_rem_pio2f+0x66>
 8007ca8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8007db4 <__ieee754_rem_pio2f+0x238>
 8007cac:	eef0 6a40 	vmov.f32	s13, s0
 8007cb0:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007cb4:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007cb8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007cbc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007dbc <__ieee754_rem_pio2f+0x240>
 8007cc0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007cc4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007cc8:	ee15 2a90 	vmov	r2, s11
 8007ccc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007cd0:	1a5b      	subs	r3, r3, r1
 8007cd2:	2b19      	cmp	r3, #25
 8007cd4:	dc04      	bgt.n	8007ce0 <__ieee754_rem_pio2f+0x164>
 8007cd6:	edc4 5a00 	vstr	s11, [r4]
 8007cda:	eeb0 0a66 	vmov.f32	s0, s13
 8007cde:	e7cf      	b.n	8007c80 <__ieee754_rem_pio2f+0x104>
 8007ce0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8007dcc <__ieee754_rem_pio2f+0x250>
 8007ce4:	eeb0 0a66 	vmov.f32	s0, s13
 8007ce8:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007cec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007cf0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007dd0 <__ieee754_rem_pio2f+0x254>
 8007cf4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007cf8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007cfc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007d00:	ed84 7a00 	vstr	s14, [r4]
 8007d04:	e7bc      	b.n	8007c80 <__ieee754_rem_pio2f+0x104>
 8007d06:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007d0a:	d306      	bcc.n	8007d1a <__ieee754_rem_pio2f+0x19e>
 8007d0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007d10:	edc0 7a01 	vstr	s15, [r0, #4]
 8007d14:	edc0 7a00 	vstr	s15, [r0]
 8007d18:	e73e      	b.n	8007b98 <__ieee754_rem_pio2f+0x1c>
 8007d1a:	15ea      	asrs	r2, r5, #23
 8007d1c:	3a86      	subs	r2, #134	@ 0x86
 8007d1e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d2a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8007dd4 <__ieee754_rem_pio2f+0x258>
 8007d2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d36:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007d3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d4a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007d4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5a:	edcd 7a05 	vstr	s15, [sp, #20]
 8007d5e:	d11e      	bne.n	8007d9e <__ieee754_rem_pio2f+0x222>
 8007d60:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d68:	bf0c      	ite	eq
 8007d6a:	2301      	moveq	r3, #1
 8007d6c:	2302      	movne	r3, #2
 8007d6e:	491a      	ldr	r1, [pc, #104]	@ (8007dd8 <__ieee754_rem_pio2f+0x25c>)
 8007d70:	9101      	str	r1, [sp, #4]
 8007d72:	2102      	movs	r1, #2
 8007d74:	9100      	str	r1, [sp, #0]
 8007d76:	a803      	add	r0, sp, #12
 8007d78:	4621      	mov	r1, r4
 8007d7a:	f000 f837 	bl	8007dec <__kernel_rem_pio2f>
 8007d7e:	2e00      	cmp	r6, #0
 8007d80:	f6bf af2f 	bge.w	8007be2 <__ieee754_rem_pio2f+0x66>
 8007d84:	edd4 7a00 	vldr	s15, [r4]
 8007d88:	eef1 7a67 	vneg.f32	s15, s15
 8007d8c:	edc4 7a00 	vstr	s15, [r4]
 8007d90:	edd4 7a01 	vldr	s15, [r4, #4]
 8007d94:	eef1 7a67 	vneg.f32	s15, s15
 8007d98:	edc4 7a01 	vstr	s15, [r4, #4]
 8007d9c:	e782      	b.n	8007ca4 <__ieee754_rem_pio2f+0x128>
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e7e5      	b.n	8007d6e <__ieee754_rem_pio2f+0x1f2>
 8007da2:	bf00      	nop
 8007da4:	3f490fd8 	.word	0x3f490fd8
 8007da8:	4016cbe3 	.word	0x4016cbe3
 8007dac:	3fc90f80 	.word	0x3fc90f80
 8007db0:	3fc90fd0 	.word	0x3fc90fd0
 8007db4:	37354400 	.word	0x37354400
 8007db8:	37354443 	.word	0x37354443
 8007dbc:	2e85a308 	.word	0x2e85a308
 8007dc0:	43490f80 	.word	0x43490f80
 8007dc4:	3f22f984 	.word	0x3f22f984
 8007dc8:	0800849c 	.word	0x0800849c
 8007dcc:	2e85a300 	.word	0x2e85a300
 8007dd0:	248d3132 	.word	0x248d3132
 8007dd4:	43800000 	.word	0x43800000
 8007dd8:	0800851c 	.word	0x0800851c

08007ddc <fabsf>:
 8007ddc:	ee10 3a10 	vmov	r3, s0
 8007de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007de4:	ee00 3a10 	vmov	s0, r3
 8007de8:	4770      	bx	lr
	...

08007dec <__kernel_rem_pio2f>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	ed2d 8b04 	vpush	{d8-d9}
 8007df4:	b0d9      	sub	sp, #356	@ 0x164
 8007df6:	4690      	mov	r8, r2
 8007df8:	9001      	str	r0, [sp, #4]
 8007dfa:	4ab9      	ldr	r2, [pc, #740]	@ (80080e0 <__kernel_rem_pio2f+0x2f4>)
 8007dfc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8007dfe:	f118 0f04 	cmn.w	r8, #4
 8007e02:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8007e06:	460f      	mov	r7, r1
 8007e08:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e0c:	db27      	blt.n	8007e5e <__kernel_rem_pio2f+0x72>
 8007e0e:	f1b8 0203 	subs.w	r2, r8, #3
 8007e12:	bf48      	it	mi
 8007e14:	f108 0204 	addmi.w	r2, r8, #4
 8007e18:	10d2      	asrs	r2, r2, #3
 8007e1a:	1c55      	adds	r5, r2, #1
 8007e1c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007e1e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80080f0 <__kernel_rem_pio2f+0x304>
 8007e22:	00e8      	lsls	r0, r5, #3
 8007e24:	eba2 060b 	sub.w	r6, r2, fp
 8007e28:	9002      	str	r0, [sp, #8]
 8007e2a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8007e2e:	eb0a 0c0b 	add.w	ip, sl, fp
 8007e32:	ac1c      	add	r4, sp, #112	@ 0x70
 8007e34:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007e38:	2000      	movs	r0, #0
 8007e3a:	4560      	cmp	r0, ip
 8007e3c:	dd11      	ble.n	8007e62 <__kernel_rem_pio2f+0x76>
 8007e3e:	a91c      	add	r1, sp, #112	@ 0x70
 8007e40:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007e44:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007e48:	f04f 0c00 	mov.w	ip, #0
 8007e4c:	45d4      	cmp	ip, sl
 8007e4e:	dc27      	bgt.n	8007ea0 <__kernel_rem_pio2f+0xb4>
 8007e50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007e54:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80080f0 <__kernel_rem_pio2f+0x304>
 8007e58:	4606      	mov	r6, r0
 8007e5a:	2400      	movs	r4, #0
 8007e5c:	e016      	b.n	8007e8c <__kernel_rem_pio2f+0xa0>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	e7db      	b.n	8007e1a <__kernel_rem_pio2f+0x2e>
 8007e62:	42c6      	cmn	r6, r0
 8007e64:	bf5d      	ittte	pl
 8007e66:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007e6a:	ee07 1a90 	vmovpl	s15, r1
 8007e6e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007e72:	eef0 7a47 	vmovmi.f32	s15, s14
 8007e76:	ece4 7a01 	vstmia	r4!, {s15}
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	e7dd      	b.n	8007e3a <__kernel_rem_pio2f+0x4e>
 8007e7e:	ecfe 6a01 	vldmia	lr!, {s13}
 8007e82:	ed96 7a00 	vldr	s14, [r6]
 8007e86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e8a:	3401      	adds	r4, #1
 8007e8c:	455c      	cmp	r4, fp
 8007e8e:	f1a6 0604 	sub.w	r6, r6, #4
 8007e92:	ddf4      	ble.n	8007e7e <__kernel_rem_pio2f+0x92>
 8007e94:	ece9 7a01 	vstmia	r9!, {s15}
 8007e98:	f10c 0c01 	add.w	ip, ip, #1
 8007e9c:	3004      	adds	r0, #4
 8007e9e:	e7d5      	b.n	8007e4c <__kernel_rem_pio2f+0x60>
 8007ea0:	a908      	add	r1, sp, #32
 8007ea2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ea6:	9104      	str	r1, [sp, #16]
 8007ea8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007eaa:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80080ec <__kernel_rem_pio2f+0x300>
 8007eae:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80080e8 <__kernel_rem_pio2f+0x2fc>
 8007eb2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007eb6:	9203      	str	r2, [sp, #12]
 8007eb8:	4654      	mov	r4, sl
 8007eba:	00a2      	lsls	r2, r4, #2
 8007ebc:	9205      	str	r2, [sp, #20]
 8007ebe:	aa58      	add	r2, sp, #352	@ 0x160
 8007ec0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007ec4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8007ec8:	a944      	add	r1, sp, #272	@ 0x110
 8007eca:	aa08      	add	r2, sp, #32
 8007ecc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007ed0:	4694      	mov	ip, r2
 8007ed2:	4626      	mov	r6, r4
 8007ed4:	2e00      	cmp	r6, #0
 8007ed6:	f1a0 0004 	sub.w	r0, r0, #4
 8007eda:	dc4c      	bgt.n	8007f76 <__kernel_rem_pio2f+0x18a>
 8007edc:	4628      	mov	r0, r5
 8007ede:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ee2:	f000 f9f5 	bl	80082d0 <scalbnf>
 8007ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8007eea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8007eee:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007ef2:	f000 fa53 	bl	800839c <floorf>
 8007ef6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007efa:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007f08:	ee17 9a90 	vmov	r9, s15
 8007f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f10:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007f14:	dd41      	ble.n	8007f9a <__kernel_rem_pio2f+0x1ae>
 8007f16:	f104 3cff 	add.w	ip, r4, #4294967295
 8007f1a:	a908      	add	r1, sp, #32
 8007f1c:	f1c5 0e08 	rsb	lr, r5, #8
 8007f20:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007f24:	fa46 f00e 	asr.w	r0, r6, lr
 8007f28:	4481      	add	r9, r0
 8007f2a:	fa00 f00e 	lsl.w	r0, r0, lr
 8007f2e:	1a36      	subs	r6, r6, r0
 8007f30:	f1c5 0007 	rsb	r0, r5, #7
 8007f34:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007f38:	4106      	asrs	r6, r0
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	dd3c      	ble.n	8007fb8 <__kernel_rem_pio2f+0x1cc>
 8007f3e:	f04f 0e00 	mov.w	lr, #0
 8007f42:	f109 0901 	add.w	r9, r9, #1
 8007f46:	4670      	mov	r0, lr
 8007f48:	4574      	cmp	r4, lr
 8007f4a:	dc68      	bgt.n	800801e <__kernel_rem_pio2f+0x232>
 8007f4c:	2d00      	cmp	r5, #0
 8007f4e:	dd03      	ble.n	8007f58 <__kernel_rem_pio2f+0x16c>
 8007f50:	2d01      	cmp	r5, #1
 8007f52:	d074      	beq.n	800803e <__kernel_rem_pio2f+0x252>
 8007f54:	2d02      	cmp	r5, #2
 8007f56:	d07d      	beq.n	8008054 <__kernel_rem_pio2f+0x268>
 8007f58:	2e02      	cmp	r6, #2
 8007f5a:	d12d      	bne.n	8007fb8 <__kernel_rem_pio2f+0x1cc>
 8007f5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007f60:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007f64:	b340      	cbz	r0, 8007fb8 <__kernel_rem_pio2f+0x1cc>
 8007f66:	4628      	mov	r0, r5
 8007f68:	9306      	str	r3, [sp, #24]
 8007f6a:	f000 f9b1 	bl	80082d0 <scalbnf>
 8007f6e:	9b06      	ldr	r3, [sp, #24]
 8007f70:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007f74:	e020      	b.n	8007fb8 <__kernel_rem_pio2f+0x1cc>
 8007f76:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007f7a:	3e01      	subs	r6, #1
 8007f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f84:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007f88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007f8c:	ecac 0a01 	vstmia	ip!, {s0}
 8007f90:	ed90 0a00 	vldr	s0, [r0]
 8007f94:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007f98:	e79c      	b.n	8007ed4 <__kernel_rem_pio2f+0xe8>
 8007f9a:	d105      	bne.n	8007fa8 <__kernel_rem_pio2f+0x1bc>
 8007f9c:	1e60      	subs	r0, r4, #1
 8007f9e:	a908      	add	r1, sp, #32
 8007fa0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007fa4:	11f6      	asrs	r6, r6, #7
 8007fa6:	e7c8      	b.n	8007f3a <__kernel_rem_pio2f+0x14e>
 8007fa8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007fac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb4:	da31      	bge.n	800801a <__kernel_rem_pio2f+0x22e>
 8007fb6:	2600      	movs	r6, #0
 8007fb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc0:	f040 8098 	bne.w	80080f4 <__kernel_rem_pio2f+0x308>
 8007fc4:	1e60      	subs	r0, r4, #1
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	4550      	cmp	r0, sl
 8007fca:	da4b      	bge.n	8008064 <__kernel_rem_pio2f+0x278>
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	d065      	beq.n	800809c <__kernel_rem_pio2f+0x2b0>
 8007fd0:	3c01      	subs	r4, #1
 8007fd2:	ab08      	add	r3, sp, #32
 8007fd4:	3d08      	subs	r5, #8
 8007fd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0f8      	beq.n	8007fd0 <__kernel_rem_pio2f+0x1e4>
 8007fde:	4628      	mov	r0, r5
 8007fe0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007fe4:	f000 f974 	bl	80082d0 <scalbnf>
 8007fe8:	1c63      	adds	r3, r4, #1
 8007fea:	aa44      	add	r2, sp, #272	@ 0x110
 8007fec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80080ec <__kernel_rem_pio2f+0x300>
 8007ff0:	0099      	lsls	r1, r3, #2
 8007ff2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007ff6:	4623      	mov	r3, r4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f280 80a9 	bge.w	8008150 <__kernel_rem_pio2f+0x364>
 8007ffe:	4623      	mov	r3, r4
 8008000:	2b00      	cmp	r3, #0
 8008002:	f2c0 80c7 	blt.w	8008194 <__kernel_rem_pio2f+0x3a8>
 8008006:	aa44      	add	r2, sp, #272	@ 0x110
 8008008:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800800c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80080e4 <__kernel_rem_pio2f+0x2f8>
 8008010:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80080f0 <__kernel_rem_pio2f+0x304>
 8008014:	2000      	movs	r0, #0
 8008016:	1ae2      	subs	r2, r4, r3
 8008018:	e0b1      	b.n	800817e <__kernel_rem_pio2f+0x392>
 800801a:	2602      	movs	r6, #2
 800801c:	e78f      	b.n	8007f3e <__kernel_rem_pio2f+0x152>
 800801e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008022:	b948      	cbnz	r0, 8008038 <__kernel_rem_pio2f+0x24c>
 8008024:	b121      	cbz	r1, 8008030 <__kernel_rem_pio2f+0x244>
 8008026:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800802a:	f842 1c04 	str.w	r1, [r2, #-4]
 800802e:	2101      	movs	r1, #1
 8008030:	f10e 0e01 	add.w	lr, lr, #1
 8008034:	4608      	mov	r0, r1
 8008036:	e787      	b.n	8007f48 <__kernel_rem_pio2f+0x15c>
 8008038:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800803c:	e7f5      	b.n	800802a <__kernel_rem_pio2f+0x23e>
 800803e:	f104 3cff 	add.w	ip, r4, #4294967295
 8008042:	aa08      	add	r2, sp, #32
 8008044:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008048:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800804c:	a908      	add	r1, sp, #32
 800804e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8008052:	e781      	b.n	8007f58 <__kernel_rem_pio2f+0x16c>
 8008054:	f104 3cff 	add.w	ip, r4, #4294967295
 8008058:	aa08      	add	r2, sp, #32
 800805a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800805e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008062:	e7f3      	b.n	800804c <__kernel_rem_pio2f+0x260>
 8008064:	a908      	add	r1, sp, #32
 8008066:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800806a:	3801      	subs	r0, #1
 800806c:	430a      	orrs	r2, r1
 800806e:	e7ab      	b.n	8007fc8 <__kernel_rem_pio2f+0x1dc>
 8008070:	3201      	adds	r2, #1
 8008072:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008076:	2e00      	cmp	r6, #0
 8008078:	d0fa      	beq.n	8008070 <__kernel_rem_pio2f+0x284>
 800807a:	9905      	ldr	r1, [sp, #20]
 800807c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008080:	eb0d 0001 	add.w	r0, sp, r1
 8008084:	18e6      	adds	r6, r4, r3
 8008086:	a91c      	add	r1, sp, #112	@ 0x70
 8008088:	f104 0c01 	add.w	ip, r4, #1
 800808c:	384c      	subs	r0, #76	@ 0x4c
 800808e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8008092:	4422      	add	r2, r4
 8008094:	4562      	cmp	r2, ip
 8008096:	da04      	bge.n	80080a2 <__kernel_rem_pio2f+0x2b6>
 8008098:	4614      	mov	r4, r2
 800809a:	e70e      	b.n	8007eba <__kernel_rem_pio2f+0xce>
 800809c:	9804      	ldr	r0, [sp, #16]
 800809e:	2201      	movs	r2, #1
 80080a0:	e7e7      	b.n	8008072 <__kernel_rem_pio2f+0x286>
 80080a2:	9903      	ldr	r1, [sp, #12]
 80080a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80080a8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80080ac:	9105      	str	r1, [sp, #20]
 80080ae:	ee07 1a90 	vmov	s15, r1
 80080b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080b6:	2400      	movs	r4, #0
 80080b8:	ece6 7a01 	vstmia	r6!, {s15}
 80080bc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80080f0 <__kernel_rem_pio2f+0x304>
 80080c0:	46b1      	mov	r9, r6
 80080c2:	455c      	cmp	r4, fp
 80080c4:	dd04      	ble.n	80080d0 <__kernel_rem_pio2f+0x2e4>
 80080c6:	ece0 7a01 	vstmia	r0!, {s15}
 80080ca:	f10c 0c01 	add.w	ip, ip, #1
 80080ce:	e7e1      	b.n	8008094 <__kernel_rem_pio2f+0x2a8>
 80080d0:	ecfe 6a01 	vldmia	lr!, {s13}
 80080d4:	ed39 7a01 	vldmdb	r9!, {s14}
 80080d8:	3401      	adds	r4, #1
 80080da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80080de:	e7f0      	b.n	80080c2 <__kernel_rem_pio2f+0x2d6>
 80080e0:	08008860 	.word	0x08008860
 80080e4:	08008834 	.word	0x08008834
 80080e8:	43800000 	.word	0x43800000
 80080ec:	3b800000 	.word	0x3b800000
 80080f0:	00000000 	.word	0x00000000
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	eeb0 0a48 	vmov.f32	s0, s16
 80080fa:	eba3 0008 	sub.w	r0, r3, r8
 80080fe:	f000 f8e7 	bl	80082d0 <scalbnf>
 8008102:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80080e8 <__kernel_rem_pio2f+0x2fc>
 8008106:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800810a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810e:	db19      	blt.n	8008144 <__kernel_rem_pio2f+0x358>
 8008110:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80080ec <__kernel_rem_pio2f+0x300>
 8008114:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008118:	aa08      	add	r2, sp, #32
 800811a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800811e:	3508      	adds	r5, #8
 8008120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008124:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800812c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008130:	ee10 3a10 	vmov	r3, s0
 8008134:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008138:	ee17 3a90 	vmov	r3, s15
 800813c:	3401      	adds	r4, #1
 800813e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008142:	e74c      	b.n	8007fde <__kernel_rem_pio2f+0x1f2>
 8008144:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008148:	aa08      	add	r2, sp, #32
 800814a:	ee10 3a10 	vmov	r3, s0
 800814e:	e7f6      	b.n	800813e <__kernel_rem_pio2f+0x352>
 8008150:	a808      	add	r0, sp, #32
 8008152:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008156:	9001      	str	r0, [sp, #4]
 8008158:	ee07 0a90 	vmov	s15, r0
 800815c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008160:	3b01      	subs	r3, #1
 8008162:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008166:	ee20 0a07 	vmul.f32	s0, s0, s14
 800816a:	ed62 7a01 	vstmdb	r2!, {s15}
 800816e:	e743      	b.n	8007ff8 <__kernel_rem_pio2f+0x20c>
 8008170:	ecfc 6a01 	vldmia	ip!, {s13}
 8008174:	ecb5 7a01 	vldmia	r5!, {s14}
 8008178:	eee6 7a87 	vfma.f32	s15, s13, s14
 800817c:	3001      	adds	r0, #1
 800817e:	4550      	cmp	r0, sl
 8008180:	dc01      	bgt.n	8008186 <__kernel_rem_pio2f+0x39a>
 8008182:	4282      	cmp	r2, r0
 8008184:	daf4      	bge.n	8008170 <__kernel_rem_pio2f+0x384>
 8008186:	a858      	add	r0, sp, #352	@ 0x160
 8008188:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800818c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8008190:	3b01      	subs	r3, #1
 8008192:	e735      	b.n	8008000 <__kernel_rem_pio2f+0x214>
 8008194:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008196:	2b02      	cmp	r3, #2
 8008198:	dc09      	bgt.n	80081ae <__kernel_rem_pio2f+0x3c2>
 800819a:	2b00      	cmp	r3, #0
 800819c:	dc2b      	bgt.n	80081f6 <__kernel_rem_pio2f+0x40a>
 800819e:	d044      	beq.n	800822a <__kernel_rem_pio2f+0x43e>
 80081a0:	f009 0007 	and.w	r0, r9, #7
 80081a4:	b059      	add	sp, #356	@ 0x164
 80081a6:	ecbd 8b04 	vpop	{d8-d9}
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d1f5      	bne.n	80081a0 <__kernel_rem_pio2f+0x3b4>
 80081b4:	aa30      	add	r2, sp, #192	@ 0xc0
 80081b6:	1f0b      	subs	r3, r1, #4
 80081b8:	4413      	add	r3, r2
 80081ba:	461a      	mov	r2, r3
 80081bc:	4620      	mov	r0, r4
 80081be:	2800      	cmp	r0, #0
 80081c0:	f1a2 0204 	sub.w	r2, r2, #4
 80081c4:	dc52      	bgt.n	800826c <__kernel_rem_pio2f+0x480>
 80081c6:	4622      	mov	r2, r4
 80081c8:	2a01      	cmp	r2, #1
 80081ca:	f1a3 0304 	sub.w	r3, r3, #4
 80081ce:	dc5d      	bgt.n	800828c <__kernel_rem_pio2f+0x4a0>
 80081d0:	ab30      	add	r3, sp, #192	@ 0xc0
 80081d2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80080f0 <__kernel_rem_pio2f+0x304>
 80081d6:	440b      	add	r3, r1
 80081d8:	2c01      	cmp	r4, #1
 80081da:	dc67      	bgt.n	80082ac <__kernel_rem_pio2f+0x4c0>
 80081dc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80081e0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80081e4:	2e00      	cmp	r6, #0
 80081e6:	d167      	bne.n	80082b8 <__kernel_rem_pio2f+0x4cc>
 80081e8:	edc7 6a00 	vstr	s13, [r7]
 80081ec:	ed87 7a01 	vstr	s14, [r7, #4]
 80081f0:	edc7 7a02 	vstr	s15, [r7, #8]
 80081f4:	e7d4      	b.n	80081a0 <__kernel_rem_pio2f+0x3b4>
 80081f6:	ab30      	add	r3, sp, #192	@ 0xc0
 80081f8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80080f0 <__kernel_rem_pio2f+0x304>
 80081fc:	440b      	add	r3, r1
 80081fe:	4622      	mov	r2, r4
 8008200:	2a00      	cmp	r2, #0
 8008202:	da24      	bge.n	800824e <__kernel_rem_pio2f+0x462>
 8008204:	b34e      	cbz	r6, 800825a <__kernel_rem_pio2f+0x46e>
 8008206:	eef1 7a47 	vneg.f32	s15, s14
 800820a:	edc7 7a00 	vstr	s15, [r7]
 800820e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8008212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008216:	aa31      	add	r2, sp, #196	@ 0xc4
 8008218:	2301      	movs	r3, #1
 800821a:	429c      	cmp	r4, r3
 800821c:	da20      	bge.n	8008260 <__kernel_rem_pio2f+0x474>
 800821e:	b10e      	cbz	r6, 8008224 <__kernel_rem_pio2f+0x438>
 8008220:	eef1 7a67 	vneg.f32	s15, s15
 8008224:	edc7 7a01 	vstr	s15, [r7, #4]
 8008228:	e7ba      	b.n	80081a0 <__kernel_rem_pio2f+0x3b4>
 800822a:	ab30      	add	r3, sp, #192	@ 0xc0
 800822c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80080f0 <__kernel_rem_pio2f+0x304>
 8008230:	440b      	add	r3, r1
 8008232:	2c00      	cmp	r4, #0
 8008234:	da05      	bge.n	8008242 <__kernel_rem_pio2f+0x456>
 8008236:	b10e      	cbz	r6, 800823c <__kernel_rem_pio2f+0x450>
 8008238:	eef1 7a67 	vneg.f32	s15, s15
 800823c:	edc7 7a00 	vstr	s15, [r7]
 8008240:	e7ae      	b.n	80081a0 <__kernel_rem_pio2f+0x3b4>
 8008242:	ed33 7a01 	vldmdb	r3!, {s14}
 8008246:	3c01      	subs	r4, #1
 8008248:	ee77 7a87 	vadd.f32	s15, s15, s14
 800824c:	e7f1      	b.n	8008232 <__kernel_rem_pio2f+0x446>
 800824e:	ed73 7a01 	vldmdb	r3!, {s15}
 8008252:	3a01      	subs	r2, #1
 8008254:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008258:	e7d2      	b.n	8008200 <__kernel_rem_pio2f+0x414>
 800825a:	eef0 7a47 	vmov.f32	s15, s14
 800825e:	e7d4      	b.n	800820a <__kernel_rem_pio2f+0x41e>
 8008260:	ecb2 7a01 	vldmia	r2!, {s14}
 8008264:	3301      	adds	r3, #1
 8008266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800826a:	e7d6      	b.n	800821a <__kernel_rem_pio2f+0x42e>
 800826c:	edd2 7a00 	vldr	s15, [r2]
 8008270:	edd2 6a01 	vldr	s13, [r2, #4]
 8008274:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008278:	3801      	subs	r0, #1
 800827a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800827e:	ed82 7a00 	vstr	s14, [r2]
 8008282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008286:	edc2 7a01 	vstr	s15, [r2, #4]
 800828a:	e798      	b.n	80081be <__kernel_rem_pio2f+0x3d2>
 800828c:	edd3 7a00 	vldr	s15, [r3]
 8008290:	edd3 6a01 	vldr	s13, [r3, #4]
 8008294:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008298:	3a01      	subs	r2, #1
 800829a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800829e:	ed83 7a00 	vstr	s14, [r3]
 80082a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a6:	edc3 7a01 	vstr	s15, [r3, #4]
 80082aa:	e78d      	b.n	80081c8 <__kernel_rem_pio2f+0x3dc>
 80082ac:	ed33 7a01 	vldmdb	r3!, {s14}
 80082b0:	3c01      	subs	r4, #1
 80082b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082b6:	e78f      	b.n	80081d8 <__kernel_rem_pio2f+0x3ec>
 80082b8:	eef1 6a66 	vneg.f32	s13, s13
 80082bc:	eeb1 7a47 	vneg.f32	s14, s14
 80082c0:	edc7 6a00 	vstr	s13, [r7]
 80082c4:	ed87 7a01 	vstr	s14, [r7, #4]
 80082c8:	eef1 7a67 	vneg.f32	s15, s15
 80082cc:	e790      	b.n	80081f0 <__kernel_rem_pio2f+0x404>
 80082ce:	bf00      	nop

080082d0 <scalbnf>:
 80082d0:	ee10 3a10 	vmov	r3, s0
 80082d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80082d8:	d02b      	beq.n	8008332 <scalbnf+0x62>
 80082da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80082de:	d302      	bcc.n	80082e6 <scalbnf+0x16>
 80082e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082e4:	4770      	bx	lr
 80082e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80082ea:	d123      	bne.n	8008334 <scalbnf+0x64>
 80082ec:	4b24      	ldr	r3, [pc, #144]	@ (8008380 <scalbnf+0xb0>)
 80082ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008384 <scalbnf+0xb4>
 80082f2:	4298      	cmp	r0, r3
 80082f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80082f8:	db17      	blt.n	800832a <scalbnf+0x5a>
 80082fa:	ee10 3a10 	vmov	r3, s0
 80082fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008302:	3a19      	subs	r2, #25
 8008304:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008308:	4288      	cmp	r0, r1
 800830a:	dd15      	ble.n	8008338 <scalbnf+0x68>
 800830c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008388 <scalbnf+0xb8>
 8008310:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800838c <scalbnf+0xbc>
 8008314:	ee10 3a10 	vmov	r3, s0
 8008318:	eeb0 7a67 	vmov.f32	s14, s15
 800831c:	2b00      	cmp	r3, #0
 800831e:	bfb8      	it	lt
 8008320:	eef0 7a66 	vmovlt.f32	s15, s13
 8008324:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008328:	4770      	bx	lr
 800832a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008390 <scalbnf+0xc0>
 800832e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008332:	4770      	bx	lr
 8008334:	0dd2      	lsrs	r2, r2, #23
 8008336:	e7e5      	b.n	8008304 <scalbnf+0x34>
 8008338:	4410      	add	r0, r2
 800833a:	28fe      	cmp	r0, #254	@ 0xfe
 800833c:	dce6      	bgt.n	800830c <scalbnf+0x3c>
 800833e:	2800      	cmp	r0, #0
 8008340:	dd06      	ble.n	8008350 <scalbnf+0x80>
 8008342:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008346:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800834a:	ee00 3a10 	vmov	s0, r3
 800834e:	4770      	bx	lr
 8008350:	f110 0f16 	cmn.w	r0, #22
 8008354:	da09      	bge.n	800836a <scalbnf+0x9a>
 8008356:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008390 <scalbnf+0xc0>
 800835a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008394 <scalbnf+0xc4>
 800835e:	ee10 3a10 	vmov	r3, s0
 8008362:	eeb0 7a67 	vmov.f32	s14, s15
 8008366:	2b00      	cmp	r3, #0
 8008368:	e7d9      	b.n	800831e <scalbnf+0x4e>
 800836a:	3019      	adds	r0, #25
 800836c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008370:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008374:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008398 <scalbnf+0xc8>
 8008378:	ee07 3a90 	vmov	s15, r3
 800837c:	e7d7      	b.n	800832e <scalbnf+0x5e>
 800837e:	bf00      	nop
 8008380:	ffff3cb0 	.word	0xffff3cb0
 8008384:	4c000000 	.word	0x4c000000
 8008388:	7149f2ca 	.word	0x7149f2ca
 800838c:	f149f2ca 	.word	0xf149f2ca
 8008390:	0da24260 	.word	0x0da24260
 8008394:	8da24260 	.word	0x8da24260
 8008398:	33000000 	.word	0x33000000

0800839c <floorf>:
 800839c:	ee10 3a10 	vmov	r3, s0
 80083a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80083a4:	3a7f      	subs	r2, #127	@ 0x7f
 80083a6:	2a16      	cmp	r2, #22
 80083a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083ac:	dc2b      	bgt.n	8008406 <floorf+0x6a>
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	da12      	bge.n	80083d8 <floorf+0x3c>
 80083b2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008418 <floorf+0x7c>
 80083b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80083ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c2:	dd06      	ble.n	80083d2 <floorf+0x36>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	da24      	bge.n	8008412 <floorf+0x76>
 80083c8:	2900      	cmp	r1, #0
 80083ca:	4b14      	ldr	r3, [pc, #80]	@ (800841c <floorf+0x80>)
 80083cc:	bf08      	it	eq
 80083ce:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80083d2:	ee00 3a10 	vmov	s0, r3
 80083d6:	4770      	bx	lr
 80083d8:	4911      	ldr	r1, [pc, #68]	@ (8008420 <floorf+0x84>)
 80083da:	4111      	asrs	r1, r2
 80083dc:	420b      	tst	r3, r1
 80083de:	d0fa      	beq.n	80083d6 <floorf+0x3a>
 80083e0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008418 <floorf+0x7c>
 80083e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80083e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f0:	ddef      	ble.n	80083d2 <floorf+0x36>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfbe      	ittt	lt
 80083f6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80083fa:	fa40 f202 	asrlt.w	r2, r0, r2
 80083fe:	189b      	addlt	r3, r3, r2
 8008400:	ea23 0301 	bic.w	r3, r3, r1
 8008404:	e7e5      	b.n	80083d2 <floorf+0x36>
 8008406:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800840a:	d3e4      	bcc.n	80083d6 <floorf+0x3a>
 800840c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008410:	4770      	bx	lr
 8008412:	2300      	movs	r3, #0
 8008414:	e7dd      	b.n	80083d2 <floorf+0x36>
 8008416:	bf00      	nop
 8008418:	7149f2ca 	.word	0x7149f2ca
 800841c:	bf800000 	.word	0xbf800000
 8008420:	007fffff 	.word	0x007fffff

08008424 <_init>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr

08008430 <_fini>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	bf00      	nop
 8008434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008436:	bc08      	pop	{r3}
 8008438:	469e      	mov	lr, r3
 800843a:	4770      	bx	lr
